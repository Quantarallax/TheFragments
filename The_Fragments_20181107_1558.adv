####################################################################
## Start Location
####################################################################

start_at      = intro
theme         = fragments_theme
intro_graphic = intro_graphic

####################################################################
## Story Information
####################################################################

game_info {
   game_name         = The Fragments
   written_by        = Richard Hawkins
   copyright_message = (c) 2018 Richard Hawkins
   year              = 2018
   aimed_at              = [ adults ]
 #  rating_info = 15
}

####################################################################
## Customise the system messages
####################################################################

system_messages {
   you_cant_go_that_direction    = There is no exit that way.
   ask_new_game                  = WHATISTHIS Are you sure would would like a new game?
   ask_quit                      = Are you really sure you would like to quit the game?
   cannot_carry_any_more         = You cannot carry anything more.
   cant_take                     = You can't pick that up, sorry.
   empty_inventory               = Nothing
   i_cant_do_that                = You can't do that, sorry.
   inventory_list_header         = You have on your person:
   inventory_list_header_verbose = You HAVE ON YOUR PERSON!!
   it_is_dark                    = Unfortunately, it's too dark in here to see anything. You had best find a source of light.
   list_object_end_text          = .
   list_object_final_separator   = \sand\s
   list_object_separator         = ,\s
   object_list_header            = You see\s
   object_list_header_verbose    = You see:\s
   #there_are_no_obvious_exits = "";
   #you_are_already_carrying = "You are already CARRYING THAT!";
   
}

####################################################################
## The setup sets the default theme 
####################################################################

setup {
   exit_list_calculation   = none
   add_standard_vocab_set  = true
#   initialization_subroutine = init
}



####################################################################
## Set the style up
####################################################################

themes {
   fragments_theme : theme {
      derive_header_from_room_id       = true
      exit_list_style                  = verbose
      text_decorations                  = [  ]
      #font                             = amigo
#      is_list_enter                    = true
#      is_list_exit                     = true
#     font                             = helvetipixel
#       font                            = embedded_font_spectrum
       #font_size                       = 4
       wait_align                        = left
      #layout = H D O
      colors { 
         story_pen         = #aaa
#         response_pen      = #bbb
         paper             = #000
         #prompt_pen       = #eee 
         textbox_pen       = #eee
         #negative_pen     = #000
         link_pen          = #ddd
      }
   }
}

####################################################################
## Zones
####################################################################

zones {
   zone_desert : zone {
      rooms = [outside_car, desert_e, desert_n, desert_s, outside_stone_building]
   }
      zone_road : zone {
      rooms = [ outside_car, desert_n, desert_s]
   }
      zone_inside_pub : zone {
      rooms = [ the_bar, plush_alcove, games_area]
   }
      zone_bar : zone {
      rooms = [ the_bar, behind_bar]
   }
      zone_outside_pub : zone {
      rooms = [ front_of_pub, pub_steps,car_park,patio,upper_seating_area,small_pathway,up_a_large_tree]
   }
}

####################################################################
## Locations
####################################################################

rooms {
   intro : room "" passive="true" ;

   in_car                 : room "You are in your stalled car. All around is the forbidding desert. A wind is whipping grit and coarse dust all over the place, so your vision of outside is clouds of billowing orange.\nThe familiar dashboard in front of you looks conspicuously dark. You have a sinking feeling that this is going to be one of those days."  header="In Your Car";

   on_stool                 : room "You are standing on the stool.\nYou can see a window at chest height."  header="On Stool";

   below_stone_building   : room "You are in what can only described as a cellar of some sort. It is gloomy and dankness pervades your nostrils. The coolness of the air is a pleasant and a welcome relief from the heat of the desert.\nYou notice how eerily quiet it is. Light trickles down from above and barely illuminates the room.\nIt looks like this room was dug directly from the ground. It is a three hundred and sixty degree spread of pungent hard packed soil. In some places roots have been sheared off. Excavation marks dotted around look rather recent.\nThe pungent smells from the soil walls and floor pervade your nostrils.\nYou can get back up through the opening above."  header="Cellar";

   desert_e               : room {
      text_dynamic {(
         "You are a way away from the car. You can only just make its outline to the west. To the east you can see some sort of structure, but it is unclear as to its function. Nothing is obvious, only indistinct shapes, in any other direction." +
         ( !player_dirty ?
            "\nA dishevelled priest is here." :
            ""
         )
      )}  header="Desert"
   }

   desert_n               : room "You follow the road north someways, but nothing changes. The wind is all around and it feels somewhat claustrophobic the way the light is being played with in the storm.\nThere is a rusted highway sign leaning to within an inch of its life on the verge. You can just see your car to the south."  header="Desert";

   desert_s               : room "You follow the road south until you almost lost sight of your car. There really doesn't appear to be anything out here, and judging by the storm, seeing anything of use has a low probability."  header="Desert";

   inside_stone_building  : room {
      text_dynamic {(
         "" +
          ( !tap_on ?
            "You are inside a squat stone building, relatively shielded from the storm outside. Slats of light creep in through cracks in the wall, casting streaks of orange on to the stony floor.\nA rusted tap is visible protruding from the wall. There is a large barrel positioned against the east wall.\nYou can also exit back into the hell's evening which is the desert." :
            "You are inside a squat stone building, relatively shielded from the storm outside. Slats of light creep in through cracks in the wall, casting streaks of orange on to the stony floor.\nA rusted tap is visible protruding from the wall. Water is running from it since you managed to get it working.\nThere is a large barrel positioned against the east wall.\nYou can also exit back into the hell's evening which is the desert."
         )
      )}
      header="Stone Building" #passive="true";
   }
   outside_car            : room {             
      text_dynamic {(
         "" +
         ( !priest_dead ?
            "You can barely see the surrounding area due to the grit encrusted wind and the diminishing light.\nYour car is parked on the side of the road, in amongst the small grasses and rocks. The desert stretches to the north, south and east, it's probably a good idea to stay within view of you car.\nThe tarmac road which you broke down on runs north/south across the desolate landscape.\nYou have the distinct feeling you are being watched." :
            "The sun has appeared and the storm seems to be diminishing.\nYour car is parked on the side of the road.\nThe desert stretches to the north, south and east. The road still runs north/south across the desolate landscape and you notice there's a lot more traffic droning along in both directions.\nRays of low muddy light are shining through the clouds, illuminating the horizon.\nThere is now a shiny black van parked behind your car, the driver of which is leaning casually against your vehicle. A dark-haired girl dressed in biker clothes." 
         )
      )}
      header="Outside Car" graphic = "DesertCarCrop"
   }
   outside_stone_building : room  {
      text_dynamic {( 
         "You are outside a small stone building, offset some way from the highway. It is nestled in a dip in the ground, which apparently has been eroded over time by the relentlesness of the desert environment." + 
         ( wood_exists ?
            "\nThe door is half off its hinges so you should be ok entering." :
            "\nThe door is slowly being wrecked by the wind."
         ) +
         ( player_dirty && !priest_dead ?
            "\nThe priest is also here, standing close to you, almost leaning forward off his heels." :
            ""
         )
       )} 
        header="Stone Building"
   }
  
     short_corridor     : room {
      text_dynamic {(
         "You are in a short corridor which is evidently an entry way into the toilets and as such is more of a long, thin recess to set them back from the main part of the pub.\nThe walls here are wallpapered similar to the main area, though one is painted an odd orange colour. " +
         ( display_open ?
            "\nThere is a small cubby hole visible in the east wall." :
            "This accentuates the effect of the panel in the wall which is illuminating the immediate area in a sorrowful salmon colour."
         )
      )}  header="Short Corridor"
   }
   plush_alcove : room  {
      text_dynamic {( 
         "You are seated in a comfortable pew in a plush alcove. The walls are covered in a gold and purple velvet effect wallpaper. A scratched wooden table is in front of you. Ashen light shines in through a large, old style window, highlighting its imperfections." +
            ( (is_present "woman") ?
               "\nSeated across the table on a short, wooden stool is a blond haired woman nursing a pint glass filled with a brown, frothy liquid. She is animated and slightly wobbly.\nBehind her " :
               "\nA table sits in front of you, behind which there "
            ) + "is a small, ceramic fireplace which looks too clean to be in constant use. A decorative mirror to the wall above the mantelpiece has the words 'The Brother's View' etched across it in gold lettering.\nAcross to the west is the direction of the bar, with a passageway to the north."
       )} header="Plush Alcove" 
   } 

    
   pub_steps          : room {
      text_dynamic {("You are outside the pub next to some steps, which lead through the entranceway to the east, into the building." +
         ( !( vagrant_talked) ? "\nSitting on the steps is a vagrant, staring into space, minding his own business." : "\nLooking at the steps you remember the vagrant and note. Meet him?" ) + "\nThe path continues north to what appears to be a car park area." + "\n Roughly from the north, through the west, to the south, the scenery is indistinct, as if covered in gauze, an indistinct shimmer."
         )} header="Front Of Pub / Pub Steps"
   }
   
      up_a_large_tree    : room {
         text_dynamic {("You are up a large, wisened old tree. The tree trunk's girth shows it has probably been here since before the pub was built.\nThe smell of bark and moss hangs in the air. The large branch you are on is one amongst many.\nYou have a bird's eye view of the immediate area: the pub to the southwest past the outside seating area and across to the west to what looks like a carpark but is obscured by a white outbuilding.\nOut further, there is a strange border of shimmering colours, as if some sort of heat haze. Past which you can only make out flashes of light, interspersed with flitterings of different images. A mishmash of postcard landscapes." +
         ( (lights_unwrapped_high) ? "" : "\nFairylights are wrapped around the branches here to add an extra magical ambience during the dark hours." )
         )}header="Up A Large Tree"
   }
   
   upper_seating_area : room {
      text_dynamic {("You are in the upper seating area of the Brother's View pub. The ground has been covered in gravel and crunches under foot. A few PICNIC TABLES are scattered around.\nTo the east is a shimmering view out over the local city, obscured only slightly by a large tree" +
      ( (lights_unwrapped_low) ? "." : " which has fairylights wrapped round its trunk and lower branches. Probably to add some atmosphere on warm summer nights." ) + "\nOn all sides there is a stone wall which is higher to the north waist height everywhere else.\n To the south the wall opens up to allow access down a small incline.\nTo the west there is a path which goes through the wall and runs alongside the building to the front of the pub."
      )} header="Upper Seating Area"
   }
   
   behind_bar        : room "You are behind the bar at the back near the wall. It looks much the same as from the other side except you can reach the bottles and pumps more easily. And the floor is sticky with old liquids. And it smells.\nThere are many shadowed nooks and crannies due to the haphazard layout of the shelves.\nYou can get around to the other side by going south back into the main bar."  header="Behind The Bar";
   
   games_area         : room "You are in the games area of the establishment. It consists of a dart board, some board games, a piano in the corner and various posters around the wall. There is an area of empty floor which at one time or another has been used for various local bands, judging by the raised stage and speakers sitting on top.\nA large window next to a door lets in some mucky light from the outside."  header="Games Area";

   chaotic_maelstrom  : room "Tendrils of light. Blackness, illuminated, every so often with a grey-yellow spark of light cascading across a canvas of tenuous mist. There is an electric smell in the air and the ground seems to tilt erratically."  header="Chaotic Maelstrom";

   front_of_pub       : room "You are outside at the front of the pub. This area passes as a car park, which is currently deserted. There is a entrance to the east and a path to the south along the front of the pub. Across the car park and disappearing around the pub, the path continues out of sight to the northeast.\n Roughly from the north, through the west, to the south, the scenery is indistinct, as if covered in gauze, a fuzzy blur of dull colours, quite the contrast to the pub. There is the gentle smell of electricity in the air."  header="Front Of Pub / Car Park";

   patio              : room "You are in the outside seating area. Picnic TABLES are scattered around on the patio. A small fence runs along the south and east sides, which then gives way to a view of the surrounding area.\nTo the west is back into the PUB through a low DOOR. The BUILDING here is covered in pebble dash which is painted a nice shade of white.\nYou can see more tables up a small incline to the north.\nPLANT POTS are placed in various places which gives the place a bit of extra colour."  header="Patio";

   small_pathway      : room "You are on a small gravel pathway leading from the front of the pub to the seating area to the back and side of the pub.\nThere is a white washed building to the south, a sort of extension of the main building.\nIt has a small, rectangular window visible just out of reach."  header="Small Pathway";

   the_bar            : room "The main bar; a square wrap around frontage made of dark wood. There are various beers on pump and a till to the side. An bartop opening is visible next to the glass collection point which allows access for the staff to go behind the bar.\nThe spotlights in the ceiling illuminate the myriad of bottles and glasses of all kinds behind the bar.\nAbove the bar, attached to the frontage is a large, striking painting illuminated by spot lights from the ceiling. \nSouth leads across the floor to the games area and to the east is a seating area with tables and chairs. To the west there is a mottled glass door."  header="The Bar";

   toilet_cubicle     : room "You are, believe it or not, in a toilet cubicle. It's not the worst you've ever seen, nevertheless it doesn't smell of roses. There's only one bit of graffiti decorating the wall.\nA cubicle door is to the south, with a space underneath, as well as a space above. Not exactly private."  header="Toilet Cubicle";

   toilets            : room "You are in the hand BASIN area of the pub's toilets.\nAnd it isn't much cleaner than the cubicle.\nStunned, you see there are three people here, the blond haired woman from the bar earlier and the vagrant, both looking hot tempered and emotional. And the priest from the desert, leaning next to the main door to the south.\nTODO DYNAMIC. Is this some screw with your head reality tv show or what? you think to yourself. TODO EXAMs WALLS FLOOR"  header="Toilets";

   car_park           : room "'You shouldn't be here'"  header="Car Park";

   mirror_room        : room "You are in a small square room, all sides including the FLOOR and CEILING are matt black, with an odd, slightly glistening gloss to them.\n Curiously, you can see a SCREEN of some sort showing a representation of the alcove you were sitting in earlier.\n"  header="Mirror Room";
   
# Fragments Part 2 Locations

   skytrain_station_mid   : room "You find yourself on a dusty, concrete PLATFORM a bit worse for wear.\nThe platform is quite short and is parallel to a single MONORAIL TRACK which goes into the distance. The track gleams in the bright light some ways to the north and to the south.\nSunlight also bleeds onto the station platform, alleviating the gloom, through an elevated ARCHWAY accessible by stone steps leading up."  header="Skytrain Station (Mid)";
   bridge_of_time         : room ""  header="Bridge Of Time";
   caged_rope_bridge      : room "You are on a rope bridge. Sturdy planks hold your shifting weight, revealing the odd creak as you move. It swings slightly.\nThe ropes are attached to three main vertical posts along its length, which in turn circle over to create a cage effect of rope.\nDown below, into a deep gorge, and to all sides you can see dense brown and green undergrowth, gently swaying in the wind, all the way to gently sloping hillocks."  header="Caged Rope Bridge";
   cave_walkway           : room ""  header="Cave Walkway";
   chemist                : room ""  header="Chemist";
   circular_area          : room ""  header="Circular Area";
   collapsed_mine         : room ""  header="Collapsed Mine";
   corridor_4_e           : room ""  header="Grand Corridor";
   corridor_4_w           : room ""  header="Grand Corridor";
   corridor_5_e           : room ""  header="Incomplete Corridor";
   corridor_5_w           : room ""  header="Shimmering Corridor";
   corridor_7_e           : room ""  header="Dark";
   corridor_7_w           : room ""  header="Dark";
   corridor_8_e           : room ""  header="Scenic Corridor";
   corridor_8_w           : room ""  header="Vibrant Corridor";
   descideas              : room ""  header="NOTUSED";
   dry_forest_1           : room ""  header="Dry Forest";
   dry_forest_2           : room ""  header="Dry Forest";
   dry_forest_3           : room ""  header="Dry Forest";
   dry_forest_4           : room ""  header="Dry Forest";
   dry_swimming_pool      : room ""  header="Dry Swimming Pool";
   dusty_path_1           : room "You are on a dusty path."  header="Dusty Path";
   dusty_path_2           : room "You are on a dusty path."  header="Dusty Path";
   dusty_path_3           : room "You are on a dusty path."  header="Dusty Path";
   eighth_floor           : room ""  header="Eighth Floor";
   empty_room             : room ""  header="Empty Room";
   fifth_floor            : room ""  header="Fifth Floor";
   first_floor            : room ""  header="First Floor";
   flatcrown_clearing     : room ""  header="Flatcrown Clearing";
   flatcrown_forest_1     : room ""  header="Flatcrown Forest";
   flatcrown_forest_2     : room ""  header="Flatcrown Forest";
   flatcrown_forest_3     : room ""  header="Flatcrown Forest";
   flatcrown_forest_4     : room ""  header="Flatcrown Forest";
   fourth_floor           : room ""  header="Fourth Floor";
   gift_shop              : room ""  header="Gift Shop";
   hunters_hut            : room ""  header="Hunter's Hut";
   lake_border            : room ""  header="Lake Border";
   lake_maintenance       : room ""  header="Lake Maintenance";
   large_wooden_doors     : room ""  header="Large Wooden Doors";
   lift_one               : room ""  header="Lift One";
   lift_three             : room ""  header="Lift Three";
   lift_two               : room ""  header="Lift Two";
   long_walled_path       : room "You are on a long east/west path with high rock walls on either side.\nIn the north wall is a small WOODEN GATE, through which you can see the inside of the maze. TODO"  header="Long Walled Path";
   lost_forest_1          : room ""  header="Lost Forest";
   lost_forest_2          : room ""  header="Lost Forest";
   lost_forest_3          : room ""  header="Lost Forest";
   lost_forest_4          : room ""  header="Lost Forest";
   lost_forest_5          : room ""  header="Lost Forest";
   lost_forest_6          : room ""  header="Lost Forest";
   lost_forest_7          : room ""  header="Lost Forest";
   lost_forest_8          : room ""  header="Lost Forest";
   lost_forest_9          : room ""  header="Lost Forest";
   lost_forest_10         : room ""  header="Lost Forest";
   lost_forest_11         : room ""  header="Lost Forest";
   love_chair             : room ""  header="Love Chair";
   low_mine               : room ""  header="Low Mine";
   lower_path             : room ""  header="Lower Path";
   manicured_grass        : room ""  header="Manicured Grass";
   maze_1                 : room ""  header="Maze";
   maze_2                 : room ""  header="Maze";
   maze_3                 : room ""  header="Maze";
   maze_4                 : room "Another junction. Shining stone walls, sunlight glinting off, blur your vision periodically. Exits to the west, east, southwest and south.\nA metal fire holder shaped like a glowing sun is on the west part of the path."  header="Maze";
   maze_5                 : room "In a large, stone walled maze. Exits leads to the west, east and south.\nThere are two metal fire holders attached to the north wall."  header="Maze";
   maze_6                 : room ""  header="Maze";
   maze_7                 : room ""  header="Maze";
   maze_8                 : room ""  header="Maze";
   maze_9                 : room ""  header="Maze";
   maze_10                : room "High rocks all around. The path leads north and south, with a smaller path to the west.\nA sun shaped metal fire holder is balanced on a natural rock ledge on the south side."  header="Maze";
   maze_11                : room "A curve in the rock walled corridor bends from the north to the east.\nThere is small TODO BUSH growing against the west wall."  header="Maze";
   maze_12                : room "High above the walls to the east, you can see some sort of structure. Only the roof is visible from this angle with the sun glare partially in your eyes. The path leads west to east."  header="Maze";
   maze_13                : room "You are on a dusty path. Bright sunshine giving the high rock walls a crispness of detail, the dusty floor well trodden.\nThe only way out is to the west, back the way you came. It's a dead-end. There is a rusty HOLE in the east wall - it looks like it held something metal at one time."  header="Maze";
   maze_14                : room "This is another dead-end. Rock walls block your way except back to the south.\nThere is a metal fire holder in the north wall."  header="Maze";
   maze_15                : room ""  header="Maze";
   maze_16                : room "A junction in the maze gives you the choice of heading north, south or east.\nA metal fire holder stands next to the south wall."  header="Maze";
   maze_17                : room ""  header="Maze";
   maze_18                : room ""  header="Maze";
   maze_19                : room "You are in a dusty maze, high rock walls all around, except for a path to the west and a path to the south.\nThere is a delapidated metal fire holder attached to the north wall."  header="Maze";
   maze_20                : room "You are navigating a maze of dusty, rock walled, paths. You are at an intersection.\nThere is a small metal fire holder in the west corner."  header="Maze";
   maze_21                : room "You are in an east west passage, the blue sky above. Rocks on either side taunting you.\nNear the west entryway is a metal fire holder, corroded and in pieces. "  header="Maze";
   maze_22                : room "The walled path leads to the north and to the east.\nA heavy metal fire holder is leaning on its side in the southwest corner."  header="Maze";
   maze_23                : room ""  header="Maze";
   maze_24                : room ""  header="Maze";
   maze_25                : room "You are in a maze of impressive rock walls, haphazardly put together yet unclimable and solid. Monotonous powdery paths lead to the north, west and east.\nThere is an ornate metal fire holder on the floor at the west entrance."  header="Maze";
   maze_26                : room "Sunshine beating down. Bright stone walls reflecting light. Powdery path underfoot, dust clouds in your wake. Exits lead to the north and west.\nA metal fire holder, shaped like a glowing sun, is attached to the south wall."  header="Maze";
   maze_27                : room ""  header="Maze";
   maze_28                : room ""  header="Maze";
   maze_29                : room ""  header="Maze";
   maze_30                : room ""  header="Maze";
   maze_approach          : room "You are at an entrance to a maze constructed from orange bedrock. An opening in a high wall denotes the entrance to the east.\nTo the north a dusty path continues on. TODO READ SIGN"  header="Maze Approach";
   maze_easy_entrance     : room "This is the easy entrance to the bedrock maze. Your choices here are to go north for other options to enter the maze, or east to use this entrance.\nIt seems TODO to indicate that this is a lot easier and a more direct route to the exit of the maze."  header="Maze / Easy Entrance";
   maze_exit              : room "You are at the maze exit. To the east is out of the maze, with options of going southwest and north back into the maze construction."  header="Maze / Exit";
   maze_middle_entrance   : room "This is the middle entrance to the bedrock maze. Your choices here are to go south and north to other options to enter the maze, or east to use this entrance."  header="Maze / Middle Entrance";
   maze_north_entrance    : room "This is the north entrance to the bedrock maze. Your choices here are to go south for other options to enter the maze, or east to use this entrance."  header="Maze / North Entrance";
   maze_south_entrance    : room "This is the south entrance to the bedrock maze. Your choices here are to go north or south to other options to enter the maze, or east to use this entrance."  header="Maze / South Entrance";
   mine_entrance          : room ""  header="Mine Entrance";
   monkey_fountain        : room ""  header="Monkey Fountain";
   ninth_floor            : room ""  header="Ninth Floor";
   objectlist_notused     : room ""  header="OBJECTLIST NOTUSED";
   outside_elevators      : room ""  header="Outside Elevators";
   palace_entrance        : room ""  header="Palace Entrance";
   palace_pool            : room ""  header="Palace Pool";
   palace_reception       : room ""  header="Palace Reception";
   palace_security        : room ""  header="Palace Security";
   parapet_e              : room ""  header="Parapet";
   parapet_w              : room ""  header="Parapet";
   pinnacle_tower         : room ""  header="Pinnacle Tower";
   pool_lounging_area     : room ""  header="Pool Lounging Area";
   quadrangle             : room ""  header="Quadrangle";
   roman_auditorium_n     : room ""  header="Roman Auditorium";
   roman_auditorium_s     : room ""  header="Roman Auditorium";
   roman_swimming_pool    : room ""  header="Roman Swimming Pool";
   room_437               : room ""  header="Room 437";
   rotting_vehicle        : room ""  header="Rotting Vehicle";
   rutted_track           : room "You are on dry rutted TRACK, eroded over time by vehicles and people unknown. AS WELL AS VARIOUS ANIMALS TODO EXAM TRACK. It leads down through a simple stone ARCHWAY to the west. Away to the northeast you glimpse the start of a rope bridge.\nThe sun is gloriously shining, in the clear blue sky, an orange circle of radiant life.\nAll about are dry GORSE BUSHES and the odd giant REED or two, miraculously surviving in the scorched SOIL."  header="Rutted Track";
   savannah               : room ""  header="Savannah";
   savannah_edge          : room ""  header="Savannah Edge";
   second_floor           : room ""  header="Second Floor";
   seventh_floor          : room ""  header="Seventh Floor";
   sixth_floor            : room ""  header="Sixth Floor";
   skytrain_station_lower : room ""  header="Skytrain Station (Lower)";
   skytrain_station_upper : room ""  header="Skytrain Station (Upper)";
   sloping_grass          : room ""  header="Sloping Grass";
   small_island           : room ""  header="Small Island";
   small_lake             : room ""  header="Small Lake";
   sofa_area              : room ""  header="Sofa Area";
   spider_web_bridge      : room ""  header="Spider Web Bridge";
   steep_stream_steps     : room ""  header="Steep Stream Steps";
   stepping_stones        : room ""  header="Stepping Stones";
   stone_sitting_area     : room ""  header="Stone Sitting Area";
   stone_walkway          : room ""  header="Stone Walkway";
   stream_path            : room ""  header="Stream Path";
   terrace                : room ""  header="Terrace";
   the_grand_room         : room ""  header="The Grand Room";
   third_floor            : room ""  header="Third Floor";
   under_bridge           : room ""  header="Under Bridge";
   viewing_area           : room ""  header="Viewing Area";
   visible_rips_e         : room ""  header="Visible Rips";
   visible_rips_w         : room ""  header="Nothing";
   winding_path           : room ""  header="Winding Path";
   winding_trees          : room ""  header="Winding Trees";
   wooded_path            : room ""  header="Wooded Path";
   wooden_viewing_area    : room "You are standing on a high, wooden viewing area, overlooking a beautiful vista of green. Tree tops spread out to the north, like a sea of green, matched at the horizon by the sea blue sky.\nJutting from the trees, to the north is a sprawling, many leveled building. Intricate towers overlook the natural forest beauty, as if sentries on duty. TODO TELESCOPE"  header="Wooden Viewing Area";
}

####################################################################
## Navigation Paths
####################################################################

navigation {
   from, direction, to = [
      in_car,                 leave_oneway, outside_car
      below_stone_building,   up_oneway,    inside_stone_building
      desert_e,               east_oneway,  outside_stone_building
      desert_e,               west_oneway,  outside_car
      desert_n,               south_oneway, outside_car
      desert_s,               north_oneway, outside_car
      inside_stone_building,  leave_oneway, outside_stone_building
      outside_car,            east_oneway,  desert_e
      outside_car,            enter_oneway, in_car
      outside_car,            north_oneway, desert_n
      outside_car,            south_oneway, desert_s
      outside_stone_building, enter_oneway, inside_stone_building
      outside_stone_building, west_oneway,  desert_e

      plush_alcove,       north_oneway,     short_corridor
      plush_alcove,       southwest_oneway, games_area
      plush_alcove,       west_oneway,      the_bar
      behind_bar,        south_oneway,        the_bar
      games_area,         north_oneway,     the_bar
      games_area,         northeast_oneway, plush_alcove
      games_area,         west_oneway,      pub_steps
      front_of_pub,       east_oneway,      the_bar
      front_of_pub,       south_oneway,     pub_steps
      small_pathway,      southwest_oneway, car_park
      patio,              north_oneway,     upper_seating_area
      patio,              northwest_oneway, the_bar
      pub_steps,          east_oneway,      games_area
      pub_steps,          north_oneway,     front_of_pub
      short_corridor,     north_oneway,     toilets
      short_corridor,     south_oneway,     plush_alcove
      small_pathway,      east_oneway,      upper_seating_area
      the_bar,            north_oneway,      behind_bar
      the_bar,            east_oneway,      plush_alcove
      the_bar,            south_oneway,     games_area
      the_bar,            southeast_oneway, patio
      the_bar,            west_oneway,      front_of_pub
      toilet_cubicle,     south_oneway,     toilets
      toilets,            north_oneway,     toilet_cubicle
      toilets,            south_oneway,     short_corridor
      upper_seating_area, south_oneway,     patio
      upper_seating_area, west_oneway,      small_pathway
      front_of_pub,       northeast_oneway, car_park
      car_park,           northeast_oneway, small_pathway
      car_park,           southwest_oneway, front_of_pub
      up_a_large_tree,    down_oneway,      upper_seating_area

# Fragements 2 Navigation
      skytrain_station_mid,   up_oneway,        rutted_track
      bridge_of_time,         east_oneway,      monkey_fountain
      bridge_of_time,         west_oneway,      sloping_grass
      caged_rope_bridge,      east_oneway,      maze_approach
      caged_rope_bridge,      southwest_oneway, rutted_track
      cave_walkway,           east_oneway,      stone_sitting_area
      cave_walkway,           south_oneway,     the_grand_room
      chemist,                northwest_oneway, quadrangle
      circular_area,          up_oneway,        viewing_area
      circular_area,          west_oneway,      maze_exit
      collapsed_mine,         southwest_oneway, low_mine
      corridor_4_e,           east_oneway,      room_437
      corridor_4_e,           west_oneway,      fourth_floor
      corridor_4_w,           east_oneway,      fourth_floor
      corridor_5_e,           northeast_oneway, visible_rips_e
      corridor_5_e,           west_oneway,      fifth_floor
      corridor_5_w,           east_oneway,      fifth_floor
      corridor_5_w,           northwest_oneway, visible_rips_w
      corridor_7_e,           west_oneway,      seventh_floor
      corridor_7_w,           east_oneway,      seventh_floor
      corridor_8_e,           east_oneway,      parapet_e
      corridor_8_e,           west_oneway,      eighth_floor
      corridor_8_w,           east_oneway,      eighth_floor
      dry_forest_1,           east_oneway,      dry_forest_2
      dry_forest_1,           south_oneway,     dry_forest_3
      dry_forest_1,           southeast_oneway, dry_forest_4
      dry_forest_2,           northeast_oneway, savannah_edge
      dry_forest_2,           south_oneway,     dry_forest_4
      dry_forest_2,           west_oneway,      dry_forest_1
      dry_forest_3,           east_oneway,      dry_forest_4
      dry_forest_3,           north_oneway,     dry_forest_1
      dry_forest_4,           north_oneway,     dry_forest_2
      dry_forest_4,           northwest_oneway, dry_forest_1
      dry_forest_4,           south_oneway,     dry_swimming_pool
      dry_forest_4,           west_oneway,      dry_forest_3
      dry_swimming_pool,      north_oneway,     dry_forest_4
      dry_swimming_pool,      south_oneway,     palace_pool
      dusty_path_1,           down_oneway,      maze_approach
      dusty_path_1,           north_oneway,     dusty_path_2
      dusty_path_2,           south_oneway,     dusty_path_1
      dusty_path_2,           up_oneway,        dusty_path_3
      dusty_path_3,           down_oneway,      dusty_path_2
      dusty_path_3,           north_oneway,     wooden_viewing_area
      eighth_floor,           east_oneway,      corridor_8_e
      eighth_floor,           west_oneway,      corridor_8_w
      empty_room,             north_oneway,     ninth_floor
      empty_room,             up_oneway,        pinnacle_tower
      fifth_floor,            east_oneway,      corridor_5_e
      fifth_floor,            west_oneway,      corridor_5_w
      flatcrown_clearing,     east_oneway,      flatcrown_forest_4
      flatcrown_clearing,     north_oneway,     flatcrown_forest_3
      flatcrown_clearing,     south_oneway,     flatcrown_forest_1
      flatcrown_clearing,     west_oneway,      flatcrown_forest_2
      flatcrown_forest_1,     north_oneway,     flatcrown_clearing
      flatcrown_forest_1,     northeast_oneway, flatcrown_forest_4
      flatcrown_forest_1,     northwest_oneway, flatcrown_forest_2
      flatcrown_forest_1,     south_oneway,     stepping_stones
      flatcrown_forest_2,     east_oneway,      flatcrown_clearing
      flatcrown_forest_2,     northeast_oneway, flatcrown_forest_3
      flatcrown_forest_2,     southeast_oneway, flatcrown_forest_1
      flatcrown_forest_3,     south_oneway,     flatcrown_clearing
      flatcrown_forest_3,     southeast_oneway, flatcrown_forest_4
      flatcrown_forest_3,     southwest_oneway, flatcrown_forest_2
      flatcrown_forest_4,     northwest_oneway, flatcrown_forest_3
      flatcrown_forest_4,     southwest_oneway, flatcrown_forest_1
      flatcrown_forest_4,     west_oneway,      flatcrown_clearing
      fourth_floor,           east_oneway,      corridor_4_e
      fourth_floor,           west_oneway,      corridor_4_w
      gift_shop,              north_oneway,     quadrangle
      hunters_hut,            south_oneway,     savannah
      lake_border,            south_oneway,     small_island
      lake_border,            west_oneway,      large_wooden_doors
      lake_maintenance,       leave_oneway,     small_lake
      large_wooden_doors,     east_oneway,      lake_border
      large_wooden_doors,     northwest_oneway, monkey_fountain
      large_wooden_doors,     southwest_oneway, wooded_path
      long_walled_path,       east_oneway,      maze_exit
      long_walled_path,       west_oneway,      maze_easy_entrance
      lost_forest_1,          south_oneway,     lost_forest_4
      lost_forest_2,          east_oneway,      spider_web_bridge
      lost_forest_2,          south_oneway,     lost_forest_6
      lost_forest_3,          south_oneway,     steep_stream_steps
      lost_forest_3,          west_oneway,      spider_web_bridge
      lost_forest_3,          north_oneway,     maze_approach
      lost_forest_4,          east_oneway,      lost_forest_5
      lost_forest_4,          north_oneway,     lost_forest_1
      lost_forest_4,          south_oneway,     lost_forest_7
      lost_forest_4,          west_oneway,      rotting_vehicle
      lost_forest_5,          north_oneway,     mine_entrance
      lost_forest_5,          northeast_oneway, roman_auditorium_s
      lost_forest_5,          west_oneway,      lost_forest_4
      lost_forest_6,          north_oneway,     lost_forest_2
      lost_forest_6,          south_oneway,     lost_forest_10
      lost_forest_6,          southeast_oneway, lost_forest_11
      lost_forest_6,          southwest_oneway, lost_forest_9
      lost_forest_7,          east_oneway,      lost_forest_8
      lost_forest_7,          north_oneway,     lost_forest_4
      lost_forest_8,          east_oneway,      lost_forest_9
      lost_forest_8,          west_oneway,      lost_forest_7
      lost_forest_9,          northeast_oneway, lost_forest_6
      lost_forest_9,          west_oneway,      lost_forest_8
      lost_forest_10,         north_oneway,     lost_forest_6
      lost_forest_11,         north_oneway,     steep_stream_steps
      lost_forest_11,         northwest_oneway, lost_forest_6
      love_chair,             west_oneway,      stream_path
      low_mine,               northeast_oneway, collapsed_mine
      low_mine,               south_oneway,     mine_entrance
      lower_path,             northeast_oneway, quadrangle
      lower_path,             northwest_oneway, winding_path
      lower_path,             southwest_oneway, wooden_viewing_area
      manicured_grass,        southeast_oneway, sloping_grass
      manicured_grass,        west_oneway,      pool_lounging_area
      maze_1,                 east_oneway,      maze_2
      maze_1,                 south_oneway,     maze_7
      maze_2,                 south_oneway,     maze_8
      maze_2,                 west_oneway,      maze_1
      maze_3,                 east_oneway,      maze_4
      maze_4,                 east_oneway,      maze_5
      maze_4,                 south_oneway,     maze_10
      maze_4,                 southwest_oneway, maze_9
      maze_4,                 west_oneway,      maze_3
      maze_5,                 east_oneway,      maze_6
      maze_5,                 south_oneway,     maze_11
      maze_5,                 west_oneway,      maze_4
      maze_6,                 west_oneway,      maze_5
      maze_7,                 north_oneway,     maze_1
      maze_8,                 north_oneway,     maze_2
      maze_8,                 southeast_oneway, maze_15
      maze_9,                 east_oneway,      maze_10
      maze_9,                 northeast_oneway, maze_4
      maze_10,                north_oneway,     maze_4
      maze_10,                south_oneway,     maze_16
      maze_10,                west_oneway,      maze_9
      maze_11,                east_oneway,      maze_12
      maze_11,                north_oneway,     maze_5
      maze_12,                east_oneway,      maze_exit
      maze_12,                west_oneway,      maze_11
      maze_13,                west_oneway,      maze_north_entrance
      maze_14,                south_oneway,     maze_20
      maze_15,                northwest_oneway, maze_8
      maze_15,                southwest_oneway, maze_20
      maze_16,                east_oneway,      maze_17
      maze_16,                north_oneway,     maze_10
      maze_16,                south_oneway,     maze_22
      maze_17,                south_oneway,     maze_23
      maze_17,                southeast_oneway, maze_24
      maze_17,                west_oneway,      maze_16
      maze_18,                south_oneway,     maze_24
      maze_19,                south_oneway,     maze_25
      maze_19,                west_oneway,      maze_middle_entrance
      maze_20,                east_oneway,      maze_21
      maze_20,                north_oneway,     maze_14
      maze_20,                northeast_oneway, maze_15
      maze_20,                south_oneway,     maze_26
      maze_20,                southeast_oneway, maze_27
      maze_21,                east_oneway,      maze_22
      maze_21,                west_oneway,      maze_20
      maze_22,                north_oneway,     maze_16
      maze_22,                west_oneway,      maze_21
      maze_23,                north_oneway,     maze_17
      maze_23,                southeast_oneway, maze_30
      maze_24,                north_oneway,     maze_18
      maze_24,                northwest_oneway, maze_17
      maze_24,                south_oneway,     maze_30
      maze_25,                east_oneway,      maze_26
      maze_25,                north_oneway,     maze_19
      maze_25,                west_oneway,      maze_south_entrance
      maze_26,                north_oneway,     maze_20
      maze_26,                west_oneway,      maze_25
      maze_27,                east_oneway,      maze_28
      maze_27,                northwest_oneway, maze_20
      maze_28,                west_oneway,      maze_27
      maze_29,                east_oneway,      maze_30
      maze_30,                north_oneway,     maze_24
      maze_30,                northwest_oneway, maze_23
      maze_30,                west_oneway,      maze_29
      maze_approach,          east_oneway,      maze_middle_entrance
      maze_approach,          south_oneway,     lost_forest_3
      maze_approach,          up_oneway,        dusty_path_1
      maze_approach,          west_oneway,      caged_rope_bridge
      maze_easy_entrance,     east_oneway,      long_walled_path
      maze_easy_entrance,     north_oneway,     maze_south_entrance
      maze_exit,              east_oneway,      circular_area
      maze_exit,              north_oneway,     maze_12
      maze_exit,              southwest_oneway, long_walled_path
      maze_middle_entrance,   east_oneway,      maze_19
      maze_middle_entrance,   north_oneway,     maze_north_entrance
      maze_middle_entrance,   south_oneway,     maze_south_entrance
      maze_middle_entrance,   west_oneway,      maze_approach
      maze_north_entrance,    east_oneway,      maze_13
      maze_north_entrance,    south_oneway,     maze_middle_entrance
      maze_south_entrance,    east_oneway,      maze_25
      maze_south_entrance,    north_oneway,     maze_middle_entrance
      maze_south_entrance,    south_oneway,     maze_easy_entrance
      mine_entrance,          north_oneway,     low_mine
      mine_entrance,          south_oneway,     lost_forest_5
      monkey_fountain,        southeast_oneway, large_wooden_doors
      monkey_fountain,        west_oneway,      bridge_of_time
      ninth_floor,            south_oneway,     empty_room
      outside_elevators,      south_oneway,     palace_reception
      palace_entrance,        east_oneway,      palace_reception
      palace_entrance,        north_oneway,     winding_trees
      palace_entrance,        northwest_oneway, small_lake
      palace_entrance,        south_oneway,     winding_path
      palace_pool,            north_oneway,     dry_swimming_pool
      palace_pool,            south_oneway,     pool_lounging_area
      palace_pool,            west_oneway,      stone_walkway
      palace_reception,       down_oneway,      the_grand_room
      palace_reception,       north_oneway,     outside_elevators
      palace_reception,       south_oneway,     palace_security
      palace_reception,       west_oneway,      palace_entrance
      palace_security,        north_oneway,     palace_reception
      parapet_e,              west_oneway,      corridor_8_e
      parapet_w,              east_oneway,      parapet_w
      pinnacle_tower,         down_oneway,      empty_room
      pool_lounging_area,     east_oneway,      manicured_grass
      pool_lounging_area,     north_oneway,     palace_pool
      quadrangle,             north_oneway,     the_grand_room
      quadrangle,             south_oneway,     gift_shop
      quadrangle,             southeast_oneway, chemist
      quadrangle,             southwest_oneway, lower_path
      roman_auditorium_n,     down_oneway,      roman_auditorium_s
      roman_auditorium_s,     southwest_oneway, lost_forest_5
      roman_auditorium_s,     up_oneway,        roman_auditorium_n
      roman_swimming_pool,    west_oneway,      steep_stream_steps
      room_437,               west_oneway,      corridor_4_e
      rotting_vehicle,        east_oneway,      lost_forest_4
      rotting_vehicle,        west_oneway,      skytrain_station_lower
      rutted_track,           down_oneway,      skytrain_station_mid
      rutted_track,           northeast_oneway, caged_rope_bridge
      savannah,               north_oneway,     hunters_hut
      savannah,               west_oneway,      savannah_edge
      savannah_edge,          east_oneway,      savannah
      savannah_edge,          southwest_oneway, dry_forest_2
      seventh_floor,          east_oneway,      corridor_7_e
      seventh_floor,          west_oneway,      corridor_7_w
      skytrain_station_lower, east_oneway,      rotting_vehicle
      skytrain_station_upper, northeast_oneway, small_lake
      sloping_grass,          east_oneway,      bridge_of_time
      sloping_grass,          northwest_oneway, manicured_grass
      small_island,           north_oneway,     lake_border
      small_lake,             east_oneway,      palace_entrance
      small_lake,             enter_oneway,     lake_maintenance
      small_lake,             north_oneway,     stepping_stones
      small_lake,             southwest_oneway, skytrain_station_upper
      sofa_area,              northwest_oneway, the_grand_room
      spider_web_bridge,      down_oneway,      under_bridge
      spider_web_bridge,      east_oneway,      lost_forest_3
      spider_web_bridge,      west_oneway,      lost_forest_2
      steep_stream_steps,     east_oneway,      roman_swimming_pool
      steep_stream_steps,     north_oneway,     lost_forest_3
      steep_stream_steps,     south_oneway,     lost_forest_11
      stepping_stones,        north_oneway,     flatcrown_forest_1
      stepping_stones,        south_oneway,     small_lake
      stone_sitting_area,     east_oneway,      stone_walkway
      stone_sitting_area,     west_oneway,      cave_walkway
      stone_walkway,          east_oneway,      palace_pool
      stone_walkway,          west_oneway,      stone_sitting_area
      stream_path,            east_oneway,      love_chair
      stream_path,            southwest_oneway, winding_trees
      terrace,                west_oneway,      the_grand_room
      the_grand_room,         east_oneway,      terrace
      the_grand_room,         north_oneway,     cave_walkway
      the_grand_room,         south_oneway,     quadrangle
      the_grand_room,         southeast_oneway, sofa_area
      the_grand_room,         up_oneway,        palace_reception
      under_bridge,           up_oneway,        spider_web_bridge
      viewing_area,           down_oneway,      circular_area
      visible_rips_e,         southwest_oneway, corridor_5_e
      visible_rips_w,         southeast_oneway, corridor_5_w
      winding_path,           north_oneway,     palace_entrance
      winding_path,           southeast_oneway, lower_path
      winding_trees,          northeast_oneway, stream_path
      winding_trees,          south_oneway,     palace_entrance
      wooded_path,            northeast_oneway, large_wooden_doors
      wooden_viewing_area,    northeast_oneway, lower_path
      wooden_viewing_area,    south_oneway,     dusty_path_3

   ]
}
####################################################################
## Vocabulary - aliases
####################################################################

vocabulary {

      : noun {
         aliases = [post, attachedpost,railing,pole]
      }
       : noun {
         aliases = [ledge, sill]
      }
       : noun {
         aliases = [brickwall ,wall]
      }
       : noun {
         aliases = [documents ,docs,doc]
      }
       : noun {
         aliases = [motorcycle ,cycle,bike]
      }
       : noun {
         aliases = [dartboard ,board]
      }
       : noun {
         aliases = [monocle ,eyepiece]
      }
       : noun {
         aliases = [foldedbeermat ,beermat,mat]
      }
       : noun {
         aliases = [beermat ,mat]
      }
       : noun {
         aliases = [biker ,girl]
      }
       : noun {
         aliases = [woman ,blond,blonde,lady]
      }
       : noun {
         aliases = [painting ,picture]
      }
       : noun {
         aliases = [remote ,remotecontrol,control]
      }
       : noun {
         aliases = [barman ,barkeep,bartender,man]
      }
       : noun {
         aliases = [vagrant ,homeless,derelict]
      }
       : noun {
         aliases = [television ,tv,monitor,screen,tele]
      }
       : noun {
         aliases = [fireplace ,fire]
      }
       : noun {
         aliases = [wallpaper ,walls,wall]
      }
       : noun {
         aliases = [wallclock ,clock,timepiece]
      }
       : noun {
         aliases = [newspaper ,paper,news]
      }
       : noun {
         aliases = [foldednewspaper ,newspaper,paper,news]
      }
       : noun {
         aliases = [dashboard ,dash]
      }      
       : noun {
         aliases = [tyre ,tire,wheel,rubber,tires,tyres]
      }
       : noun {
         aliases = [photo ,photograph,polaroid,snapshot,picture]
      }
       : noun {
         aliases = [invitation ,invite]
      }
       : noun {
         aliases = [key ,keys]
      }
       : noun {
         aliases = [wheel ,column]
      }
       : noun {
         aliases = [tape ,cassette,player]
      }
       : noun {
         aliases = [window ,windows]
      }
       : noun {
         aliases = [storm ,weather,sand,grit,wind,desert]
      }
       : noun {
         aliases = [glasses ,shades,sunshades,sunglasses]
      }
       : noun {
         aliases = [phone ,mobile,litphone]
      }
       : noun {
         aliases = [litphone ,mobile,phone]
      }
       : noun {
         aliases = [cap ,hat]
      }
       : noun {
         aliases = [glovebox ,glovecompartment,glove,compartment]
      }
       : noun {
         aliases = [rubbish ,cups,wrappers,detrious,grime]
      }
       : noun {
         aliases = [car ,interior/*,inside*/]
      }
       : noun {
         aliases = [road ,tarmac,highway]
      }
       : noun {
         aliases = [verge ,rocks,edge]
      }
       : noun {
         aliases = [sign ,signpost,post]
      }
       : noun {
         aliases = [piecesofpaper ,paper,pieces]
      }
       : noun {
         aliases = [seat ,chair,pew]
      }
       : noun {
         aliases = [seats ,chairs]
      }
       : noun {
         aliases = [pintglass ,glass,pint,mug]
      }
       : noun {
         aliases = [duffelbag ,duffel,bag]
      }
       : noun {
         aliases = [sickbowl ,sick,plastic,bowl,filledbowl]
      }
       : noun {
         aliases = [filledbowl ,sick,plastic,bowl]
      }
       : noun {
         aliases = [tap ,faucet,handle,pipe]
      }
       : noun {
         aliases = [soil ,floor, ground]
      }
       : noun {
         aliases = [sharpwood ,wood,plank,stick,sword]
      }
       : noun {
         aliases = [remains ,body, human]
      }
       : noun {
         aliases = [wall ,walls]
      }
       : noun {
         aliases = [rock ,stone]
      }
       : noun {
         aliases = [band ,bands]
      }
       : noun {
         aliases = [dogtag ,tag]
      }
       : noun {
         aliases = [whisky ,whiskey, bottle]
      }
       : noun {
         aliases = [barbeque ,bbq, barby, barbie, barb]
      }
       : noun {
         aliases = [mantelpiece ,mantel]
      }
       : noun {
         aliases = [amber ,one,1]
      }
       : noun {
         aliases = [sandstone ,two,2]
      }
       : noun {
         aliases = [opal ,three,3]
      }
       : noun {
         aliases = [limestone ,four,4]
      }
       : noun {
         aliases = [note ,card]
      }
       : noun {
         aliases = [cubbyhole ,cubby,hole]
      }
      : noun {
         aliases = [view,surroundings,landscape]
      }
      : noun {
         aliases = [plantpot ,plant,pot]
      }
      : noun {
         aliases = [branches ,branch]
      }
      : noun {
         aliases = [litfairylights ,fairylights,lights]
      }
      : noun {
         aliases = [fairylights ,lights]
      }
       : noun {
         aliases = [railing ,post]
      }
       : noun {
         aliases = [box ,puzzle]
      }

       : verb {
         aliases = [ring ,dial,call,phone]
      }
       : verb {
         aliases = [kill ,hit, punch, assault, kick, fight, attack, strike]
      }
       : verb {
         aliases = [move ,shove,slide]
      }
       : verb {
         aliases = [wet ,moisten, drip, dribble]
      }
       : verb {
         aliases = [smash ,break]
      }
       : verb {
         aliases = [tear ,rip,destory]
      }
       : verb {
         aliases = [untie ,unwind]
      }
       : verb {
         aliases = [xyzzy ,plugh,plover,cheat]
      }
       : verb {
         aliases = [score ,progress,points]
      }
       : verb {
         aliases = [push ,press,touch]
      }
       : verb {
         aliases = [smell ,sniff]
      }
   
}

####################################################################
## Objects
####################################################################

objects[] {

# Prologue Fragment Objects

   van
      : scenery
      "a van"
      conspicuous = "false"  ; 

   grave
      : scenery
      "a grave"
      conspicuous = "false"; 
      
   bible
      : object
      "a bible"
      drop_messages = "You no longer have the bible."
      pick_up_messages = "The bible is now in your possession.";

   priest
      : scenery
      "a priest"
      start_at = "desert_e"
      conspicuous = "false";

   biker   : scenery   "a biker girl" conspicuous = "false"; 
      
   invitation
      : object
      "an invitation"
      start_at = "inventory"
      drop_messages = "You drop the invitation in disgust."
      pick_up_messages = "You pick the invitation up.";
      
   photo
      : object
      "a photograph"
      start_at = "inventory"
      drop_messages = "You pause before dropping the photograph."
      pick_up_messages = "You take the photo of Laura.";
      
   piecesofpaper
      : object
      "some pieces of paper"
      drop_messages = "You watch the pieces of paper flutter out of your hand."
      pick_up_messages = "You eventually pick up all the pieces of the torn invitation.";
      
   glovebox
      : scenery
      "a glovebox"
      start_at = "in_car"
      conspicuous = "false";
      
   glasses
      : wearable
      "a pair of sun glasses"
      drop_messages = "You carefully put down the sun glasses, so as not to scratch the lenses."
      pick_up_messages = "You take the sun glasses.";
      
   phone
      : object "a mobile phone"
      drop_messages = "You carefully put down the phone, you wouldn't want to damage it."
      pick_up_messages = "The phone is now in your possession.";
 
   litphone
      : object "an illuminated mobile phone" drop_messages = "You carefully put the phone down, you wouldn't want to damage it." pick_up_messages = "You get the phone.";  
   cap
      : wearable
      "a baseball cap" drop_messages = "You drop the baseball cap." pick_up_messages = "You now have the baseball cap.";
   
   dashboard
      : scenery "dashboard" start_at = "in_car"  conspicuous ="false"; 
      
   openglovebox
      : scenery
      "open glovebox"
      conspicuous ="false";
      
   tyre
      : scenery
      "a tyre"
      start_at = "outside_car"
      conspicuous="false";

   sign
      : scenery   "a signpost";

   closedtrunk
      : scenery
      "a closed car trunk"
      start_at = "outside_car"
      conspicuous = "false";

   opentrunk
      : scenery
      "an open car trunk"
      conspicuous = "false";
   
   woundwire
      : scenery
      "wound wire"
      start_at = "outside_car"
      conspicuous = "false";
   
   duffelbag
      : object
      "a heavy duty duffelbag" drop_messages = "You swing the duffel bag off your shoulder onto the ground. It lands with a soft thud." pick_up_messages = "You pick up the heavy duffel bag and swing it over your shoulder.";

   door
      : scenery
      "a wonky door"
      start_at = "outside_stone_building"
      conspicuous = "false";
   
   rock
      : object
      "a red rock" drop_messages = "You drop the amazingly coloured rock. Thonk." pick_up_messages = "You take the rock. It fits well in your hand.";
   
   tap
      : scenery
      "a rusted tap"
      start_at = "inside_stone_building"
      conspicuous  = "false";
   
   water
      : scenery   "water"      conspicuous = "false";
      
   bowl
      : object
      "a plastic bowl" drop_messages = "You drop the plastic bowl and it bounces and spins to a stop." pick_up_messages = "You take the bowl.";
   
   filledbowl
      : object
      "a bowl full of water" drop_messages = "You place the bowl down carefully, so as to spill as little water as possible." pick_up_messages = "You carefully take the bowl, only a small drop splashes over the side.";
   
   sharpwood
      : object
      "a piece of sharp wood" drop_messages = "You drop the sharp bit of wood." pick_up_messages = "You take the sharp bit of wood.";
   
   barrel
      : scenery
      "a barrel"
      start_at = "inside_stone_building"
      conspicuous="false";
   
   opening
      : scenery
      "an opening in the ground";
   
   glass
      : object
      "a pint glass" drop_messages = "You carefully place the pint glass down." pick_up_messages = "You take the pint glass, holding it by its handle.";
   
   remains
      : scenery
      "human remains";
   
   wire
      : object
      "a piece of wire"
      drop_messages = "You drop the wire."
      pick_up_messages = "You take the wire.";

# First Fragment Objects

   television
      : scenery
      "a television"
      start_at = "the_bar"
      conspicuous="false";
 
    remote
      : object
      start_at = "behind_bar"
      "a remote control" drop_messages = "You drop the remote control." pick_up_messages = "You take the remote control.";  

   painting
      : scenery
      "a charming painting"
      start_at = "the_bar"
      conspicuous="false";

   newspaper
      : object
      "a rumpled newspaper"
      drop_messages = "You put down the newspaper." pick_up_messages = "You now have the newspaper.";

   foldednewspaper
      : object
      "a folded newspaper"
      drop_messages = "You put the folded newspaper down." pick_up_messages = "You now have the folded newspaper.";

   folder
      : object
      "a document folder"
      drop_messages = "You put down the folder." pick_up_messages = "You take the folder.";
  
    documents
      : object
      "some documents"
      drop_messages = "You drop the documents." pick_up_messages = "You pick up the documents."; 

    shape
      : scenery
      "a shape"
      conspicuous = "false";


    stool
      : object
      "a wooden stool"
      drop_messages = "You put down the wooden stool." pick_up_messages = "You take the wooden stool."; 
   
   wallclock
      : scenery
      "a wallclock"
   conspicuous = "false";

   table
      : scenery
      "a table"
      start_at = "plush_alcove"
   conspicuous = "false";

   wallpaper
      : scenery
      "wallpaper"
      start_at = "plush_alcove"
      conspicuous = "false";

   fireplace
      : scenery
      "a fireplace"
      start_at = "plush_alcove"
      conspicuous = "false";

   window
      : scenery
      "a window"
      start_at = "small_pathway"
      conspicuous = "false";

   woman   : scenery   "a blond woman" start_at = "plush_alcove" conspicuous = "false";


   barman   : scenery   "a barman" start_at = "the_bar" conspicuous = "false"; 

   mirror   : scenery   "an ornate mirror" start_at = "plush_alcove" conspicuous = "false";

   dogtag   : wearable   "a dogtag"

   drop_messages = "You drop the dogtag."
   pick_up_messages = "You get the dogtag.";
   
   whiskey   : object   "a bottle of whisky"       start_at = "behind_bar" drop_messages = "You place down the bottle of whisky carefully." pick_up_messages = "You get the bottle of whisky."; 

   beermat   : object   "a beermat" drop_messages = "You put the beermat down." pick_up_messages = "You take the beermat.";
   
   foldedbeermat   : object   "a folded beermat"        drop_messages = "You put the folded beermat down." pick_up_messages = "You take the folded beermat."; 

   cardboard   : object   "some torn cardboard"        drop_messages = "You drop the torn cardboard down." pick_up_messages = "You take the torn cardboard."; 

   barbeque
      : scenery
      "a barbeque"
      start_at = "upper_seating_area"
      conspicuous = "false";

   monocle   : wearable   "a monocle"   drop_messages = "You drop the monocle." pick_up_messages = "You pick up the monocle.";

   amberpanel
      : scenery
      "an amber panel"
      conspicuous = "false";

   opalpanel
      : scenery
      "an opal panel"
      conspicuous = "false";

   limestonepanel
      : scenery
      "a limestone panel"
      conspicuous = "false";

   sandstonepanel
      : scenery
      "a sandstone panel"
      conspicuous = "false";
      
   panel
      : scenery
      "a segmented panel"
      start_at = "short_corridor"
      conspicuous = "false";
      
   plaque
      : scenery
      "a slate plaque"
      conspicuous = "false";  

   vagrant
      : scenery
      "a simple vagrant"
      start_at = "pub_steps"
      conspicuous = "false"; 
     
   note
      : object
      "a typed note" drop_messages = "You drop the typed note." pick_up_messages = "You get the typed note.";

   cubbyhole
      : scenery
      "a cubby-hole"
      conspicuous = "false";
      
   plantpot
      : scenery
      "a plant pot"
   start_at = "patio";

   deadflower
      : object
      "a dead flower"
   start_at = "patio";

    livingflower
      : object
      "a living flower"
   start_at = "patio";
 #  conspicuous = "false";

   brickwall
      : scenery
      "a brick wall";

   metalfence
      : scenery
      "a metal fence"
   start_at = "patio"
   conspicuous = "false";

   railing
      : object
      "a fence railing"
      drop_messages = "You drop the railing with a clang."
      pick_up_messages = "You get the railing.";

   attachedrailing
      : scenery
      "a railing (attached to a branch)";
      
   tree
      : scenery
      "a large tree"
   start_at = "upper_seating_area"
   conspicuous = "false";

  fairylights
      : object      "some fairylights"
   start_at = "up_a_large_tree"
         drop_messages = "You drop the bunch of fairylights."
      pick_up_messages = "You take the bunch of fairylights.";

   socket
      : scenery
      "an electrical socket";

   pluggedinfairylights
      : scenery
      "some plugged in fairylights";

   litfairylights
      : object
      "some lit fairylights"
            drop_messages = "You drop the lit fairylights."
      pick_up_messages = "You take the lit fairylights.";

   puzzle
      : object
      "a Shengshu puzzle box"
      drop_messages = "You drop the puzzle box."
      pick_up_messages = "You take the puzzle box.";
 
    instructions
      : object
      "some instructions"
      drop_messages = "You drop the instructions."
      pick_up_messages = "You take the instructions.";

   button
      : scenery
      "a button"
   conspicuous = "true";
   
   console
      : scenery
      "a console"
   conspicuous = "true";
   
   screen
      : scenery
      "a screen"
      start_at = "mirror_room"
   conspicuous = "true";
}

####################################################################
#  Booleans - Variables
####################################################################

booleans[] {

   phone_answered : boolean "false";
   tap_hit        : boolean "false";
   tap_on         : boolean "false";
   player_dirty   : boolean "false";
   wet_floor      : boolean "false";
   priest_dead    : boolean "false";
   priest_confronts_msg : boolean "false";
   west_msg_displayed   : boolean "false";
   
   wood_exists       : boolean "false";
   visor_pulled      : boolean "false";
   glovebox_examined : boolean "false";

   tv_on             : boolean   "false";
   bbq_open          : boolean   "false";
   toilet_blocked    : boolean   "true";

   pendulum_on    : boolean   "true";

   on_stool          : boolean "false";
   beermat_stool     : boolean "false";
   newspaper_stool   : boolean "false";
   folded_beermat_stool     : boolean "false";
   folded_newspaper_stool   : boolean "false";
   is_drunk          : boolean "false";
   cubicle_open      : boolean "false";
   
   vagrant_talked    : boolean "false";
   
   amber_1_on        : boolean "false";
   sandstone_2_on    : boolean "false";
   opal_3_on         : boolean "false";
   limestone_4_on    : boolean "false";
   display_open      : boolean "false";
   
   tree_blocked      : boolean "true";
   lights_unwrapped_high   : boolean "false";
   lights_unwrapped_low    : boolean "false";
   
# Puzzle Box
   puzzle_spinned                : boolean "false";
   puzzle_shaken                 : boolean "false";
   puzzle_tapped                 : boolean "false";
   puzzle_front_slid_left        : boolean "false";
   puzzle_front_slid_right       : boolean "false";
   puzzle_front_slid_up          : boolean "false";
   puzzle_front_slid_down        : boolean "false";
   puzzle_back_slid_left         : boolean "false";
   puzzle_back_slid_right        : boolean "false";
   puzzle_back_slid_up           : boolean "false";
   puzzle_back_slid_down         : boolean "false";
   puzzle_top_slid_left          : boolean "false";
   puzzle_top_slid_right         : boolean "false";
   puzzle_top_slid_back          : boolean "false";
   puzzle_top_slid_forwards      : boolean "false";
   puzzle_bottom_slid_left       : boolean "false";
   puzzle_bottom_slid_right      : boolean "false";
   puzzle_bottom_slid_back       : boolean "false";
   puzzle_bottom_slid_forwards   : boolean "false";
   puzzle_left_slid_back         : boolean "false";
   puzzle_left_slid_forwards     : boolean "false";
   puzzle_left_slid_up           : boolean "false";
   puzzle_left_slid_down         : boolean "false";
   puzzle_right_slid_back        : boolean "false";
   puzzle_right_slid_forwards    : boolean "false";
   puzzle_right_slid_up          : boolean "false";
   puzzle_right_slid_down        : boolean "false";

# Disembodied Voice in Mirror Room stages
   voice_step1                   : boolean "false";
   voice_step2                   : boolean "false";
   voice_step3                   : boolean "false";
   voice_step4                   : boolean "false";
   voice_step5                   : boolean "false";
   voice_step6                   : boolean "false";
   voice_talked_full             : boolean "false";

# Landscape fully described in EXAM
   landscape_descriptions_full   : boolean "false";
# Three talked full in toilet
   toilets_talked_full           : boolean "false";

}

####################################################################
## Integers - Variables
####################################################################

integers[] {

# Total Player Score (score made up of all cool stuff they did)
   player_score      : integer "0";
# Solved Side Puzzles (not essential to complete game)
   solved_side       : integer "0";
# Solved Main Puzzles (essential to complete game)   
   solved_main       : integer "0";
   
   completed_fragments    : integer "0";
   
   talk_priest       : integer "6";
   talk_biker        : integer "7";
# Middle Aged Woman, turns present at table (Blonde haired woman from PL)
   woman_counter     : integer "2";
# Clock Set times
   clock_time_set    : integer "824";
# Number of turns player has taken (not working)
   number_turns      : integer "0";
# Stages of Puzzle Box progress
   puzzle_progress   : integer "0";
# Voice in mirror room
   mirror_voice      : integer "14";
# TODO REMEMBER VOICE
# TODO REMEMBER: summarise and make assumptions?
# TODO REMEMBER XXX

# Question Answers - TODO? Multiple choice answers?
   barman_q1_answer  : integer "0";

# Up A Tree - landscape descriptions
   landscape_desc : integer "20";
   
# Toilet Cubicle - Ambient / listen counter before they catch you
   cubicle_counter : integer "12";

# Toilets - NPC chatter
   toilets_counter : integer "12";
   
}

##################################################
#  Strings                                       #
##################################################

strings {
# Mirror_Room Location (for what is on screen)
# Alcove (Pub)
# Llandudno
# Lost Palace (?)
# Desert (In car driving through)
   mirror_room_loc : string "alcove";
# : set_string  var="mirror_room_loc" value="alcove";
# : set_string  var="mirror_room_loc" value="skytrainstationmid";
}

####################################################################
## Event Handlers
####################################################################


   ####################################################################
   ## User Input Pattern Matches
   ####################################################################

   on_command {

      ##############################################
      ## Exit the stalled car
      ##############################################

      //: match "exit _;out _;open door" {
      : match "exit _;open door" {
         : if (is_at "in_car" && is_worn "cap" && is_worn "glasses") {
            : print "You check the cap is pulled down over your face, that the sun glasses cover your eyes, gather your wits about you, flick the car door open and exit into the unknown.";
            : press_any_key;
            : goto "outside_car";
            : redescribe;
              }
         : else_if (is_at "in_car" && (!is_worn "cap" || !is_worn "glasses" )) { 
               : print "Go out in this weather without some sort of eye and face protection, really?";
               
               : done;
               }
         : else_if (is_at "inside_stone_building" && (!is_worn "cap" || !is_worn "glasses" )) { 
               : print "The sand is still kicking around outside, not a particularly good idea.";
               : done;
                }
         }
         
         : match "exit_" {
            : if (is_at "inside_stone_building"  && !(priest_dead) && !(priest_confronts_msg) && (player_dirty)) {
               : print "As you exit the building the priest, appears from the west and confronts you.\n He is a lot more interested in you now than before.\nHis eyes narrow. His fists clench, and his blood shot eyes at you with hatred.\nThis doesn't look good.";
               : set_true "priest_confronts_msg";
               : press_any_key;
               : goto "outside_stone_building";
               : redescribe;
               : done;
            }
         }
   
      ##############################################
      ## Check if protection removed in desert ZONE
      ##############################################
      
      : match "remove glasses;remove cap" {
         : if (is_at "zone_desert") {
            : print "That's not really a good idea right now, what with the flurry of grit and sand flying around. You'll need your eyes to look for a way to get out of here.";
              }
      }

      ###########################################
      ## Give noun to npc
      ###########################################
           
      : match "give _ to priest" {
         : if (is_present "priest" ) {
            : print "The priest shows disinterest in your offering.";
         : done;
         }
         : else {
         : print "Give what to whom?";
         : done;
         }
      }  
      : match "give _ to biker;give _ to woman" {
         : if (is_present "biker" || is_present "woman" ) {
            : print "She holds up her hand, palm forward and politely refuses.";
            : done;
         }
         : else {
            : print "Give what to whom?";
            : done;
         }
      } 


      ###########################################
      ## Examine noun
      ###########################################
     
      
         : match "exam dashboard;search dashboard" {

           : if (is_present "dashboard" ) {
               : print "The steering wheel is prominent, along with the starter keys sticking out of the steering wheel cover. A tape deck, with a chewed up tape  hangs out.\nThe clock has stopped for some reason. The glovebox is on the passenger side.\nOverall, the dash is grimy, has old wrappers and paper cups scattered over it.\nWhat do you expect, it's been a long drive.\nOh, and it shows absolutely no sign of life.";
               : done;
               }
            : else {
               : print "The dashboard isn't here, it was attached to the interior of your car if you remember rightly." ;
               : done;
            }
         }

         : match "exam glovebox;open glovebox;search glovebox" {
            : if (is_present "glovebox" ) {
               : print "You reach over and click the glovebox open. It contains the usual detrious, but you also find your mobile phone.";
               : create "phone";
               : create "openglovebox";
               : destroy "glovebox";
               : done;
            }
            : else_if (is_present "openglovebox" ) {
               : print "You have another look in the glovebox, but find nothing new.";
               : done;
               }
            : else {
               : print "The glovebox isn't here, it was attached to the interior of your car if you remember rightly." ;
                  : done;
               }      
            }

         : match "exam bowl" {
            : if (is_present "bowl" ) {
               : print "A plastic mixing bowl which you keep in the car for your nieces and nephews. Incase they are travel-sick.";
               : done;
            }
            : else_if (is_present "filledbowl" ) {
               : print "The plastic sick bowl is filled with water.";
               : done;
            }
         }
         : match "drink water" {
            : if (is_present "water" || is_carried "filledbowl") {
               : print "You cup your hands and drink a mouthful of water. It's so refreshing to your dry mouth.\nYou feel much better.";
               : done;
            }
            : else {
               : print "Maybe you will manage to find some water in this god foresaken place." ;
               : done;
            }
         }
         : match "exam water" {
            : if (is_present "water") {
               : print "It's a delicious sight for your sore eyes.";
               : done;
            }
            : else {
               : print "You can't see any water in this stifling place." ;
               : done;
            }
         }
         : match "fill bowl with water;fill bowl with tap" {
            : if (is_carried "bowl" && is_present "water" ) {
               : print "You carefully fill the sick bowl with water, although a lot of it shoots over the sides due to the force of the water.\nYou now have a bowl brimming with liquid beauty.";
               : create "filledbowl" target="inventory";
               : destroy "bowl";
               : done;
            }
            : else_if (is_carried "bowl" && !is_present "tap" ) {
               : print "Hopefully you will find some water in this god foresaken place.";
               : done;
            }
            : else_if (is_carried "bowl" && is_present "tap" && !is_present "water" ) {
               : print "Maybe. If you can get the tap running.";
               : done;
            }
            : else_if (is_carried "filledbowl" && is_present "tap" ) {
               : print "The bowl is full up and won't take any more water.";
               : done;
            }
         }

         : match "fill bowl" {
            : if (is_carried "filledbowl") {
               : print "The bowl is full with water, so won't take anything else.";
               : done;
            }
         }
            
         : match "exam tape" {
            : if (is_present "dashboard" ) {
               : print "It was your favourite road-trip mix-tape. Can you believe it. The sound it made when it got caught in the tape deck still gives you shivers. Anyway, shed a tear later, you have things to do.";
               : done;
            }
         }
         
         : match "exam wheel;exam steering;exam cover" {
            : if (is_present "dashboard" ) {
               : print "The steering wheel and column are a bit sweaty from all the miles you've gone today.";
               : done;
            }
         }
         : match "exam clock" {
            : if (is_present "dashboard" ) {
               : print "Weirdly, the clock is stuck on 8:24.";
               : done;
            }
         }
         
         : match "exam rubbish;search rubbish" {
            : if (is_present "dashboard" ) {
               : print "As described. Just rubbish.";
               : done;
            }
         } 
         : match "exam wrappers;search cups" {
            : if (is_present "dashboard" ) {
               : print "Nothing exciting or useful about the cups and wrappers. Pure biodegradable trash.";
               : done;
            }
         }   
         : match "exam seats;exam seat;search seat;search seats" {
            : if (is_present "dashboard"  && !is_exists "cap" ) {
               : print "Large, comfy black leather seats, ideal for long journeys. These have been used quite a lot and are starting to wear through. You stretch your hand underneath and find a baseball cap.";
               : create "cap";
               : done;
            }
            : else_if (is_present "dashboard"  && is_exists "cap"  ) {
               : print "The seats look the same before, and you find nothing else.";
               : done;
            }
         }
         : match "exam floor;search floor" {
            : if (is_present "dashboard"  && !is_exists "bowl" ) {
               : print "You reach down and move your hand around to see what you find on the floor. It is suprisingly clean, though you do manage to find a plastic bowl.";
               : create "bowl";
               : done;
            }
            : else_if (is_present "dashboard"  && is_exists "bowl"  ) {
               : print "You scrabble around on the floor in case you find something new.";
               : done;
            }
            : else_if (is_at "inside_stone_building"  ) {
               : print "The floor is made from pebbles and rocks held together by, probably, cement. Some small weeds have found their way in here. Nothing else of interest.";
               : done;
            }
            : else_if (is_at "below_stone_building" && !(player_dirty) ) {
               : print "Where the walls look like they've been excavated by heavy machinery, the floor has recently been moved and re-packed down by much smaller tools. ";
               : done;
            }
            : else_if (is_at "below_stone_building" && (player_dirty)) {
               : print "There is loose dirt piled up around the edges of the floor. Roughly in the centre of the cellar is an open grave.";
               : done;
            }
      }
         : match "wet floor;pour water on floor" {
            : if (is_at "below_stone_building" && (wet_floor)) {
               : print "It's already damp enough to dig into.";
               : done;
            }
            : else_if (is_at "below_stone_building" && !(wet_floor)  ) {
               : print "You drizzle the water from the bowl onto the soil floor. Once you've used it all up, the soil is well and truly damp.";
               : set_true "wet_floor";
               : destroy "filledbowl";
               : create "bowl" target = "inventory";
               : done;
            } 
         }   
         : match "dig floor with stick;dig soil with stick" {
            : if (is_carried "sharpwood"  && is_at "below_stone_building" && (wet_floor) && !is_present"remains") {
               : print "You gouge into the soil with the sharp end of the plank. With the help of the water to soften the soil, it allows you to remove layer after layer.\n";
               : print "You start to dig faster. Sweat drips into your eyes. Something is propelling you forward. Dig.\n";
               : press_any_key;
               : print "The softened soil gives way like butter. You throw to the left, to the right, to clear the way for the next stab at the ground.";
               : press_any_key;
               : print "You run your filthy hands across your forehead to wipe away the sweat and arch your back to release tension.\nYou continue digging, digging into the wet earth.";
               : press_any_key;
               : print "Finally, you notice something in the soil...";
                 : press_any_key;
               : print"You squeeze shut your eyes to clear your mind. Open them and squint, trying to see clearly. What is this?";
               : press_any_key;
               : clear_screen;
               : show_graphic "BodyBeerGlassLOTScropped";
               : print "There's human remains buried here. Revulsion and shock penetrate your body. You scrabble back against the far wall in disgust.";
               : create "remains";
               : create "grave";
               : set_true "player_dirty";
               : destroy "priest";
               : create "priest" target = "outside_stone_building";
               : set_integer  var="talk_priest" value="6"; 
               : done;
            }
            : else_if (is_carried "sharpwood" && is_at "below_stone_building" && !(wet_floor) && !is_present"remains") {
               : print "The ground is too hard to dig, even with the help of the sharp piece of wood. Moistening it might help you.";
               : done;
            }
            : else_if (!is_carried "sharpwood" && is_at "below_stone_building" && (wet_floor) && !is_present"remains") {
               : print "The softened ground looks ripe for digging, but you'll need something to dig with.";
               : done;
            }
            : else_if (!is_carried "sharpwood" && is_at "below_stone_building" && !(wet_floor) && !is_present"remains") {
               : print "You wouldn't be able to dig up the floor without something to loosen the soil.";
               : done;
            }
            : else_if (is_present"remains") {
               : print "You close your eyes trying to banish the vision of the lonely grave.\nNo, there's no more digging to be done here today. ";
               : done;
            }
         }
         : match "dig floor" {
            : print "With what?";
            : done;
         }
         
         : match "exam grave" {
            : print "The soil is slightly wet. It contains bones and skin in a mid state of decay.\n'Can we just get the hell out of here', you unconsciously whisper.";
            : done;
         }

         : match "exam glass" {
            : if (is_present "glass") {
               : print "A slightly chipped, cracked pint glass. It's the dimpled kind with the large handle on the side. Great for drinking real-ale and beer out of.\nIt has a design of a guitar pick on it, with the words 'The Brother's View' printed across.";
               : done;
            }
         }
         : match "smash glass" {
            : if (is_carried "glass") {
               : print "It's so well made of thick glass that no amount of trying to break it will suffice.";
               : done;
            }
         }
         : match "fill glass with water;fill glass with tap" {
            : if (is_carried "glass" && is_present "water" ) {
               : print "You try to fill the glass but it's cracked and the water leaks out.";
               : done;
            }
         }
         : match "exam remains" {
            : if (is_present "remains" && is_exists "glass") {
               : print "Yes, the remains are still there.";
               : done;
            }
            : else_if (is_present "remains" && !is_exists "glass") {
               : print "You steal yourself and look as quick as you can at the bodily remains in the grave.\nThe body is unidentifiable and generally in a severe state of decay.\nYou avert your eyes, but not before noticing a glass in amongst the mess.\nThough what it's doing here is a mystery.\nWhat in the world happened here? Who was responsible? Who was it?\nYou feel some divine intervention would be greatly appreciated and at the same time you can feel your mind slowly unhinging.";
               : create "glass";
               : done;
            }
         }

         : match "exam visor;search visor" {
            : if (is_present "dashboard"  && !is_exists "glasses" ) {
               : print "It lifts down with a creak. Balanced behind the upturned sun visor is a pair of sunglasses.";
               : create "glasses";
               : done;
            }
            : else_if (is_present "dashboard"  && is_exists "glasses"  ) {
               : print "The sun visor has no more secrets to reveal.";
               : done;
            }
         }

         : match "exam phone" {
            : if (is_present "phone") {
               : print "One of the new ones which allows for text messaging as well as phone calls. Quite a large screen, though a bit scratched.\nThere are three contacts listed: Parents, Jonny, Laura.\nAnd it plays Snake!\nThe phone torch feature is cool too and is part of the contact list to activate it. It acts like a toggle switch for on/off.\nModern technology is a wonderful thing.";
               : done;
            }
            : else_if (is_present "litphone")  {
               : print "One of the new ones which allows for text messaging as well as phone calls. Quite a large screen, though a bit scratched.\nThere are three contacts listed: Parents, Jonny, Laura.\nAnd it plays Snake.\nThe phone torch feature is turned on.";
               : done;
            }
         }
         
         : match "play snake;play phone" {
            : if (is_carried "phone" || is_carried "litphone") {
               : print "Woo, this is exciting, but shouldn't you be concentrating on more important things right now. Anyone would think you're addicted to your phone.";
               : done;
            }
         }

           : match "exam photo" {
            : if (is_present "photo" ) {
               : print "A polaroid of Laura, one of your university friends. You had arranged to see her on the road trip. Your heart jumps everytime you think about her. \nMaybe you should ring her, let her know the situation?";
               : done;
            }
         }

          : match "tear photo" {
            : if (is_present "photo" ) {
               : print "Never in a million years.";
               : done;
            }
         } 
         
         : match "exam cap" {
            : if (is_present "cap" && is_worn "cap" ) {
               : print "Now that you're wearing the cap, you look kind of funky.";
               : done;
            }
            : else_if (is_present "cap" && !is_worn "cap") {
               : print "It is rather dishevelled, but still quite sturdy. There's a faint cross with colourful skull faces on it.";
               : done;
            }
         } 
  
         : match "exam invitation; read invitation" {
            : if (is_present "invitation" ) {
               : show_graphic "invitation";
               : print "The slightly crumpled piece of card which started this nightmare. You look absently at the well presented invitation, showing what should have been a relaxing holiday. Instead - this.";
               : done;
            }
         }  

         : match "tear invitation" {
            : if (is_carried "invitation" ) {
               : print "You tear the invitation into a few pieces of paper. Ah yes, it's the small things in life.";
               : destroy "invitation";
               : create "piecesofpaper";
               : done;
            }
         } 

         : match "fold invitation" {
            : if (is_carried "invitation" ) {
               : print "It's a bit too stiff to fold.";
               : done;
            }
         }    

         : match "exam paper" {
            : if (is_present "piecesofpaper" ) {
               : print "Torn bits of paper, rather like confetti, fragments if you will.";
               : done;
            }
         }    

         : match "exam storm;exam outside" {
            : if (is_at "in_car" ) {
               : print "You peer through the slightly soiled windows and see that the desert storm is still active. A depressing and slightly perturbing sight.";
               : done;
            }
         }            

         : match "exam car;search car" {
            : if (is_at "in_car" ) {
               : print "The interior smells of pineapple, which is the nicest part about it. The leather seats are so worn they are letting their springs show through. The dashboard looks like a storage depot for rubbish. The back seats are empty, as is the passenger side seat.\nA feeling of loneliness creeps over you and you shake your foot on the floor in frustration.\nYou'll be glad when this journey is over.";
               : done;
            }
            : else_if (is_at "outside_car" ) {
               : print "The outside of your car is banged and dinted. The tyres are worn and the windows are really in need of a wash. She sure has been through a lot with you.\nThe trunk is prominent as it's the area with the least paint on.\nYou notice the cause of your abrupt stop and engine stall: one of the tyres is hanging off in pieces, with a trail of tyre marks and bits of rubber back the way you came.\n Oh boy, this just gets better.";
               : done;
            }
         }
          : match "exam trunk;search trunk" {
            : if (is_present "closedtrunk" ) {
               : print "The trunk section of your car is rusted and some paint is flaking off. It's held locked by a very, very, theft proof device: some wound wire.";
               : destroy "closedtrunk";
               : create "opentrunk";
               : done;
            }
            : else_if (is_present "opentrunk" ) {
               : print "The open trunk contains nothing more.";
               : done;
            }
         }
          : match "exam socket;exam mains" {
            : if (is_present "socket"  && is_present "pluggedinfairylights") {
               : print "The socket is situated under the bar, easily accessible to the cleaners and anyone who wishes to charge their phone or run their computer.\nIt has some fairylights plugged into it.";
               : done;
            }
            : else_if (is_present "socket" && !is_present "pluggedinfairylights" ) {
               : print "The socket is situated under the bar, easily accessible to the cleaners and anyone who wishes to charge their phone or run their computer.";
               : done;
            }
         }
         : match "untie wire;open trunk;unlock trunk" {
            : if (is_present "woundwire" ) {
               : print "Although your sight is reduced, you fiddle, cajole and maneuver the wire until it comes apart and the trunk pops over.";
               : destroy "closedtrunk";
               : destroy "woundwire";
               : create  "opentrunk";
               : create  "wire";
               : create  "duffelbag";
               : done;
            }
            : else_if (is_at "outside_car" && !is_present "woundwire") {
               : print "The trunk is stuck open, as the hinges are rusted.";
               : done;
            }
         }

         : match "cut wire" {
            : if (is_present "woundwire" ) {
               : print "Nice idea to cut the wire, but you have nothing to do that with.";
               : done;
            }
            : else_if (is_present "wire") {
               : print "It's quite short so cutting it would make even shorter. Besides, you have nothing to cut it with.";
               : done;
            }
         }

          : match "exam wire" {
            : if (is_present "woundwire" ) {
               : print "The wire is wound through the rusted out trunk lock to recure it in place.";
               : done;
            }
            : else_if (is_present "wire" ) {
               : print "The wire is a few inches long and quite sturdy.";
               : done;
            }
         }

         : match "exam bag" {
            : if (is_present "duffelbag" ) {
               : print "You open the denim duffelbag. It contains your belongings and is full to the brim with holiday clothes, a trusty towel and mini toiletries. You travel light don't you?\nYou close it up again so nothing gets lost. You are still determined to go on the roadtrip.";
               : done;
            }
         }

         : match "exam glasses" {
            : if (is_present "glasses" && is_worn "glasses") {
               : print "The world looks a lot darker than it already is with these sitting on your face.";
               : done;
            }
            : else_if (is_present "glasses" && !is_worn "glasses") {
               : print "Good condition, flight school ready, shiny aviator glasses.";
               : done;
            }
         }      

         : match "exam keys" {
            : if (is_at "in_car" ) {
               : print "They swing daintily from the steering wheel column.";
               : done;
            }
         }      
         : match "get keys" { 
            : if (is_at "in_car" ) {
               : print "They're stuck in the ignition.";
               : done;
            }
         }  

         : match "_ radio" {
            : if (is_at "in_car" ) {
               : print "The car radio is a standard radio cassette player. It is currently playing static through the speakers from being unable to pick up reception. The tune-in knob broke about two hundred miles ago.";
               : done;
            }
         }
         
         : match "turn key;start car;start engine;turn engine" {
            : if (is_at "in_car" ) {
               : print "You turn the key but the engine only makes a small grunting and whirring noise before falling silent.";
               : done;
            }
         }
         : match "exam windows" {
            : if (is_at "in_car" ) {
               : print "With all this recent long distance driving, they're pretty grimy.";
               : done;
            }
         }
         : match "clean windows;wipe windows" {
            : if (is_at "in_car" ) {
               : print "Doesn't make much difference, but you can still see through them.";
               : done;
            }
         }  
         : match "smash windows" {
            : if (is_at "in_car" ) {
               : print "The windows are strong and repel any attempt at being smashed.";
               : done;
            }
         } 
         : match "open windows" {
            : if (is_at "in_car" ) {
               : print "The window mechanism has been broken for a while, but you try anyway. It just winds around loosely.";
               : done;
            }
         }  
         : match "smash windscreen" {
            : if (is_at "in_car" ) {
               : print "The windscreen stares at your attempts to break it. It's as if it's saying, 'There are doors here'";
               : done;
            }
         }  
         : match "exam doors" {
            : if (is_at "in_car" ) {
               : print "Normal car doors. The one next to you is the one you got into the vehicle to start with so should be useable now. You could probably exit through it if want.";
               : done;
            }
         }  
         : match "exam windscreen" {
            : if (is_at "in_car" ) {
               : print "Grimy around the edges. Smeary across the middle. And bug ridden. Through it, you vaguely see the road disappear into the distance. Topped off with a sun visor.";
               : done;
            }
         } 
         
         : match "listen door" {
            : if (is_at "short_corridor" && (toilet_blocked)) {
               : print "You hear indistinct but loud voices shouting and arguing. Possibly from a female and more than one male.";
               : done;
            }
            : else_if (is_at "short_corridor" && !(toilet_blocked)) {
               : print "You hear nothing of interest.";
               : done;
            }
         }
#TODO Listen changes with PENDULUM (as well as dynamic description?)
         : match "listen_" {
            : if (is_at "plush_alcove" && (pendulum_on)) {
               : print "You hear melodic ticking in between hearing the general, indistinct chatter of patrons scattered throughout the establishment.";
               : done;
            }
            : else_if (is_at "plush_alcove" && !(pendulum_on)) {
               : print "You hear the general, indistinct chatter of patrons scattered throughout the establishment, minus the ticking of the pendulum which you stopped earlier.";
               : done;
            }
           : else_if (is_at "zone_inside_pub" || is_at "zone_bar" ) {
               : print "You hear the general, indistinct chatter of patrons scattered through the establishment.";
               : done;
            }
            : else_if (is_at "short_corridor" && (toilet_blocked)) {
               : print "You hear some voices behind the door to the north.";
               : done;
            }
            : else_if (is_at "zone_outside_pub") {
               : print "You hear the general outdoor sounds of birds tweeting, the gentle wind.\nBehind that, you feel you can hear a strange deep vibrating sound, almost out of perception.";
               : done;
            }
            : else_if (is_at "chaotic_maelstrom") {
               : print "There is a strange, low level bass sound, drifting though low level frequencies. It's physically uncomfortable as you can feel it more than you can hear it.";
               : done;
            }
            : else_if (is_at "toilet_cubicle" && cubicle_counter != 0) {
               : print "From the direction of the main toilet area, you hear voices talking heavily as if in a subdued argument. Rising in volume as the exchange gets heated.";
               : done;
            }
            : else_if (is_at "toilets" && toilets_counter != 0) {
               : print "There's a discussion going on. You concentrate on what they are saying, although most of it you don't understand.";
               : done;
            }
            : else_if (is_at "mirror_room" && !(voice_talked_full)) {
               : print "Someone is talking to you through some sort of hidden speaker system. You might be mistaken, but it sounds like the biker girl.";
               : done;
            }
           : else {
               : print "You hear nothing of interest at the moment.";
               : done;
            }
         }  
         : match "answer phone" {
            : if ((is_carried "phone" || is_carried "litphone") && phone_answered == false && !(player_dirty)) {
               : print "A low hissing noise. \nListening harder, you detect a shallow, tortured voice deep down within the static...\nAbruptly, the call ends.";
               : set_true "phone_answered";
               : done;
            }
            : else_if ((is_carried "phone" || is_carried "litphone") && phone_answered == false && (player_dirty)) {
               : print "There is no incoming call, the phone is dead.";
#               : set_true "phone_answered";
               : done;
            }
            : else_if ((is_carried "phone" || is_carried "litphone") && phone_answered == true ) {
               : print "Nothing happens, but you remember, with a cold feeling, the tortured voice within the static.";
               : done;
            }
         }
         : match "exam tyre" {
            : if (is_at "outside_car" ) {
               : print "Yes, the tyre is completely obliterated into bits of rubber.";
               : done;
            }
         }
 
          : match "dial emergency;dial police;dial 999;dial 911;dial emergencies" {
            : if (is_carried "phone" || is_carried "litphone" ) {
               : print "There's no dial tone or signal, only a sparodic crackling noise. It seems to be a bit hit and miss around here.";
               : done;
            }
         }
         
         : match "dial laura" {
            : if ((is_carried "phone" || is_carried "litphone") && !(player_dirty) ) {
               : print "You phone Laura's number from auto-dial.\nYou are amazed that in this weather a signal is possible. It starts to ring.\nThe line is picked up after two and a half rings.\nBut before you can talk, the line goes dead with a click. Only silence.";
               : done;
            }
            : else_if ((is_carried "phone" || is_carried "litphone") && (player_dirty) ) {
               : print "You try to ring Laura, but the phone is dead.";
               : done;
            }
         }
         : match "dial jonny" {
            : if ((is_carried "phone" || is_carried "litphone" ) && !(player_dirty)) {
               : print "You ring Jonny's number, but it only keeps ringing. There's no answer.";
               : done;
            }
            : else_if ((is_carried "phone" || is_carried "litphone") && (player_dirty) ) {
               : print "You try to ring Jonny, but the phone is dead.";
               : done;
            }
         }
         : match "dial parents" {
            : if ((is_carried "phone" || is_carried "litphone" ) && !(player_dirty)) {
               : print "You ring your parents but there's no answer. It seems to lose signal.";
               : done;
            }
            : else_if ((is_carried "phone" || is_carried "litphone" ) && (player_dirty)) {
               : print "You try to ring your parents, but the phone is dead.";
               : done;
            }
         }
         
         : match "exam road" {
            : if (is_at "zone_road" && !(priest_dead)) {
               : print "The road is a single lane highway. Sand is blowing low across it. There is a central line of yellow and the road generally appears in good condition. You have seen no traffic passing since breaking down.";
               : done;
            }
            : else_if (is_at "zone_road" && (priest_dead)) {
               : print "The road is a single lane highway. The sun is glinting off the surface now that the storm is decreasing. There is a central line of yellow and the road generally appears in good condition.";
               : done;
            }
         }
         : match "exam sign;read sign" {
            : if (is_at "desert_n" ) {
               : print "The sign has seen better days. It is rusty and the face is pock-marked with small dents and holes. As far as you can tell, it reads 'Vista Loop: 40 Miles (Gas and Motel)'";
               : done;
            }
         }

         : match "n _;ne _;nw _;se _; sw_;w_;e_" {
            : if (is_at "desert_n" ) {
               : print "The desert wilderness looks decidedly trecherous. It would be suicide.";
               : done;
            }
         }

         : match "south_;s_;southeast_;se_;southwest_;sw_;west_;w_;northwest_;nw_;northeast_;ne_" {
            : if (is_at "desert_s" ) {
               : print "The desert wilderness looks decidedly trecherous. It would be suicide.";
               : done;
            }
         }

         : match "southeast_;se_;southwest_;sw_;west_;w_;northwest_;nw_;northeast_;ne_" {
            : if (is_at "outside_car" ) {
               : print "The desert wilderness looks decidedly trecherous. It would be suicide.";
               : done;
            }
         }
         
         : match "exam rock" {
            : if (is_present "rock" ) {
               : print "The rock is lovely and smooth. As if it's been eroded in a river.";
               : done;
            }
         }
         : match "exam bible" {
            : if (is_present "priest" && is_at "zone_desert" ) {
               : print "The bible within the priest's possession is a small, handsomely bound book.\nFrom what you can see it looks like it's made from black leather with gold edged pages. Although in this hot wind, you can only just make it out.";
               : done;
            }
         : else_if (is_present "bible" ) {
               : print "It's an elegantly bound book. Appears to be made from cracked leather, exquisitley made with gold edged pages.\nYou shake your head at recent past events.";
               : done;
            }
         }
         : match "read bible" {
            : if (is_present "priest" && is_at "zone_desert" ) {
               : print "The priest is holding onto it tightly, so there's no chance of reading it.";
               : done;
            }
         : else_if (is_present "bible" ) {
               : print "You flip through the beautiful, flimshy pages and notice it has one or two pictures of scenes depicted in the text.\nYou probably should be making headway now..";
               : done;
            }
         }
         : match "exam verge;exam grass;search verge;search grass" {
            : if (is_at "zone_road" && !(is_at "desert_s") ) {
               : print "You have a look around the verge, kick in the dust and dirt, but see nothing that remotely perks your enthusiasm.";
               : done;
            }
            : else_if (is_at "desert_s" && !is_exists "rock" ) {
               : print "You have look around the verge, kick in the dust and dirt and find a unusal rock.";
               : create "rock";
               : done;
            }
            : else_if (is_at "desert_s" && is_exists "rock" ) {
               : print "You have a look around the verge, kick in the dust and dirt, but see nothing that remotely perks your enthusiasm.";
               : done;
            }
         }
         : match "exam bible" {
            : if (is_present "priest" && is_at "zone_desert" ) {
               : print "Through the blinding sand, from a short distance, it looks like a typical leather bound bible with a gold marking on the front.";
               : done;
            }
         }
         : match "exam barrel" {
            : if (is_present "barrel" ) {
               : print "It's a large, brown, liquor or beer barrel. It looks like it's made in the traditional way of strong oak walls tied together with metal bands.";
               : done;
            }
         }
         : match "exam band" {
            : if (is_present "barrel" ) {
               : print "Slightly rusted but holiding the barrel together securely.";
               : done;
            }
         }
         : match "get barrel" {
            : if (is_present "barrel" ) {
               : print "The barrel weighs about the same as medium sized camel, so it's not really good idea.\nYou wouldn't want to do your back in at this stage.";
               : done;
            }
         }
         : match "move barrel" {
            : if (is_present "barrel" && !is_present "opening") {
               : print "You grasp the barrel and tilt it to the side, rolling it against the wall for a small distance. It appears to be empty as you heard no liquid sloshing around.\nYou uncover a small opening which leads downwards into pitch black.";
               : create "opening";
               : done;
            }
            : else_if (is_present "barrel" && is_present "opening" ) {
               : print "You try to shove the barrel a bit more, but it won't move anywhere else.";
               : done;
            }
         }
         : match "exam opening" {
            : if (is_present "opening" && is_carried "phone") {
               : print "The opening is dug directly into the concrete and stone. The area is quite small but you should be able to squeeze down.\nYou can't see into its depths though, so how deep it is is anyone's guess.\nThere's a faint odour of damp and decay rising from its depths.\nA light source would be useful to prepare you for how to enter the opening.";
               : done;
            }
            : else_if (is_present "opening" && is_carried "litphone" ) {
               : print "The opening is dug directly into the concrete and stone. The area is quite small but you should be able to squeeze down.\nThe phone torch illuminates the area below, in the direction you point it. You scan with it and can make out a dirt floor, about your height downwards.\nThere's a faint odour of damp and decay rising from its depths.";
               : done;
            }
         }
         
         : match "phone torch;use torch;light torch;light phone;torch toggle" {
            : if (is_carried "phone" ) {
               : print "You turn the phone torch on. Let there be light!";
               : create "litphone" target ="inventory";
               : destroy "phone";
               : done;
            }
            : else_if (is_carried "litphone" && !is_at "below_stone_building") {
               : print "You turn the phone torch off.";
               : create "phone" target ="inventory";
               : destroy "litphone";
               : done;
            }
            : else_if (is_carried "litphone" && is_at "below_stone_building") {
               : print "Your heart skips a beat, you start to hyperventilate. What random ideas you do have sometimes. No, the phone torch stays on.";
               : done;
            }
         }
         
         : match "enter opening;down _;d _;go opening" {
            : if (is_present "opening" && !is_present "litphone" ) {
               : print "You peer further into the opening on your hands and knees, being careful not to topple in.\nThen decide you can't risk going down as it's too dark.";
               : done;
            }
            : else_if (is_present "opening" && is_carried "duffelbag" ) {
               : print "You are carrying your duffel bag. The hole isn't big enough for you both to get through.";
               : done;
            }
            : else_if (is_present "opening" && is_present "litphone") {
               : print "You check the phone torch is turned on, put your legs over the edge, close your eyes, brace yourself and then, after a short pause, drop down into the darkness below.";
               : press_any_key;
               : goto "below_stone_building";
               : redescribe;
               : done;
            }
         }

         : match "smash door;kick door" {
            : if (is_present "door" && is_exists "sharpwood" ) {
               : print "There's no point having another go at it, it just fell apart on its own.";
               : done;
            }
            : else_if (is_present "door" && !is_exists "sharpwood" ) {
               : print "You make to break the door up but a part of it casually drops to the ground of its own accord.";
               : create "sharpwood";
               : set_true "wood_exists";
               : done;
            }
         }
         : match "exam door" {
            : if (is_present "door" && is_exists "sharpwood" ) {
               : print "The door is slowly falling apart in this wind.";
               : done;
            }
            : else_if (is_present "door" && !is_exists "sharpwood" ) {
               : print "The door is broken in places, yet still hanging onto one hinge in sheer bloody mindedness.";
               : done;
            }
         }
         : match "exam wood" {
            : if (is_present "sharpwood") {
               : print "A hefty plank of wood with a good, sharp point where it fell off the door earlier.\nIt reminds you of a short sword.";
               : done;
            }
         }
# Kill Priest (attempt) # with? #TODO Humane way of stopping priest? Instead of killing him 'pray for me!' 'pray for priest' and priest relaxes and then disappears
         : match "kill priest" {
            : if (is_present "priest" && is_at "zone_desert" && !(player_dirty)) {
               : print "He's just going about his business. What possible reason would you have to do that.\nIt's been a crazy day so far, but still...";
               : done;
            }
            : else_if (is_present "priest" && is_at "zone_desert" && (player_dirty)) {
               : print "A split second spur of the moment decision. You lunge for the unholy man, not sure what his intent is, but knowing he looks dangerous and deranged.\nYou summise he is probably responsible for the ghastly mess inside the building.\nThe sins he was repenting were his sins, and his sins alone.\nYou move to tackle him to the ground.\nHe side steps and loses his footing.\nFalls to the ground.\n He lays still, breathing hard, covering his face in anticipation of an attack.\nThen, slowly, before your hurting eyes, his eyes go up into their sockets, revealing the whites, and his body dissolves in a blue, ethereal light.\nAll that remains is his bible laying on the ground.";
               : destroy "priest";
               : create "bible";
               : create "biker" target = "outside_car";
               : create "van" target = "outside_car";
               : unblock  "desert_e";
               : set_true "priest_dead";
               : done;
            }
            : else_if (is_present "priest" && is_at "toilets") {
               : print "You remember back to the desert - you've already done that - so you decide to wait the conversation out to see what develops.";
               : done;
            }
         }
          : match "exam biker" {
            : if (is_present "biker") {
               : print "The biker girl appears to be just about old enough to drive and is wearing dusty, off-white trainers, skinny jeans and a black biker's jacket. Her minimal make up looks tasteful and increases the effect of her powerful brown eyes.\nShe has her arms crossed and she has a secret smile on her face.\n";
               : done;
            }
         }  
          : match "kill biker" {
            : if (is_present "biker") {
               : print "Even as you think it, she shakes her head and says, 'That won't help, not here,' a pause, 'Not now anyway.'\nIntriguing.";
               : done;
            }
         }  
          : match "exam van" {
            : if (is_present "van") {
               : print "The mysterious van is of the matt black variety and suspiciously clean. Even the heavy tread tyres look spotless. Its blacked out windows conceal the inside.\nStrapped to the back is a matt black motorcycle.\nYou are more perturbed than worried. There's something about the van and its driver that seems to make sense. Though how, you aren't too sure.";
               : done;
            }
         }
          : match "exam motorcycle" {
            : if (is_present "van") {
               : print "From this distance, it looks spotless too.";
               : done;
            }
         }
          : match "ride motorcycle" {
            : if (is_present "van") {
               : print "The biker girl laughs before you can make your move for the bike.\n'Don't be so quick to disappear.'";
               : done;
            }
         }        
 
# Talk to woman

         : match "talk woman" {
            : if (is_present "woman" && is_at "plush_alcove") {
               : print "She either doesn't hear or is lost in her own thoughts, as she doesn't acknowledge your talk.";
               : done;
            }
            : else_if (is_present "woman" && is_at "toilets") {
               : print "She looks over to you, but the conversation is flowing and you can't a word in edgewise, so are ignored.";
               : done;
            }
         }
         
# Talk to barman

         : match "talk barman" {
            : if (is_present "barman") {
               : print "He isn't in the best of moods and prefers not to engage in small talk with you.";
               : done;
            }
         }

# Talk to biker girl
         : match "talk biker" {
            : if (is_present "biker" && talk_biker == 7) {
               : print "'So. You made it out in one piece.' Not a question. She looks pleased.";
               : decrement "talk_biker";
               : done;
            }
            : if (is_present "biker" && talk_biker == 6) {
               : print "'Never doubted it for a minute', she says. Her eyes twinkling.";
               : decrement "talk_biker";
               : done;
            }
            : if (is_present "biker" && talk_biker == 5) {
               : print "'So here's the thing, you did well that time. Excellent in fact.'\nHer smile disappears.\n'But you'll need to do some more to set things straight'";
               : decrement "talk_biker";
               : done;
            }
            : if (is_present "biker" && talk_biker == 4) {
               : print "'Take three things which you'll need to use in the near future. Then I'll drive you out of here'\nAfter closing her eyes and falling silent and still, she recites, 'Duffelbag, whatever you found with the body and whatever the priest dropped.'";
               : decrement "talk_biker";
               : done;
            }
            : if (is_present "biker" && talk_biker == 3) {
               : print "'Don't worry though, it's not as unusual as it sounds. Well, it is, but it's straight forward'\nThen as an afterthought, 'You won't need your car either, at least not for a while, not where you're going'";
               : decrement "talk_biker";
               : done;
            }
            : if (is_present "biker" && talk_biker == 2) {
               : print "'I'll explain on the drive', she says.";
               : decrement "talk_biker";
               : done;
            }
            : if (is_present "biker" && talk_biker == 1) {
               : print "'So c'mon, get your things together and get in the van'";
               : decrement "talk_biker";
               : done;
            }
            : if (is_present "biker" && talk_biker == 0) {
               : print "She nods towards the van indicating to get a move on.";
               : decrement "talk_biker";
               : done;
            }
         }
         
         : match "exam priest" {
            : if (is_present "priest" && is_at "zone_desert" && !(player_dirty)) {
               : print "He is unshaved and has wide open eyes, darting from one place to another.\nHe seems oblivious to the storm, his black garb flapping around his body. He holds a bible in his grubby hand and he has a scared look on his face.\nHe seems harmless enough.";
               : done;
            }
            : else_if (is_present "priest" && is_at "zone_desert" && (player_dirty)) {
               : print "You notice a severe change in him. He's acting like a wound up spring ready to explode.\n'Did you see?', he shouts over the storm. 'What did you see?'\nMaybe you should talk to him and passify him or something.";
               : done;
            }
            : else_if (is_present "priest" && is_at "toilets") {
               : print "Compared to seeing him in the desert, he seems calm and better presented. He no longer looks either mad or insane, but his frown lines above his eyes show a weight of guilt or stress.\nMaybe this is what is commonly known as a Daylight Hallucination, you wryly think to yourself.";
               : done;
            }
         }
# Priest is nonchelant
         : match "talk priest" {
            : if (is_present "priest" && talk_priest == 6 && is_at "zone_desert" && !(player_dirty)) {
               : print "With surprise on his face, he turns to face you. In amongst his mad gesticulations his eyes look lost, even with his faith clutched tightly to his breast.\nHe mutters something indecipherable and turns away.";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 5 && is_at "zone_desert" && !(player_dirty)) {
               : print "He turns to you, taking more notice of you this time. He squints and his eyes shift across the horizon, to the structure to the east and eventually back to you.\n'It can't be', he says vaguely.";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 4 && is_at "zone_desert" && !(player_dirty)) {
               : print "'So. You are having trouble? Car trouble? You don't know the meaning of trouble', he croaks.";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 3 && is_at "zone_desert" && !(player_dirty)) {
               : print "'Only God can save you now, can save us all now', through clenched teeth, waving his bible at the world.\n He sounds conflicted.";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 2 && is_at "zone_desert" && !(player_dirty)) {
               : print "He dips his head and his shoulders sag, 'I will be forgiven in the end, if I would just repent my terrible sins'";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 1 && is_at "zone_desert" && !(player_dirty)) {
               : print "'I do not wish to speak anymore, please, be on your way and I will deal with God's wishes.' You nearly miss what he says in the howling weather.";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 0 && is_at "zone_desert" && !(player_dirty)) {
               : print "The priest holds his palm up while looking away, not wanting to talk, his eyes tightly closed in personal anguish.";
               : decrement "talk_priest";
               : done;
            }
         }

# Priest is aggresive
         : match "talk priest" {
            : if (is_present "priest" && talk_priest == 6 && is_at "zone_desert" && (player_dirty)) {
               : print "The priest waves his book, shouting above the wind, 'You can see all around you the wish of God.'";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 5 && is_at "zone_desert" && (player_dirty)) {
               : print "'And he teaches us and guides us in strange ways.'";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 4 && is_at "zone_desert" && (player_dirty)) {
               : print "'And I have seen what he can give us and what take away! And what he commands us.' He's screaming now.";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 3 && is_at "zone_desert" && (player_dirty)) {
               : print "'And I have seen that I must take another, send them to be cleansed of their sins.' He's speaking as if in a twisted surmon.";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 2 && is_at "zone_desert" && (player_dirty)) {
               : print "Spittle flies out of his mouth. Eyes bulbous.\n'And you! Yes, you! You have the lord's blessing to assist in my holy tribute.'\nThe storm around you picks up. Do something quick. Anything, he's on the edge.";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 1 && is_at "zone_desert" && (player_dirty)) {
               : print "He swiftly removes a large knife from under his robe.";
               : decrement "talk_priest";
               : done;
            }
            : if (is_present "priest" && talk_priest == 0 && is_at "zone_desert" && (player_dirty)) {
               : print "He is visibly vibrating and taking deep breaths, sweat running down his face.\nHe snaps, lunges forward with the knife.";
               : press_any_key;
               : print "It catches you in stomach.\nYou feel cold metal slice and sink to the ground.";
               : press_any_key;
               : print "He crouches over you, the knife pulled back. Your senses dissolve as he stabs you again.";
               : print "A few seconds of pain, then... nothing.";
               : press_any_key;
               : print "You were killed. (The priest was clearly insane. You need to subdue or stop him before he snaps)";
               : press_any_key;
               : gosub "scoring";
               : print "{(6),'Press any key...'}";
               : press_any_key;
               : end_game;
               #: decrement "talk_priest";
               : done;
            }
         }

#Priest is in toilets
         : match "talk priest" {
            : if (is_present "priest" && is_at "toilets") {
               : print "The priest is caught up in the conversation, you can't a word in edgewise and so you are ignored.";
               : done;
            }
         }

         : match "exam city" {
# City - Static 'city' description
            : if (is_at "patio" || is_at "upper_seating_area" || is_at "up_a_large_tree") {
               : print "Your eyes have trouble adjusting to focus on the foreground or horizon. It's all very indistinct due to the haze in the air. You think you can make out smaller buildings close by, leading to a treed area, which then gives way to larger buildings in the distance.";
               : done;
            }
         }

         : match "exam postcard;exam landscape;exam landscapes;exam view;exam surrounding;exam area" {
# Patio - Static 'surrounding area' desc
            : if (is_at "patio") {
               : print "To the east, sweeping around to the south over the fence, you can see into the middle distance. There seems to be some haze in the air, as the nearby structures and possibly trees appear blurry and occassionally lit up by silent blasts of light.\nMaybe if you were higher up, you summise, you'd be able to see more of this visual wonder.";
               : done;
            }
# Zone Desert - just in case used
            : else_if (is_at "zone_desert" || is_at "in_car") {
               : print "Desolate.";
               : done;
            }
# Upper Seating Area - Static 'surrounding area' desc
            : if (is_at "upper_seating_area") {
               : print "To the east, across to the south, past the patio and over the fence, you can see vague structural shapes through the shimmering air. They are indistinct,  but you can make out suggestions of smaller buildings across to tree in the distance. Possibly a road or two.\nThe sky is similarly hazy and seems to be silently lit periodically with a spider web flash of light.\nYou figure a higher vantage point may shed some light on this phenomena.";
               : done;
            }
# Up A Tree - Flittering Postcard landscape descriptions            
            : if (is_at "up_a_large_tree" && landscape_desc == 20) {
               : print "Strange fragments of landscape, appearing and disappearing on a shimmering, undulating canvas of reality.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 19 ) {
               : print "You catch a glimpse of a toothless grin of a baby's face.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 18) {
               : print "Purple clouds high, electrified mist below, pockets of shifting, changing bursts of light.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 17 ) {
               : print "A large, many roomed, regal building, in the middle distance, just past the shimmering border, appears for a split second, then flashes off, leaving an after print on your eyes.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 16) {
               : print "While watching the twinkling and scattering display, vaguely hypnotised, you grip the tree harder and catch a hold of yourself mentally.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 15 ) {
               : print "A vague spread of rippling water appears, either a lake or large river, way too high above the ground to have any substance. The quality deteriorates until it dissolves into oblivion.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 14) {
               : print "A face and eye, distinctly feminine and too large in the sky, appears, a sense of watching, a sense of malevolence. The eye blinks. The vision flashes, rotates slightly and fades out.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 13 ) {
               : print "You sense that the landscape is changing when you shift your focus of vision.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 12) {
               : print "Holding onto the tree for comfort, the light show momentarily silhouettes the branches against the tree, black fingered shadows scratching at your face.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 11 ) {
               : print "A flash of light and three fragments of landscape appear, interwined, and you involuntarily close your eyes to the midday brightness.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 10) {
               : print "The landscape goes quiet for a longer period of time, still silent, with no activity.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 9 ) {
               : print "You sense you need to watch, and remember, as much as you possibly can.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 8) {
               : print "Horrifying coalescing of colour and form.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 7 ) {
               : print "Across towards the horizon, you see some mountains appear, hideously out of place in this suburban area.\nThey flicker out, a popping sound as they disappear.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 6) {
               : print "To the east you see a patch of sun, over a dusty savannah, animals grazing and lazing in the heat. A strange blue static dissolves the spectacle into darkness. ";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 5 ) {
               : print "Choas. Pure chaos.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 4) {
               : print "Three rugged elephants fade into being, startled as to their predicament, running in mid air.\nAs they fall towards the ground, they vanish whence they came.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 3 ) {
               : print "A orangey red gaseous cloud blows up to the barrier and goes no further, curling and swirling against an invisible wall. ";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 2) {
               : print "You close your eyes for a few seconds, to relax the sensory overload you feel.";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 1 ) {
               : print "Lightening flashes unexpectedly above you, mirrored by a large boom which shakes you to the bone. It flitters out. ";
               : decrement "landscape_desc";
               : done;
            }
            : if (is_at "up_a_large_tree" && landscape_desc == 0 ) {
               : print "The mesmerizing fragments of landscapes seem to be on a pattern and recycle round.";
               : press_any_key;
               : print "You commit what you've seen to memory.";
               : set_integer  var="landscape_desc" value="20";
               : set_true "landscape_descriptions_full";
               : done;
            }
         }

         : match "west_" {
            : if (is_at "outside_stone_building"  && (priest_dead) && !(west_msg_displayed)) {
               : print "You wearily plod back towards your car in a state of shock. You can't quite believe what has happened.\nThe storm dies down a bit and you vaguely notice it is brightening up.\nAhead, towards the road you see a van slow down and turn in behind you car. A slim figure emerges, looks around as if to discern her location and then leans against your car, apparently waiting.";
               : set_true "west_msg_displayed";
               : press_any_key;
               : goto "outside_car";
               : redescribe;
               : done;
            }
         }
         
         : match "exam wall" {
            : if (is_at "inside_stone_building" ) {
               : print "All walls are made of large and small stones jammed together.";
               : done;
            }
            : else_if (is_at "below_stone_building" ) {
               : print "All four walls are smooth. There are tract marks where it looks like heavy machinery has been used to dig this area out.";
               : done;
            }
         }
         : match "exam tap" {
            : if (is_present "tap" && (!tap_hit) ) {
               : print "The corroded pipe is flush with wall and leaking small drips of water. The handle is of the turn variation.\nIt doesn't look like it's been used in a while.";
               : done;
            }
            : else_if (is_present "tap" && (tap_hit) && !(tap_on)) {
               : print "The corroded pipe is flush with wall and leaking small drips of water. The handle is of the turn variation.\nThe tap can now be used.";
               : done;
            }
            : else_if (is_present "tap" && (tap_hit) && (tap_on)) {
               : print "The corroded pipe is flush with wall and leaking small drips of water. The handle is of the turn variation.\nIt now works fine, water is coming out of the spout.";
               : done;
            }
         }
         : match "use tap;turn tap" {
            : if (is_present "tap" && (!tap_hit)) {
               : print "Due to none use, it is stuck shut. You probably need to tap it with something to loosen it up.";
               : done;
            }
            : else_if (is_present "tap" && (tap_hit) && !(tap_on)) {
               : print "You manage to turn the tap on, the pipe shudders for a second or two, then water starts to gush out with suprising force.";
               : create "water";
               : set_true "tap_on";
               : done;
            }
            : else_if (is_present "tap" && (tap_hit) && (tap_on)) {
               : print "You can't turn the tap on any more than it already is.";
               : done;
            }
         }
         : match "hit tap with rock" {
            : if (is_present "tap" && is_carried "rock" && (!tap_hit)) {
               : print "You hit the tap handle with the rock. You hear a grinding noise as the rust loosens around the spindal.";
               : set_true "tap_hit";
               : done;
            }
            : else_if (is_present "tap" && is_carried "rock" && (tap_hit)) {
               : print "It's fragile, so hitting it again wouldn't help. It looks like the tap faucet can be turned now.";
               : done;
            }
         }

         : match "enter van" {
            # Fully talked, all items
            : if (is_present "van" && is_carried "duffelbag" && is_carried "glass" && is_carried "bible" && (talk_biker == 0)) {
               : print "You make sure you have the required possessions, take one last look around, and climb into the van.\nThe girl pushes herself off the car. Your eyes follow her as she walks past the car and gets into the driver's side next to you.";
               : press_any_key;
               : clear_screen;
               : print "You sit there with your possessions clutched to your chest. A million questions go through your head.\nThe van's front area is spacious but that doesn't stop you from feeling enclosed in. Your head aches, your eyes hurt. You sit quietly, staring out of the window into the emerging sunshine.";
               : press_any_key;
               : print "'I know you're confused,' she says with a sideways glance, 'You needn't be though. Just think back to what has happened. It's all rather straight forward though and not as unexpected as you may think.'";
               : press_any_key;
               : print "She presses the clutch, starts the ignition. A perfunctory check of the rear-view mirror and she pulls out onto the highway.";
               : press_any_key;
               : print "The van picks up speed and the landscape parallaxes past.\n'We had problems with a certain person, at a certain place, doing certain things, at a particular time.'";
               : press_any_key;
               : print "'We needed assistance and someone of your action slash response calibre. It looks like we picked correctly.' She pauses as she shifts gears.";
               : press_any_key;
               : print "'Essentially, we needed someone to clean up the mess after a previous blip meant that the priest wasn't erm.. naturally eradicated.' She seems to struggle with that phrase.\n'He lasted for longer than should have been possible, so we needed you to meet him. He was a blight on the landscape. An anomaly which under normal circumstances would have ended his time on earth sooner. But with your inbuilt prowess for useful responses, you managed that exact task, to eradicate him.'";
               : press_any_key;
               : print "'Oh don't worry, you didn't actually kill him. He was already dead, his deeds had sealed his fate. But you managed to shunt him on. Doing nature's work.'\n'For various reasons, one in particular which will become apparent, we can't do what you do to any useful extent. So we acquired you for your talents.'";
               : press_any_key;
               : print "The van rolls along the never ending ribbon of road. The central lines zipping along from front to rear. A long road into a beautiful sun rise to who knows where.";
               : press_any_key;
               : print "And you are non the wiser.";
               : press_any_key;
               : print "'You will learn more as you go along. You're mostly safe. You have free will. You are our conduit. We can see what you do, where you go and what actions you take.'";
               : press_any_key;
               : print "She turns to you and smiles, 'For now, sleep and recouperate. You'll remember all this when you wake up. And please, trust me in all I've said.'\nAs well as feeling exhausted from the recent happenings, you suddenly feel less adrenelised and more physically drowsy.\n Your body relaxes and even though you try not to, you close your eyes and fall into a deep slumber.";
               : press_any_key;
               : print "{(6),'Congratulations, you have completed the Prologue.'}";
               : press_any_key;
               : drop_all;
               : create "glass" target ="inventory";
               : clear_screen;
               : print "{(6),'The First Fragment.'}\n'So then we drove off into the sunset.'\nYou come to hearing those words drift into your consciousness and see a possibly middle-aged woman in front of you, her make up the worse for wear.\n";
               : press_any_key;
               : print "'I mean, pretty hard to believe isn't it?', she says before drinking from a pint glass.";
               : press_any_key;
               : print "'She said I'd remember what happened and what we talked about, but I simply can't. And it's been quite a few years since it happened. She dropped me off at the motel, my car was already there all fixed. Quite surreal. I then carried on and met my friends. Turned out to be a really nice road trip.";
               : press_any_key;
               : print "She closes her eyes, possibly searching for a fragment of memory. 'But I can't for the life of me remember much about meeting her or why I stopped on that day.'";
               : press_any_key;
               : print "With a hot creeping feeling it dawns on you that this story is very familiar.";
               : press_any_key;
               : print "'Freaky, huh? And you want to know the most absurd part? I came to this very establishment because of something I had picked up during that hazy event. This here glass.' She taps her nearly empty beer glass, 'It lead me to this exact establishment, thousands of miles distant.'";
               : press_any_key;
               : print "She sighs, 'Now I have no idea what to do, who to speak to, or if I'm just insane. And I'm due back soon.' It sounds like she's talking more to herself than to you.";
               : press_any_key;
               : print "In your muzzy state you struggle for something to say. Hoping your head will clear and to bide some time, you take in your surroundings.";
               : press_any_key;
               : goto "plush_alcove";
               : redescribe;
               : done;
            }

            # Full talked, not all items
            : else_if (is_present "van" && (talk_biker == 0) && (!is_carried "duffelbag" || !is_carried "glass" || !is_carried "bible" )) {
               : print "The girl reminds you: 'Duffel bag, whatever you found with the remains and whatever the priest left behind.'";
               : done;
            }
            # Not started talk
            : else_if (is_present "van" && (talk_biker == 7)) {
               : print "She says, 'Don't rush. Let's have a chat, you and me.'";
               : done;
            }
            # Half talked
            : else_if (is_present "van" && (talk_biker > 0) && (talk_biker < 7 )) {
               : print "She smiles pleasantly, 'Come talk some more. I haven't finished.'";
               : done;
            }
         }

# Woman in pub - player character in Frag 1 - plush_alcove / toilets
          : match "exam woman" {
            : if (is_present "woman" && is_at "plush_alcove") {
               : print "The woman's blond hair and deep blue eyes are striking. The dark make-up is a little ruffled and she seems to be enjoying her drink.\nEven so, there's an underlying sense of defeat in her wavering and somewhat slurred voice.";
               : done;
            }
            : else_if (is_present "woman" && is_at "toilets" && toilets_counter >= 3) {
               : print "She seems to have sobered up since sitting at the table in the pub talking to you. Although now her face is red, her eyes and cheeks wet, and she is notably scared and confused.";
               : done;
            }
            : else_if (is_present "woman" && is_at "toilets" && toilets_counter < 3) {
               : print "She is collapsed on the floor, her face covered in slowly trickling blood, ragdoll motionless.";
               : done;
            }
         } 

          : match "get pictures" {
            : if (is_at "zone_inside_pub") {
               : print "They are firmly fastened to the wall.";
               : done;
            }
         }

          : match "exam pictures" {
            : if (is_at "plush_alcove") {
               : print "The pictures scattered around the walls range from oil painting prints to indescribable modern art.\nA bizarre mixture of the old and new.\nThere's a framed picture here of four people in white lab coats, two men and two women. It is evidently a cut out or scan from a magazine. It's grainy and the paragraphed text surrounding it is too small to read, though the heading reads 'Prize Winning Research Physicists'\nA creeping sensation edges its way up your back. As much as the picture reveals, the dark haired female is the biker from the desert.";
               : done;
            }
            : else_if (is_at "short_corridor") {
               : print "The pictures scattered around the walls range from oil painting prints to indescribable modern art.\nA bizzare mixture of the old and new.\nYou notice that one of the pictures here is what appears to be a photograph of the biker girl at an educational ceremony.\nShe looks thrilled as she smiles into the lens, clutching her rolled up degree certificate in front of her dark gown. Her mortar board is slightly askew, tilted forward, giving her a cheeky look.\nHer dark hair cascades down to frame her grinning face. Her eyes are alight with youthful anticipation. ";
               : done;
            }
            : else_if (is_at "the_bar") {
               : print "The pictures scattered around the walls range from oil painting prints to indescribable modern art.\nA bizzare mixture of the old and new.\nStanding out, simply because the picture is so simple, is a black and white framed photograph of a baby with a toothless grin and sparkling eyes. Its small hands reaching out to the viewer.\nIt seems oddly out of place in a place such as this.";
               : done;
            }
            : else_if (is_at "games_area") {
               : print "The pictures scattered around the walls range from oil painting prints to indescribable modern art.\nA bizzare mixture of the old and new.\nOne inparticular catches your eye; it's a framed photo of the biker girl from the desert. She is in a small group, posing for the camera.\nShe is in the centre, wearing a summer blouse and safari style shorts. She has her arm around a taller bearded man, who hangs his arm casually over her shoulder.\nA small child is balanced comfortably, sitting in the crook of her arm, a pink hat revealing dark curles of hair. She is squinting slightly from the bright sunshine.\nAll three are smiling proudly into the camera. Around them is an arid, scrub ridden landscape, low hills in the distance.";
               : done;
            }
            : else_if (is_at "zone_inside_pub") {
               : print "The pictures scattered around the walls range from oil painting prints to indescribable modern art.\nA bizzare mixture of the old and new.";
               : done;
            }
         } 

          : match "exam wallpaper;exam wall" {
            : if (is_exists "wallclock" && is_at "plush_alcove") {
               : print "The wallpaper is purple imitation velvet with gold motifs.\nYou see some framed pictures and the wallclock behind you which you noticed earlier.\nOtherwise the walls are suprisingly lacking in any decoration.";
               : done;
            }
            : else_if (!is_exists "wallclock" && is_at "plush_alcove") {
               : print "The wallpaper is purple imitation velvet with gold motifs.\nYou see some framed pictures scattered around the walls, firmly glued down.\n There's a wallclock behind you within reach.";
               : create "wallclock";
               : done;
            }
            : else_if (is_at "zone_inside_pub" || (is_at "zone_bar")|| (is_at "short_corridor")) {
               : print "The wallpaper is purple imitation velvet with gold motifs.\nYou see some framed pictures scattered around the walls, firmly glued down.";
               : create "wallclock";
               : done;
            }
         } 
          : match "exam remote" {
            : if (is_present "remote") {
               : print "Examining the remote control, you can't believe how small it is.\nThe channels are controlled by channel up and channel down. Large blue arrows, one pointing up, one pointing down.";
               : done;
            }
         } 

          : match "exam door" {
            : if (is_at "the_bar") {
               : print "It's a swing door, quite like the ones depicted in saloons in old western films, but instead has mottled glass across its front.\nA large sign above it informs you it's the way out.";
               : done;
            }
            : else_if (is_at "games_area") {
               : print "A wooden door which appear to open onto the outside of the pub.\nIt's held open for easy entry.";
               : done;
            }
         } 

          : match "exam window" {
            : if (is_at "plush_alcove") {
               : print "The window is square, quite old and letting in a fair amount of light from outside.";
               : done;
            }
            : else_if (is_at "toilet_cubicle") {
               : print "The window is sealed shut after it closed when you entered the cubicle.";
               : done;
            }
         }

          : match "read sign;exam sign" {
            : if (is_at "the_bar") {
               : print "Situated above the door. It's a helpful sign, in large red illuminated letters, which spells out 'EXIT' to show you that this door (to the west) would take you outside.";
               : done;
            }
         }
         
          : match "kick door" {
            : if (is_at "the_bar") {
               : print "The door swings out, then swings back, then swings out a bit less, then swings back an even smaller amount.\nEventually, it stops swinging.";
               : done;
            }
         }

          : match "open window" {
            : if (is_at "plush_alcove") {
               : print "You give up after a few seconds; it's stuck fast from being painted over many times.";
               : done;
            }
            : else_if (is_at "toilet_cubicle") {
               : print "The window seems to have stuck fast after you clambered through it.";
               : done;
            }
         }

          : match "break window" {
            : if (is_at "plush_alcove") {
               : print "On second thoughts, you decide that's not a good idea, it would attract attention.";
               : done;
            }
         }
         
          : match "exam window" {
            : if (is_at "games_area") {
               : print "The window is large and has a gloss white painted window frame, chipped and marked from people sitting on the ledge as an easy seat.\n It is letting in some light from outside.\nThe name of the pub is printed backwards in a half moon shape in stylish typography.";
               : done;
            }
         }
         
          : match "sit ledge;sit window" {
            : if (is_at "games_area") {
               : print "Now's not the time to sit around.";
               : done;
            }
         }
         
          : match "exam frame" {
            : if (is_at "games_area") {
               : print "Made from wood and painted a glossy white.";
               : done;
            }
         } 

          : match "exam ledge" {
            : if (is_at "games_area" && is_exists "instructions") {
               : print "Nothing interesting. It's plain white gloss emulsion coated wood.";
               : done;
            }
            : else_if (is_at "games_area" && !is_exists "instructions" && (toilets_talked_full)) {
               : print "It's plain white gloss emulsion coated wood.\nYou find some instructions leaning against the wall where the ledge and the wall meet.\nIt's probably from one of the entertainment pieces in here.";
               : create "instructions";
               : done;
            }
            : else_if (is_at "games_area" && !is_exists "instructions" && !(toilets_talked_full)) {
               : print "It's plain white gloss emulsion coated wood.\nAgainst the wall where the ledge and the wall meet there is a square of missing paint, like a shadow of something which isn't there.";
               : done;
            }
         } 

          : match "exam painting" {
            : if (is_present "painting") {
               : print "The painting above the bar is a landscape picture of a savannah, complete with scrubland, sparse trees and some wildlife running free.\nThe paint is laid in such a way the animals look almost life like in the gleaming sun beating down onto the dusty ground.\nIn the distance you can just make out some domes of a large, regal palace half way up a valley side.\nTruly a work of art.";
               : done;
            }
         } 

          : match "exam floor; search floor" {
            : if (is_at "zone_inside_pub" && !(is_at "games_area") || (is_at "short_corridor")) {
               : print "This part of the floor is solid floorboards, dulled by many feet passing.";
               : done;
            }
            : else_if (is_at "games_area" && !(is_exists "beermat") && !(is_exists "foldedbeermat")) {
               : print "This part of the floor is some kind of linoleum effect covering which hasn't stood the test of time half as well as the wood flooring.\nYou find a discarded beermat.";
               : create "beermat";
               : done;
            }
            : else_if (is_at "games_area" && ((is_exists "beermat") || (is_exists "foldedbeermat"))) {
               : print "This part of the floor is some kind of linoleum effect covering which hasn't stood the test of time half as well as the wood flooring.";
               : done;
            }
            : else_if (is_at "behind_bar") {
               : print "Sticky with old beer.";
               : done;
            }
         } 

          : match "exam barman" {
            : if (is_present "barman") {
               : print "The barman is a stout man with a goatie beard and long ratty hair.\nHe's wearing a black goth metal t-shirt, a stained apron and has tattoos up and down his arms.\nHe tries to ignore your staring.";
               : done;
            }
         } 

          : match "buy drink;buy beer;buy stout;buy lager;buy stout;buy ale; buy real;buy realale;buy lemonade;buy whisky;buy whiskey;buy coke;buy cola;buy water;buy orange;buy ginger;buy apple;buy lemon;buy j20;buy crisps;buy nuts;buy food" {
            : if (is_at "the_bar" && is_present"barman") {
               : print "You scrabbled through your pockets but have no means of paying.\nThe barman looks on in dismay and shakes his head, 'Now, now sir, no trying it on. We don't give credit here.'\nMaybe if you could sneak behind the bar...";
               : done;
            }
            : else_if (is_at "zone_bar" && (!(is_present"barman"))) {
               : print "You scrabbled through your pockets but have no means of paying.";
               : done;
            }
         } 

         : match "give glass to bartender;give bartender the glass" {
            : if (is_carried "glass" && is_present "barman" && !(tv_on)) {
               : print "You give the pint glass to the barman. He raises his eyebrow as he rotates it in the light to get a good look.\n'Blimey, where did you get this from? It's one of the original designs from before I started running this place. I must add it to my collection. Thank you, thank you.'\nHe promptly leaves smiling, happy with the glass in hand, but not before turning on the tv.\n'Here, keep yourself occupied while I'm away', he says with a broad grin.";
               : destroy "glass";
               : destroy "barman";
               : set_true "tv_on";
               : unblock "behind_bar";
               : done;
            }
            : else_if (is_carried "glass" && is_present "barman" && (tv_on)) {
               : print "You give the pint glass to the barman. He raises his eyebrow as he rotates it in the light to get a good look.\n'Blimey, where did you get this from? It's one of the original designs from before I started running this place. I must add it to my collection. Thank you, thank you.'\nHe promptly leaves smiling, happy with the glass in hand.";
               : destroy "glass";
               : destroy "barman";
               : unblock "behind_bar";
               : done;
            }
         }
         : match "give _ to bartender" {
            : if (is_present "barman") {
               : print "The barman shows disinterest in your offering and carries on with his tasks.";
               : done;
            }
         } 

         : match "give documents to vagrant" {
            : if (is_present "vagrant" && is_at "pub_steps" && is_carried "documents") {
               : print "The vagrant stirs slightly as you attempt to give the documents to him. You sense vague interest there.";
               : done;
            }
         } 
         
         : match "give _ to vagrant" {
            : if (is_present "vagrant") {
               : print "The vagrant hardly notices you with his worn out eyes and dribble encrusted beard.";
               : done;
            }
         } 

          : match "exam clockface;exam face;exam time" {
            : if (is_present "wallclock"  && (clock_time_set == 824)) {
               : print "You examine the clock more closely, specifically the clock's face. It does indeed look to be made of ivory with black roman numerals around the edge.\nThe hands are made of copper or brass and are similarly exquisite.\nThe time is 8:24.";
               : done;
            }
            : else_if (is_present "wallclock" && (clock_time_set ==12)) {
               : print "You examine the clock more closely, specifically the clock's face. It does indeed look to be made of ivory with black roman numerals around the edge.\nThe hands are made of copper or brass and are similarly exquisite.\nThe time is set to XII.";
               : done;
            }
            : else_if (is_present "wallclock" && (clock_time_set ==3)) {
               : print "You examine the clock more closely, specifically the clock's face. It does indeed look to be made of ivory with black roman numerals around the edge.\nThe hands are made of copper or brass and are similarly exquisite.\nThe time is set to III.";
               : done;
            }
            : else_if (is_present "wallclock" && (clock_time_set == 6)) {
               : print "You examine the clock more closely, specifically the clock's face. It does indeed look to be made of ivory with black roman numerals around the edge.\nThe hands are made of copper or brass and are similarly exquisite.\nThe time is set to VI.";
               : done;
            }
            : else_if (is_present "wallclock" && (clock_time_set == 9)) {
               : print "You examine the clock more closely, specifically the clock's face. It does indeed look to be made of ivory with black roman numerals around the edge.\nThe hands are made of copper or brass and are similarly exquisite.\nThe time is set to IX.";
               : done;
            }
         }

          : match "exam wallclock" {
            : if (is_present "wallclock") {
               : print "The wallclock is a beautifully carved, ornate pendulum driven time piece.\nThe slow tick tock noise produced by the hollow body is like a heart beat.\nThe clockface looks to be made of ivory with black roman numerals around the edge.\nThe hands are made of copper or brass and are similarly exquisite.";
               : done;
            }
            : else_if (is_at "mirror_room") {
               : print "Even at this distance, the wallclock looks a beautiful piece of timekeeping.";
               : done;
            }
         }

          : match "set time to 12;set clock to 12;change time to 12;change clock to 12" {
            : if (is_present "wallclock" && !(pendulum_on) && !(clock_time_set == 12)) {
               : print "Time changed to XII.";
               : set_integer  var="clock_time_set" value="12";
               : done;
            }
            : else_if (is_present "wallclock" && (pendulum_on)) {
               : print "The hands are stuck and won't move.";
               : done;
            }
            : else_if (is_present "wallclock" && !(pendulum_on) && (clock_time_set == 12)) {
               : print "The hands are already pointing to XII.";
               : done;
            }
         }
          : match "set time to 3;set clock to 3;change time to 3;change clock to 3" {
            : if (is_present "wallclock" && !(pendulum_on) && !(clock_time_set == 3)) {
               : print "Time changed to III.";
               : set_integer  var="clock_time_set" value="3";
               : done;
            }
            : else_if (is_present "wallclock" && (pendulum_on)) {
               : print "The hands are stuck and won't move.";
               : done;
            }
            : else_if (is_present "wallclock" && !(pendulum_on) && !(clock_time_set == 3)) {
               : print "The hands are already pointing to III.";
               : done;
            }
         } 
          : match "set time to 6;set clock to 6;change time to 6;change clock to 6" {
            : if (is_present "wallclock" && !(pendulum_on) && !(clock_time_set == 6)) {
               : print "Time changed to VI.";
               : set_integer  var="clock_time_set" value="6";
               : done;
            }
            : else_if (is_present "wallclock" && (pendulum_on)) {
               : print "The hands are stuck and won't move.";
               : done;
            }
            : else_if (is_present "wallclock" && !(pendulum_on) && !(clock_time_set == 6)) {
               : print "The hands are already pointing to VI.";
               : done;
            }
         } 
          : match "set time to 9;set clock to 9;change time to 6;change clock to 6" {
            : if (is_present "wallclock" && !(pendulum_on) && !(clock_time_set == 9)) {
               : print "Time changed to IX.";
                : set_integer  var="clock_time_set" value="9";
               : done;
            }
            : else_if (is_present "wallclock" && (pendulum_on)) {
               : print "The hands are stuck and won't move.";
               : done;
            }
            : else_if (is_present "wallclock" && !(pendulum_on) && (clock_time_set == 9)) {
               : print "The hands are already pointing to IX.";
               : done;
            }
         } 
          : match "set time;set clock;set clockface;change time;change clockface;change clock" {
            : if (is_present "wallclock" && (pendulum_on)) {
               : print "The hands are stuck and won't move.";
               : done;
            }
            : else_if (is_present "wallclock" && !(pendulum_on)) {
               : print "You try to set the time of the clock to something random, but once set, the hands seem to have a life of their own and they spin out of your fingers back to their original position.\nRather than reyling on pot luck, you probably need to find something to actually set it to.";
               : done;
            }
         }
          : match "exam pendulum" {
            : if (is_present "wallclock" && (pendulum_on)) {
               : print "The pendulum swings contently to the ticking beat of time, one second per second.";
               : done;
            }
            : else_if (is_present "wallclock" && !(pendulum_on)) {
               : print "The pendulum is stationary.";
               : done;
            }
         } 

          : match "stop pendulum;stop clock" {
            : if (is_present "wallclock" && (pendulum_on)) {
               : print "You reach up and stop the pendulum. The silence is defeaning.";
               : set_false "pendulum_on";
               : done;
            }
            : else_if (is_present "wallclock" && !(pendulum_on)) {
               : print "The pendulum is already stopped.";
               : done;
            }
         }

          : match "start pendulum;swing pendulum;start clock" {
            : if (is_present "wallclock" && (pendulum_on)) {
               : print "The pendulum is already swinging.";
               : done;
            }
            : else_if (is_present "wallclock" && !(pendulum_on)) {
               : print "You start the pendulum swinging again, the satisfying motion is complimented by a fascinating tick tock sound.";
               : set_true "pendulum_on";
               : done;
            }
         }

          : match "exam table" {
            : if (is_present "table") {
               : print "It's a plain wooden table popular in pubs. It's been scuffed and scratched from use over the years. There's even some scratched graffiti which reads 'DF 4 AL' in a love heart. How romantic.";
               : done;
            }
         } 

          : match "exam mirror" {
            : if (is_present "mirror" && !(is_worn "monocle")) {
               : print "The mirror is large and has the name of the pub emblazoned across the reflective surface. The Brother's View.\nThe brown frame is so dark it almost looks black.\nIn the reflection you can see a wallclock behind you.";
               : create "wallclock";
               : done;
            }
            : else_if (is_present "mirror" && (is_worn "monocle")) {
               : print "The mirror is large and has the name of the pub emblazoned across the reflective surface. The Brother's View.\nThe brown frame is so dark it almost looks black.\nIn the reflection you can see a wallclock behind you.\nWith the monocle in, you also notice that the mirror is actually a plate of glass with depth behind it.\nYou can just make out some sort of room with dark walls and a hint of space.";
               : create "wallclock";
               : done;
            }
         } 
         : match "exam frame" {
            : if (is_present "mirror") {
               : print "Very dark wood indeed.";
               : done;
            }
         } 
          : match "exam dogtag;read dogtag" {
            : if (is_present "dogtag") {
               : print "Left behind by the barman presumably.\nThe dogtag is made from a dull metal and quite thin. It's on a long, bobbled metal chain.\nThe writing has not been stamped into the metal too well and is un-readable, but the logo seems to match the t-shirt the barman was wearing.";
               : done;
            }
         }

         : match "exam chain" {
            : if (is_present "dogtag") {
               : print "The chain is made of metal and looks unbreakable.";
               : done;
            }
         } 

         : match "break chain;detach chain;detach dogtag;break dogtag" {
            : if (is_carried "dogtag") {
               : print "The chain doesn't break as it's very strong.";
               : done;
            }
         } 

         : match "exam barbeque" {
            : if (is_present "barbeque") {
               : print "The barbeque is a solid metal type powered by gas, with a grill section at the top, food shelves on the side and some large doors below, taking up most of the space.\nThe large doors at the bottom which store the gas bottles are shut.\nThe whole thing is wedged across the pathway and looks well and truly stuck.";
               : done;
            }
         } 
         
         : match "exam grill" {
            : if (is_present "barbeque") {
               : print "The rusty grill is particularly dirty with bits of burnt something. It looks like it's been used a lot in its lifetime, though rarely cleaned.";
               : done;
            }
         } 

         : match "exam screws" {
            : if (is_present "barbeque") {
               : print "Flathead screws.";
               : done;
            }
         } 
         
          : match "exam doors" {
            : if (is_present "barbeque" && !(bbq_open)) {
               : print "The large doors at the bottom of the barbeque which store the gas are shut.\nYou notice they are attached to the main body by screws.";
               : done;
            }
            : else_if (is_present "barbeque" && (bbq_open)) {
               : print "The large doors are open. Luckily there's no gas bottles in there, so you can see daylight through the other side.";
               : done;
            }
         }
          : match "move barbeque;push barbeque;pull barbeque" {
            : if (is_present "barbeque") {
               : print "You pull, then push, then pull and push hard to try and dislodge the barbeque from its resting place.\nAfter a few minutes you give up, it really won't move an inch.";
               : done;
            }
         }

          : match "climb barbeque" {
            : if (is_present "barbeque") {
               : print "You try and climb over the barbeque but it's way too slippery and there's not really anything to grab a hold of.";
               : done;
            }
         }

          : match "jump barbeque" {
            : if (is_present "barbeque") {
               : print "You take a running jump attempting to clear the barbeque.\n Alas, you collide with the metal structure which clangs loudly and you end up sprawled on the ground.\nYou stand up, somewhat sheepishly.";
               : done;
            }
         }

          : match "open doors with dogtag;open barbeque with dogtab;unlock doors with dogtag;unscrew doors with dogtag;unscrew screws with dogtag;unscrew screw with dogtag" {
            : if (is_present "barbeque" && is_carried "dogtag" && !(bbq_open)) {
               : print "Fiddly though it is, you manage to use the dogtag to unscrew the screw of the doors.\nThey drop off and you can see light and passage through to the other side.";
#               : destroy "barbeque";
               : set_true "bbq_open";
               : unblock "small_pathway";
               : done;
            }
            : else_if (is_present "barbeque" && (is_carried "dogtag") && (bbq_open)) {
               : print "You've already got the doors open. You can see daylight through them.";
               : done;
            }
         } 
# TODO Logic isn't 100%
            : match "open doors;open barbeque" {
            : if (is_present "barbeque" && (bbq_open)) {
               : print "You have already opened the doors in the barbeque.";
               : done;
            }
            : else_if (is_present "barbeque" && !(bbq_open)) {
               : print "The large doors won't budge.";
               : done;
            }
         } 
         
          : match "exam logs" {
            : if (is_present "fireplace") {
               : print "Upon closer inspection you see that the logs are actually fake and it's a gas fire in an authentic looking surround.";
               : done;
            }
         }
         
          : match "light fire" {
            : if (is_present "fireplace") {
               : print "You contemplate lighting the fire - you are feeling cold to the bone, exhausted and wildly confused. But realise the owners wouldn't like it.";
               : done;
            }
         }
         
          : match "exam surround" {
            : if (is_present "fireplace") {
               : print "Authentic looking. Shame it's a gas fire.";
               : done;
            }
         } 
         
          : match "exam fireplace" {
            : if (is_present "fireplace") {
               : print "The fireplace is black metal and filled with unused logs.\nIt looks more decorative than used.";
               : done;
            }
         } 
          : match "exam pew" {
            : if (is_at "plush_alcove") {
               : print "Comfortable considering it's made out solid oak.";
               : done;
            }
            : else_if (is_present "wallclock" && !(pendulum_on)) {
               : print "The pendulum is stationary.";
               : done;
            }
         } 

          : match "fold newspaper" {
            : if (is_carried "newspaper") {
               : print "You fold the newspaper into a neat, flat square of paper.";
               : destroy "newspaper";
               : create "foldednewspaper" target = "inventory";
               : done;
            }
            : if (is_carried "foldednewspaper") {
               : print "There's no way you can fold it anymore.";
               : done;
            }
         }

          : match "unfold newspaper" {
            : if (is_carried "foldednewspaper") {
               : print "You unfold the newspaper back to roughly its original shape.";
               : destroy "foldednewspaper";
               : create "newspaper" target = "inventory";
               : done;
            }
            : if (is_carried "newspaper") {
               : print "You can't unfold that which is not folded.";
               : done;
            }
         }
         
          : match "fold beermat" {
            : if (is_carried "beermat") {
               : print "You fold the beermat into quarters, quite a sizeable chunk of cardboard is created.";
               : destroy "beermat";
               : create "foldedbeermat" target = "inventory";
               : done;
            }
            : if (is_carried "foldedbeermat") {
               : print "There's no way you can fold it anymore.";
               : done;
            }
         }

          : match "unfold beermat" {
            : if (is_carried "foldedbeermat") {
               : print "You unfold the beermat back to roughly its original shape.";
               : destroy "foldedbeermat";
               : create "beermat" target = "inventory";
               : done;
            }
            : if (is_carried "beermat") {
               : print "You can't unfold that which is not folded.";
               : done;
            }
         }
         
          : match "tear beermat" {
            : if (is_carried "beermat") {
               : print "You tear the beermat into quarters, quite a sizeable chunk of cardboard is created.";
               : destroy "beermat";
               : create "cardboard" target = "inventory";
               : done;
            }
            : if (is_carried "foldedbeermat") {
               : print "You can't really easily tear the beermat - it's folded.";
               : done;
            }
         }

         : match "tear cardboard" {
            : if (is_carried "cardboard") {
               : print "You can't tear the cardboard anymore.";
               : done;
            }
         } 

          : match "tear newspaper" {
            : if ((is_carried "newspaper") || (is_carried "foldednewspaper")) {
               : print "Newspapers contain information. And information is what you need to unravel this mystery.";
               : done;
            }
         } 

          : match "exam mantelpiece" {
            : if (is_present "fireplace") {
               : print "The mantelpiece looks to be made of some sort of stone. Possibly blended sandstone. It is slightly rough but is a nice dark orange colour.";
               : done;
            }
         } 

          : match "exam hearth" {
            : if (is_present "fireplace") {
               : print "The hearth looks the same colour as the mantelpiece. A dusty orange colour.\nInstead of solid stone this is made from tiles. It suits the overall decor of the fireplace.";
               : done;
            }
         }
         
          : match "exam panel;exam display" {
            : if (is_present "panel") {
               : print "The display panel, which acts as an interesting light source around its border, is embedded in the wall and consists of four equal segments. Each segment has a smaller square which comprises of a certain type of rock. From top left to bottom right: amber, sandstone, opal and limestone.\nA small slate plaque is situated at the top of the display.";
#               : print { text_dynamic {( (display_open ? "true" : "false"))}}
               : create "amberpanel";
               : create "sandstonepanel";
               : create "opalpanel";
               : create "limestonepanel";
               : create "plaque";
               : done;
            }
            : else_if ((!is_present "panel") && is_at "short_corridor") {
               : print "It lowered into the ground after being opened.";
               : done;
            }
         }

          : match "exam segments;exam segment;exam square;exam squares" {
            : if (is_present "amberpanel") {
               : print "Each segment has a smaller square which comprises of a certain type of rock. From top left to bottom right: amber, sandstone, opal and limestone.";
               : done;
            }
         }

          : match "exam amber" {
            : if (is_present "amberpanel" && (amber_1_on)) {
               : print "The first panel is comprised of pieces of varied coloured amber. Ranging from almost white to a yellow-orange-brown appearance, some appear transparent and some not.\nYou can't help marvelling at the sheer beauty of the texture and colouring.\nThe panel is lit, accentuating the beauty of the rocks.";
               : done;
            }
            : else_if (is_present "amberpanel" && !(amber_1_on)) {
               : print "The first panel is comprised of pieces of varied coloured amber. Ranging from almost white to a yellow-orange-brown appearance, some appear transparent and some not.\nYou can't help marvelling at the sheer beauty of the texture and colouring.";
               : done;
            }
         } 

          : match "exam sandstone" {
            : if (is_present "sandstonepanel" && (sandstone_2_on)) {
               : print "The second panel is made from pieces of sandstone. It is a rough light-red rock quite dusty to the touch.\nA stark rock which would sit well in a desert.\nThe panel is lit, highlighting the redness from behind.";
               : done;
            }
            : else_if (is_present "sandstonepanel" && !(sandstone_2_on)) {
               : print "The second panel is made from pieces of sandstone. It is a rough light-red rock quite dusty to the touch.\nA stark rock which would sit well in a desert.";
               : done;
            }
         }
         
          : match "exam opal" {
            : if (is_present "opalpanel" && (opal_3_on)) {
               : print "This panel is milky opal. The rock emits a pearlescent glow of subtle lighting.\nA beautiful array of colours, different from each viewing angle.\nIlluminated by the panel, the multi-coloured effect looks stunning.";
               : done;
            }
            : else_if (is_present "opalpanel" && !(opal_3_on)) {
               : print "This panel is milky opal. The rock emits a pearlescent glow of subtle lighting.\nA beautiful array of colours, different from each viewing angle.";
               : done;
            }
         }

          : match "exam limestone" {
            : if (is_present "limestonepanel" && (limestone_4_on)) {
               : print "The last panel is made from pieces of limestone. It is a rough light-grey rock; dusty to the eye, but not to the touch.\nCoarse beauty and simplicity in one package which is brought out even more by the panel being lit up.\nIt even has an impression of a plant fossil embedded in the rock.";
               : done;
            }
            : else_if (is_present "limestonepanel" && !(limestone_4_on)) {
               : print "The last panel is made from pieces of limestone. It is a rough light-grey rock; dusty to the eye, but not to the touch.\nCoarse beauty and simplicity in one package.";
               : done;
            }
         }
         
          : match "exam fossil" {
            : if (is_present "limestonepanel") {
               : print "A small whorl of petrified plant, millions of years old.";
               : done;
            }
         } 
         
          : match "exam plaque;exam slate;read plaque;read slate" {
            : if (is_present "plaque") {
               : print "As you thought, the plaque is made from back-grey slate. You also notice it is worn slightly, and seems to have finger marks across its front.\n It has etched into it words which read, 'Natural Rocks and Ancient Stones'";
               : done;
            }
         }
          : match "press plaque; press slate" {
            : if (is_present "plaque" && ((amber_1_on) || !(sandstone_2_on) || !(opal_3_on) || (limestone_4_on))) {
               : print "You hear a click somewhere in the wall.\nAll the panels go dark.";
               : set_false "amber_1_on";
               : set_false "sandstone_2_on";
               : set_false "opal_3_on";
               : set_false "limestone_4_on";
               : done;
            }
            : else_if (is_present "plaque" && !(amber_1_on) && (sandstone_2_on) && (opal_3_on) && !(limestone_4_on)) {

               : print "You barely touch the plaque. You hear a click-whirr-jolt and behind the wall there is a slight shake as if a heavy piece of machinery or similar dislodges and rearranges itself.\nAnother clunk and slowly the rock display lowers into the ground.";
               : set_false "amber_1_on";
               : set_false "sandstone_2_on";
               : set_false "opal_3_on";
               : set_false "limestone_4_on";
               : set_true "display_open";
               : destroy "panel";
               : destroy "amberpanel";
               : destroy "sandstonepanel";
               : destroy "opalpanel";
               : destroy "limestonepanel";
               : destroy "plaque";
               : create "cubbyhole";
               : done;
            }
         }
#ENTRY DOOR
# TODO monocle check - not worn=DOOR not close

#ACTIVATE
# TODO Pendulum moving to BUTTON ILLUMINATED
# TODO Pendulum not moving NOT ILLUMINATED/NOTHING HAPPENS
# TODO 824 NOTHING HAPPENS = ILLUMINATED/NOTHING HAPPENS
# TODO !824 and Pendulum moving = ILLUMINATED/ACTIVATE

          : match "e_;east_;enter_" {
            : if (is_present "cubbyhole" && (display_open) && (is_worn "monocle" )) {
               : print "You get down on your hands and knees and shuffle through the entrance into the cubby-hole.";
               : press_any_key;
               : print "As soon as you enter the room and stand up, the opening you came through shimmers and solidifies blocking the way back.";
               : press_any_key;
               : goto "mirror_room";
               : set_false "display_open";
               : redescribe;
               : done;
            }
            : else_if (is_present "cubbyhole" && (display_open) && (!is_worn "monocle")) {
               : print "You get down on your hands and knees and shuffle through the entrance into the cubby-hole.";
               : press_any_key;
               : goto "mirror_room";
               : set_true "display_open";
               : redescribe;
               : done;
            }
         }
         
         : match "w_;west_;exit _" {
           //: match "w_;west_;out _;exit_" {
            : if (is_at "mirror_room" && ((display_open) || !(is_worn "monocle"))) {
               : print "You slowly walk towards the wall which you came in though, and even though it looks solid, it lets you pass through.";
               : press_any_key;
               : goto "short_corridor";
               : redescribe;
               : done;
            }
         }
          : match "exam cubbyhole" {
            : if (is_present "cubbyhole") {
               : print "It's quite low in the wall, about waist height. You'd have to duck to go through.\nIt is slightly brighter in there than it is out here, now that the display is not illuminating the area.\nInside you catch sight of a black floor and black walls, with kind of a matte, dull sheen to it.";
               : done;
            }
         }
          : match "exam button" {
            : if (is_present "button" && (pendulum_on) && (clock_time_set != 824) && (is_worn "monocle") ) {
               : print "A large matt black button, almost hidden against the matt black console.\nIt an odd shape of different angles and has a dimpled surface, reflecting what light there is into a miriade of sparkling hues.\nWithin it you see it is pulsing white.";
               : done;
            }
            : else_if (is_present "button") {
               : print "A large matt black button, almost hidden against the matt black console.\nIt an odd shape of different angles and has a dimpled surface, reflecting what light there is into a miriade of sparkling hues.\nWithin it you see it is pulsing red.";
               : done;
            }
         }
          : match "press button" {
            : if (is_present "button" && (pendulum_on) && (clock_time_set == 12) && (is_worn "monocle") ) {
               : print "You reach forward and hesitantly spread your fingers and apply pressure to the button. It gives slightly and BOOM! 12";
               : press_any_key;
               : goto "skytrain_station_upper";
               : redescribe;
               : done;
            }
            : else_if (is_present "button" && (pendulum_on) && (clock_time_set == 3) && (is_worn "monocle") ) {
               : print "You reach forward and hesitantly spread your fingers and apply pressure to the button. It gives slightly and BOOM! 3";
               : press_any_key;
               : goto "skytrain_station_mid";
               : redescribe;
               : done;
            }
            : else_if (is_present "button" && (pendulum_on) && (clock_time_set == 6) && (is_worn "monocle") ) {
               : print "You reach forward and hesitantly spread your fingers and apply pressure to the button. It gives slightly and BOOM! 6";
               : press_any_key;
               : goto "skytrain_station_lower";
               : redescribe;
               : done;
            }
            : else_if (is_present "button" && (pendulum_on) && (clock_time_set == 9) && (is_worn "monocle") ) {
               : print "You reach forward and hesitantly spread your fingers and apply pressure to the button. It gives slightly and BOOM! 9";
               : done;
            }
            : else_if (is_present "button") {
               : print "You reach forward and hesitantly spread your fingers and apply pressure to the button. It gives slightly but nothing happens.";
               : done;
            }
         }
          : match "exam console" {
            : if (is_present "console") {
               : print "It's black and oblong and positioned below the screen.";
               : done;
            }
         }
          : match "exam screen" {
            : if (is_present "screen") {
               : print "Built into the south wall, it takes up most of the space. On it you can see the alcove you were sitting in earlier, with the wallclock dead-centre, as if you are looking through the mirror itself.";
               : done;
            }
         }
          : match "press amber" {
            : if (is_present "amberpanel" && (amber_1_on)) {
               : print "You touch the amber panel. The sparkled colour goes out.";
               : set_false "amber_1_on";
               : done;
            }
            : else_if (is_present "amberpanel" && !(amber_1_on)) {
               : print "You touch the amber panel. It emits colourful sparkles.";
               : set_true "amber_1_on";
               : done;
            }
         }
          : match "press sandstone" {
            : if (is_present "sandstonepanel" && (sandstone_2_on)) {
               : print "You touch the sandstone panel. It shimmers out.";
               : set_false "sandstone_2_on";
               : done;
            }
            : else_if (is_present "sandstonepanel" && !(sandstone_2_on)) {
               : print "You touch the sandstone panel. It shimmers on.";
               : set_true "sandstone_2_on";
               : done;
            }
         }

          : match "press opal" {
            : if (is_present "opalpanel" && (opal_3_on)) {
               : print "You touch the opal panel. It goes dark.";
               : set_false "opal_3_on";
               : done;
            }
            : else_if (is_present "opalpanel" && !(opal_3_on)) {
               : print "You touch the opal panel. It glows.";
               : set_true "opal_3_on";
               : done;
            }
         }

          : match "press limestone" {
            : if (is_present "limestonepanel" && (limestone_4_on)) {
               : print "You touch the limestone panel. It goes out.";
               : set_false "limestone_4_on";
               : done;
            }
            : else_if (is_present "limestonepanel" && !(limestone_4_on)) {
               : print "You touch the limestone panel. It illuminates.";
               : set_true "limestone_4_on";
               : done;
            }
         } 
         
          : match "press panel" {
            : if (is_present "panel") {
               : print "You press, push and finger around the glowing edge of the main panel display, but find nothing interesting. Just the slate plaque and the four segments within.";
               : done;
            }
         } 

          : match "open door" {
            : if (is_at "short_corridor" && (toilet_blocked)) {
               : print "You try to open the door. It opens a small crack, but is pushed back.\n'Oi, don't you understand English?', a voice says from behind the door.";
               : done;
            }
            : else_if (is_at "short_corridor" && !(toilet_blocked)) {
               : print "The door is already open.";
               : done;
            }
         }
          : match "exam door" {
            : if (is_at "short_corridor" && (toilet_blocked)) {
               : print "The door is a common wooden one painted an off-white. It is currently closed and being blocked by someone on the other side.";
               : done;
            }
            : else_if (is_at "short_corridor" && !(toilet_blocked)) {
               : print "The door is a common wooden one painted an off-white. It is open and through it you can see the toilets of this establishment.";
               : done;
            }
            : else_if (is_at "toilet_cubicle") {
               : print "A piece of plywood painted white. It's mounted on springloaded hinges.";
               : done;
            }
         }
         : match "knock door" {
            : if (is_at "short_corridor" && (toilet_blocked)) {
               : print "You knock on the door, stand back. But nothing happens.";
               : done;
            }
            : else_if (is_at "short_corridor" && !(toilet_blocked)) {
               : print "Nothing happens.";
               : done;
            }
            : else_if (is_at "toilet_cubicle" && !(cubicle_open)) {
               : print "You decide to be quiet, so no knocking on the cubicle door.";
               : done;
            }
            : else_if (is_at "toilet_cubicle" && (cubicle_open)) {
               : print "Nothing happens.";
               : done;
            }
         }

         : match "kick door" {
            : if (is_at "short_corridor" && (toilet_blocked)) {
               : print "You strike the door but it stays where it is. No response from behind the door either.";
               : done;
            }
            : else_if (is_at "short_corridor" && !(toilet_blocked)) {
               : print "Nothing happens.";
               : done;
            }
            : else_if (is_at "toilet_cubicle" && !(cubicle_open)) {
               : print "You decide to be quiet, so no kicking the cubicle door.";
               : done;
            }
            : else_if (is_at "toilet_cubicle" && (cubicle_open)) {
               : print "Nothing happens.";
               : done;
            }
         }
         
         : match "pull door" {
            : if (is_at "short_corridor" && (toilet_blocked)) {
               : print "You pull at the door, but it's being held from the inside. Someone is breathing hard and exerting themselves by the sound of it.";
               : done;
            }
            : else_if (is_at "short_corridor" && !(toilet_blocked)) {
               : print "You pull the door.";
               : done;
            }
         }

          : match "exam tshirt" {
            : if (is_present "barman") {
               : print "Your normal black goth look t-shirt. A bit tatty but the look fits in well with the locals.\nA white logo adorns the centre, made up of a circle with a prism in the middle and fangs underneath.";
               : done;
            }
         } 

          : match "exam tattoos" {
            : if (is_present "barman") {
               : print "They adorn the barman's arms, disappearing under his tshirt.\nMost show different designs of snakes, some of which are eating their own tail.\nOthers are the infinity sign, a looping figure of eight on its side.";
               : done;
            }
         } 

          : match "exam apron" {
            : if (is_present "barman") {
               : print "Nothing special. Just an off-white apron which could just as easily be in a woodwork group.";
               : done;
            }
         } 
         
          : match "exam bar;exam bartop" {
            : if (is_at "zone_bar" && !is_at "the_bar") {
               : print "It's a heavily varnished, deep brown colour.";
               : done;
            }
            : else_if (is_at "zone_bar" && is_at "the_bar" && is_present "socket") {
               : print "It's a heavily varnished, deep brown colour.";
               : done;
            }
            : else_if (is_at "zone_bar" && is_at "the_bar" && !is_present "socket") {
               : print "It's a heavily varnished, deep brown colour. There is an electrical socket about three quarters of the way down the bar, near the floor.";
               : create "socket";
               : done;
            }
         } 
          : match "exam bottles" {
            : if (is_at "zone_bar") {
               : print "Many a design and many a colour. More than ten.";
               : done;
            }
         } 
          : match "exam glasses" {
            : if (is_at "zone_bar") {
               : print "There are a lot of different kinds of glasses on the shelves.\nEven some of the old dimpled ale glasses you rarely see nowerdays.";
               : done;
            }
         } 

          : match "exam pumps" {
            : if (is_at "the_bar") {
               : print "There are a few pumps around the bar. You couldn't reach them from this side, even if you tried.";
               : done;
            }
            : else_if (is_at "behind_bar") {
               : print "There are a few beer and ale pumps here. TODO MORE DESC";
               : done;
            }
         } 
          : match "exam shelf;exam shelves;exam nooks;exam crannies" {
            : if (is_at "the_bar") {
               : print "Holds various bottles of alcoholic beverages. You notice nothing else of importance. Bit gloomy there.";
               : done;
            }
            : else_if (is_at "behind_bar") {
               : print "You can see that there is a wide variety of different bottles on the shelves, and in the nooks and crannies, which hold alcoholic beverages and non-alcoholic beverages.\nYou notice nothing else. Bit gloomy there.";
               : done;
            }
         } 
          : match "exam till" {
            : if (is_at "zone_bar") {
               : print "The till is an old fashioned, mechanical one, with big, chunky keys which need to be pressed deep to get them to register.\nIt even includes the window with the pop up numbers telling you how much you are being charged.";
               : done;
            }
         } 

          : match "open till" {
            : if (is_at "zone_bar") {
               : print "The till is either one for 'show', or it's stuck fast.";
               : done;
            }
         } 
          : match "exam dartboard" {
            : if (is_at "games_area") {
               : print "The dartboard is the typical red and black design, with numbers from one to twenty around the edge.\nNumbers eight and twenty-four are particularly worn.\nTwenty four?";
               : done;
            }
         }
          : match "exam stage" {
            : if (is_at "games_area") {
               : print "Really part of the games area, but is cordoned off by floor lights when used.";
               : done;
            }
         }
          : match "exam speakers" {
            : if (is_at "games_area") {
               : print "The speakers are heavy duty for a small venue like this. Four in number with two on each side of the stage. All the better for creating a pounding noise.";
               : done;
            }
         }
          : match "exam piano" {
            : if (is_at "games_area") {
               : print "The piano is a stand up version. Reminiscent of old cowboy bars.\nA beautiful wood finish with apparently ivory keys.\nIt is in fine condition, the keys almost sparkle.";
               : done;
            }
         } 
          : match "exam games" {
            : if (is_at "games_area") {
               : print "The board games are varied. Ranging from Chess and Draughts to more complex ones like Othello and Mastermind. There's also some puzzles scattered around.";
               : done;
            }
         }
          : match "play games" {
            : if (is_at "games_area") {
               : print "You wistfully wish you could have a go on one or more of these games. But you have more pressing matters to attend to.";
               : done;
            }
         }
          : match "play chess;play draughts;play othello;play reversi;play mastermind;play pool;play darts" {
            : if (is_at "games_area") {
               : print "You look forward to playing some games when things are back to normal.";
               : done;
            }
         }
          : match "exam pool;exam table" {
            : if (is_at "games_area") {
               : print "A nice, robust pool table with a blue coloured cloth. It's a bit faded near the middle and there's a few stains here and there.";
               : done;
            }
         }
          : match "exam chess" {
            : if (is_at "games_area") {
               : print "A board game of strategic skill for two players, played on a chequered board on which each playing piece is moved according to precise rules. The object is to put the opponent's king under a direct attack from which escape is impossible (checkmate).";
               : done;
            }
         }
          : match "exam draughts" {
            : if (is_at "games_area") {
               : print "A board game for two players, played on a draughtboard. Each player starts with twelve disc-shaped pieces in three rows along one side of the board, and moves them diagonally with the aim of capturing all the opponent's pieces.";
               : done;
            }
         }
          : match "exam othello" {
            : if (is_at "games_area") {
               : print "A derivitive of Reversi, this game is played on an 8x8 board with black-and-white pieces, or stones. The object is to have more of your color of stones on the board than your opponent. Stones can be reversed from one color to another by surrounding the pieces.";
               : done;
            }
         } 
          : match "exam mastermind" {
            : if (is_at "games_area") {
               : print "Guess the color of hidden pegs. A deduction game where each player takes turn making a limited number of guesses, using logic to deduce what pegs the opponent has hidden.";
               : done;
            }
         } 

 
          : match "exam television" {
            : if (is_present "barman" && is_present "television" && !(tv_on)) {
               : print "The television on the bar wall is a suprisingly flat and thin one and you see no buttons to change channels or tune it in.\nThe bartender notices you staring at the screen and turns the tv on for you using the bar remote. The screen flickers to life.\n'Here, use this. Change the channel by pressing up or pressing down.'\nHe hands you the remote.";
               : create "remote" target="inventory";
               : set_true "tv_on";
               : done;
            }
            : else_if (is_present "television" && (tv_on)) {
               : print "The clarity of the picture is amazing, you notice no fuzziness in the picture.\nWhat you do notice, however, is a familiar feeling of dread as the same scene repeats over and over.\n A desert scene, a car stopped on the side of the road, wind whipping across the screen. A dark figure emerges from the car fighting against the wind.\nThe figure crosses away from the car and disappears off camera into the storm.\nThe scene then goes static and resets and repeats.";
               : done;
            }
            : else_if (!(is_present "barman") && is_present "television" && !(tv_on)) {
               : print "The television on the bar wall is a suprisingly flat and thin one and you see no buttons to change channels or tune it in.\nThe screen is blank.";
               : done;
            }
         } 
          : match "channel up" {
            : if ((is_present "television") && is_carried "remote" && (tv_on)) {
               : print "The screen flickers as it changes up a channel. A glimpse of a soil filled eye socket.\nThe previous scene continues on playing.";
               : done;
            }
            : else_if ((is_present "television") && !(is_carried "remote") && (tv_on)) {
               : print "You'll need a remote control  to do that.";
               : done;
            }
            : else_if ((is_present "television") && !(is_carried "remote") && !(tv_on)) {
               : print "The tv isn't switched on and besides, you have no remote control.";
               : done;
            }
            : else_if (!(is_present "television") && (is_carried "remote")) {
               : print "You press the button on the remote control but nothing happens.";
               : done;
            }
         }

          : match "change channel" {
           : if ((is_present "television") && is_carried "remote" && (tv_on)) {
               : print "The instruction on the remote say to use channel up or channel down.";
               : done;
            }
            : else_if ((is_present "television") && !(is_carried "remote") && (tv_on)) {
               : print "You'll need a remote control to do that.";
               : done;
            }
            : else_if ((is_present "television") && !(is_carried "remote") && !(tv_on)) {
               : print "The tv isn't switched on and besides, you have no remote control.";
               : done;
            }
            : else_if (!(is_present "television") && (is_carried "remote")) {
               : print "You press the buttons on the remote control but nothing happens.";
               : done;
            }
         } 
 
          : match "channel down" {
            : if ((is_present "television") && is_carried "remote" && (tv_on)) {
               : print "The screen flickers an image of a small, childlike hand, bones showing through the tips, as it changes down a channel.\nThe desert scene continues on playing.";
               : done;
            }
            : else_if ((is_present "television") && !(is_carried "remote") && (tv_on)) {
               : print "You'll need a remote control to do that.";
               : done;
            }
            : else_if ((is_present "television") && !(is_carried "remote") && !(tv_on)) {
               : print "The tv isn't switched on and besides, you have no remote control.";
               : done;
            }
            : else_if (!(is_present "television") && (is_carried "remote")) {
               : print "You press the button on the remote control but nothing happens.";
               : done;
            }
         } 
          : match "exam window" {
            : if (is_present "window" && (toilet_blocked)) {
               : print "The window is square and mottled. It opens vertically and is latched open.\nIt's just out of reach from ground level.";
               : done;
            }
            : else_if ((is_present "window") && !(toilet_blocked)) {
               : print "The window is square and mottled. It opens vertically and is now closed as it shut when you previously went through it.\nIt's just out of reach from ground level.";
               : done;
            }
            : else_if ((is_at "on_stool") && (toilet_blocked)) {
               : print "The window is reachable to enter.";
               : done;
            }
            : else_if ((is_at "on_stool") && !(toilet_blocked)) {
               : print "The window is stuck shut. You'll have to find another way in.";
               : done;
            }
         }
          : match "exam whiskey;exam bottle" {
            : if (is_present "whiskey") {
               : print "A large bottle of brown liquid. It's label says it's 95% proof. Woowee, this might be useful in times where some dutch courage is needed.";
               : done;
            }
         }
# TODO Whiskey - counter on slugs left.
#      Whiskey - counter on how drunk? But then need some sort of dyn description at each location? Or just 'You sit down and can't focus - so need to wait'
# For now, one drink and you're permenantly drunk
# TODO small nip in any location except cubicle - you take a great swig. then another great swig.
          : match "drink whiskey" {
            : if (is_present "whiskey") {
               : print "You unstopper the bottle and take a slug ot two. It has one powerful kickback.\n(10 more drinks available)";
               : set_true "is_drunk";
               : done;
            }
         }
          : match "put newspaper under stool" {
            : if (is_present "tree" && (is_carried "foldednewspaper" || is_carried "newspaper") && is_present "stool" && !is_carried "stool" ) {
               : print "The newspaper wouldn't do any good to support the stool and your weight as the soil is too sodden from recent rain.";
               : done; 
            }
            : else_if (is_present "window" && is_carried "foldednewspaper" && is_present "stool" && !is_carried "stool" ) {
               : print "Ah good thinking. That might stop the stool rocking.";

               : set_true "folded_newspaper_stool";
               : set_false "folded_beermat_stool";
               : set_false "beermat_stool";
               : set_false "newspaper_stool";
               : create "foldednewspaper";
               : done; 
            }
            : else_if (is_present "window" && is_carried "newspaper" && is_present "stool" && !is_carried "stool") {
               : print "Seems a bit thin to stop the stool rocking, but you try it anyway.";
               : set_false "folded_newspaper_stool";
               : set_false "folded_beermat_stool";
               : set_false "beermat_stool";
               : set_true "newspaper_stool";
               : create "newspaper";
               : done;
            }
            : else_if ((is_present "window" || is_present "tree") && is_carried "newspaper" && is_present "stool" && is_carried "stool") {
               : print "You would probably need to put the stool down first.";
               : done;
            }
            : else_if ((is_present "window" || is_present "tree") && is_carried "foldednewspaper" && is_present "stool" && is_carried "stool") {
               : print "You would probably need to put the stool down first.";
               : done;
            }
         } 

          : match "enter window;go window;climb window;jump window;enter _" {
            : if (is_at "on_stool" && (toilet_blocked)) {
               : print "You can now reach the window, so you precariously scrabble in from the stool.\nAs you go through, you have time to brace yourself somewhat from the short fall, and land quietly in a heap of arms and legs.\nThe window slams shut, not with a bang but with a suction sound.";
               : press_any_key;
               : goto "toilet_cubicle";
               : unblock "toilets";
               : set_false "toilet_blocked";
               : redescribe;
               : done;
            }
            : else_if (is_present "window" && !(on_stool)) {
               : print "The window is just out of reach.";
               : done;
            }
            : else_if (is_at "on_stool" && !(toilet_blocked)) {
               : print "The window is shut tight.";
               : done;
            }
         }
# TODO toilet cubicle area
# Differentiate NPC's location for this specific scene
# TALK and ASK to give information and next step/hints?
# 'We won't do all the talking this time, so ask away'
# From listening get
# LISTEN needs to do something else before entering
# COUNTER until they suspect you're in there (moral way)?
# DRINK WHISKY (immoral way)? or just two different solutions
          : match "south_;open door;open cubicle" {
            : if (is_at "toilet_cubicle" && (is_drunk) && !(cubicle_open)) {
               : print "Fortified by the whiskey you drank, you quietly, and very slowly, open the cubicle door.";
               : press_any_key;
               : print "And immediately see the priest from the desert.";
               : press_any_key;
               : set_integer  var="cubicle_counter" value="0";
               : set_true "cubicle_open";
               : goto "toilets";
               : create "priest";  # Priest UnstableManic, Evaluator
               : create "vagrant"; # Vagrant, Helper, Scripter
#               : create "biker";   # Biker Woman (Van) Baddie, Psychologist
               : create "woman";   # Blond Woman, Part 1 player, Artist
               : redescribe;
               : done;
            }
            : else_if (is_at "toilet_cubicle" && !(is_drunk) && !(cubicle_open)) {
               : print "You'd have to be drunk or something to do that. There's a massive row going on in there.";
               : done;
            }
            : else_if (is_at "toilet_cubicle" && (cubicle_open)) {
               : goto "toilets";
               : redescribe;
               : done;
            }
         }
         
          : match "jump down;down_;d_;exit stool;leave stool;leave_;exit_" {
            : if (is_at "on_stool") {
               : print "You jump down from the stool, disloging the folder beermat from under it as you land.";
               : press_any_key;
               : goto "small_pathway";
               : set_false "folded_beermat_stool";
               : redescribe;
               : done;
            }
         }
         # foldedbeermat same logic as cardboard
         : match "put beermat under stool" {
            : if (is_present "tree" && (is_carried "beermat" || is_carried "foldedbeermat") && is_present "stool" && !is_carried "stool") {
               : print "The ground is too mushy for the beermat to do any good.";
               : done;
            }
            : else_if (is_present "window" && is_carried "beermat" && is_present "stool" && !is_carried "stool") {
               : print "Ah good thinking. That might stop the stool rocking.";
               : set_false "folded_newspaper_stool";
               : set_false "folded_beermat_stool";
               : set_true "beermat_stool";
               : set_false "newspaper_stool";
               : create "beermat";
               : done;
            }
            : else_if (is_present "window" && is_carried "beermat" && is_present "stool" && is_carried "stool") {
               : print "You would probably need to put the stool down first.";
               : done;
            }
            : else_if (is_present "window" && is_carried "foldedbeermat" && is_present "stool" && !is_carried "stool") {
               : print "Ah good thinking. That might stop the stool rocking.";
               : set_false "folded_newspaper_stool";
               : set_true "folded_beermat_stool";
               : set_false "beermat_stool";
               : set_false "newspaper_stool";
               : create "foldedbeermat";
               : done;
            }
            : else_if ((is_present "window" || is_present "tree") && (is_carried "foldedbeermat" || is_carried "beermat")  && is_present "stool" && is_carried "stool") {
               : print "You would probably need to put the stool down first.";
               : done;
            }
         } 
         # Cardboard variant (acts as folder beermat)
         : match "put cardboard under stool" {
            : if (is_present "tree" && ( is_carried "cardboard") && is_present "stool" && !is_carried "stool") {
               : print "The ground is too mushy for the cardboard to do any good.";
               : done;
            }
            : else_if (is_present "window" && is_carried "cardboard" && is_present "stool" && !is_carried "stool") {
               : print "Ah good thinking. That might stop the stool rocking.";
               : set_false "folded_newspaper_stool";
               : set_true "folded_beermat_stool";
               : set_false "beermat_stool";
               : set_false "newspaper_stool";
               : create "cardboard";
               : done;
            }
            : else_if (is_present "window" && is_carried "cardboard" && is_present "stool" && is_carried "stool") {
               : print "You would probably need to put the stool down first.";
               : done;
            }
            : else_if ((is_present "window" || is_present "tree") && is_carried "cardboard"  && is_present "stool" && is_carried "stool") {
               : print "You would probably need to put the stool down first.";
               : done;
            }
         } 
         : match "jump down;down_;d_;exit stool;leave stool;leave_;exit_" {
            : if (is_at "on_stool") {
               : print "You jump down from the stool.";
               : press_any_key;
               : goto "small_pathway";
               : redescribe;
               : done;
            }
         }

         : match "exam cardboard" {
            : if (is_present "cardboard") {
               : print "Pieces of cardboard created when you ripped up the beermat.";
               : done;
            }
         }
         
          : match "stand stool;stand stool;climb stool;go stool;up stool" {
          //: match "stand stool;stand on the stool;climb stool;go stool;stand on;up stool" {
            : if (is_present "window" && (folded_beermat_stool)) {
               : print "You carefully stand on the stool. It seems stable.\nYou are now chest height to the window.";
               : press_any_key;
               : set_true "on_stool";
               : goto "on_stool";
               : redescribe;
               : done;
            }
            : else_if (is_present "window" && (folded_newspaper_stool) ) {
               : print "You carefully stand on the stool.\nIt rocks from side to side as you put your weight on it.\nThe folded newspaper slips out from under the stool, you lose your balance and the stool goes from under your feet.\nYou dust yourself off.";
               : set_false "on_stool";
               : set_false "folded_newspaper_stool";
               : done;
            }
            : else_if (is_present "window" && (beermat_stool) ) {
               : print "You carefully stand on the stool.\nIt rocks from side to side as you put your weight on it.\nThe beermat dislodges, you lose your balance and the stool goes from under your feet.\nYou dust yourself off.";
               : set_false "on_stool";
               : set_false "beermat_stool";
               : done;
            }
            : else_if (is_present "window" && (newspaper_stool) ) {
               : print "You carefully stand on the stool.\nIt rocks from side to side as you put your weight on it.\nThe newspaper made no difference. You lose your balance and the stool goes from under your feet.\nYou dust yourself off.";
               : set_false "on_stool";
               : set_false "newspaper_stool";
               : done;
            }
            : else_if ((is_present "window" || is_present "tree") && is_present "stool" && is_carried "stool") {
               : print "You should really put the stool down first.";
               : set_false "on_stool";
               : done;
            }
            : else_if (is_present "window" && is_present "stool" && !is_carried "stool") {
               : print "You carefully stand on the stool.\nIt rocks from side to side as you put your weight on it.\nYou lose your balance and the stool goes from under your feet.\nYou dust yourself off.";
               : set_false "on_stool";
               : done;
            }
            : else_if (!is_present "window" && !is_present "tree" && is_present "stool" && !is_carried "stool") {
               : print "Not the best place to stand on the stool.";
               : set_false "on_stool";
               : done;
            }
            : else_if (!is_present "window" && !is_present "tree" && is_present "stool" && is_carried "stool") {
               : print "Not the best place to stand on the stool.";
               : set_false "on_stool";
               : done;
            }
            : else_if (is_present "tree" && is_present "stool" && !is_carried "stool") {
               : print "The combination of the soil around the tree being thick mud from recent rain and balancing makes the stool even more uneven.\nThe stool topples over and you with it.";
               : set_false "on_stool";
               : done;
            }
            : else_if (is_at "on_stool" ) {
               : print "You already are.";
               : done;
            }
         } 

          : match "exam stool" {
            : if (is_present "woman" && is_at "plush_alcove") {
               : print "The woman is sitting on the stool, so you can't get a good look at it .";
               : done;
            }
            : if (is_present "stool") {
               : print "It's a smallish wooden stool with a curved top and four legs. It's been varnished so it almost shines. It looks quite strong, but wobbles quite a bit due to mismatched legs.";
               : done;
            }
            : else_if (is_at "on_stool") {
               : print "You're standing on it as it's balancing nicely now, since you used the folded beermat to prop it up.";
               : done;
            }
         }

          : match "exam legs" {
            : if (is_present "stool") {
               : print "The stool's are wonky, probably due to age and usage.";     
               : done;
            }
         }

# TODO 'it's propping up one of the legs of the stool' if newspaper_stool true        
          : match "exam newspaper;read newspaper" {
            : if (is_present "newspaper") {
               : print "The newspaper is a national staple of the English psyche. A large red banner adorns the top of the front page.\nYou figure you don't have time and have no inclination to read through it completely, but you do notice three things:\n1. The date is a decade ahead of what you last remember.\n2. There is a crossword page with scribbles and writing all over it in various coloured pens.\n3. Ten years?";
               : done;
            }
            : else_if (is_present "foldednewspaper") {
               : print "You can see a part of the sports page. Possibly.\nIt's folded quite well so is obscuring exactly which page it's on.";
               : done;
            }
         } 
          : match "exam crossword;exam scribbles;read crossword;read scribbles" {
            : if (is_present "newspaper") {
               : print "You turn to the crossword page you noticed earlier and examine it in more detail.\nThe red and green ink circles joined with lines don't make much sense. Some of the circled words stand out though:\n1 Across NIGHT\n5 Down LIGHT\n 8 Across POSITIVE\n 10 Across SAD\nThere are some partial words which you can also make out: \nSET, TO DI__E__TION, O__ TRAVEL, HAN__S\nA large arrow, repeatably drawn so it's almost gone through the page, points to the handwritten words ALL JOINED, FUTURE, PAST, OTHER???";
               : done;
               }
            : else_if (is_present "foldednewspaper") {
               : print "You can't see the crossword or scribbles at the moment. They're folded over inside the wad of paper.";
               : done;
            }
         } 

# TODO 'it's propping up one of the legs of the stool' if beermat_stool true
          : match "exam beermat" {
            : if (is_present "beermat") {
               : print "It's quite a new one and is only slightly torn. There is a neat brewery logo design which makes it look like there are fold marks across it vertically and horizontally.";
               : done;
            }
            : else_if (is_present "foldedbeermat") {
               : print "The beermat is folded into quarters and makes for a nice wad of cardboard.";
               : done;
            }
         } 

          : match "exam folder;open folder" {
            : if (is_present "folder" && !(is_exists "documents")) {
               : print "The folder is of the cardboard, manilla wallet type. Its edges are battered and it looks like it's been used quite a lot.\nIn it you find some laminated documents.";
               : create "documents" target = "inventory";
               : done;
            }
            : else_if (is_present "folder" && (is_exists "documents")) {
               : print "The folder is of the cardboard, manilla wallet type. Its edges are battered and it looks like it's been used quite a lot.";
               : done;
            }
         } 
          : match "exam documents;read documents" {
            : if (is_present "documents" && !is_worn "monocle") {
               : print "These documents are printed on or covered in some kind of plastic. They are very stiff and the surface is slightly reflective.\nThey are design documents and notes for something called The Fragments.\nIt doesn't make much sense, as it's written in technical jargon and some sort of code you don't understand.";
               : done;
            }
            : if (is_present "documents" && is_worn "monocle") {
               : print "These documents are printed on or covered in some kind of plastic. They are very stiff and the surface is slightly reflective.\nThey are design documents and notes for something called The Fragments.\nThe monocle seems to overlay some information on top of the printed text and makes it easier to understand. There are things like branch diagrams and descriptive text, all very boring.\nWhat does stand out though is that desert storms, broken down cars, a dead body, and a mysterious girl are mentioned in the first part of the notes.\nYour head spins as you read this\nThe second part has less pages but appears to end suddenly, as if a part is missing. It seems to be based in a pub where a viscious attack happens. It also includes rocks and something to do with a clock in a white building.";
               : done;
            }
         }
          : match "exam monocle" {
            : if (is_present "monocle" && !is_worn "monocle") {
               : print "The monocle is a small circular piece of glass which you wear in one of your eyes by squinting slightly around it with your eye socket.\nNot the most comfortable form of eyewear, but would make you looking quite sophisticated in a 1800s kind of way.";
               : done;
            }
            : else_if (is_worn "monocle" ) {
               : print "It actually feels comfortable to wear as it's encircled around the edge by some sort of cushioned plastic.\nWhen looking through the lens it seems that objects are clearer.";
               : done;
            }
         } 
          : match "fold documents" {
            : if (is_present "documents") {
               : print "The documents are too stiff to fold. They're covered in a plastic coating.";
               : done;
            }
         }
          : match "fold folder" {
            : if (is_present "folder") {
               : print "The folder is too stiff to fold.";
               : done;
            }
         }
          : match "tear folder" {
            : if (is_present "folder") {
               : print "The folder would take too long to tear.";
               : done;
            }
         }
# Vagrant Interaction

          : match "kiss vagrant" {
            : if (is_present "vagrant") {
               : print "Well.. weird after only meeting him so recently.";
               : done;
            }
         }
         
          : match "kill vagrant" {
            : if (is_present "vagrant" && is_at "pub_steps") {
               : print "That's a bit violent, isn't it?\nYou recall something a wise man once said to you, 'There's two sides to every story. Try and make your story, at least mostly, on the right side.'";
               : done;
            }
            : else_if (is_present "vagrant" && is_at "toilets") {
               : print "You sense it's not the right time for violence.";
               : done;
            }
         }

          : match "kill woman" {
            : if (is_present "woman" && is_at "plush_alcove") {
               : print "You sense it's no the right time for violence.'";
               : done;
            }
            : else_if (is_present "woman" && is_at "toilets") {
               : print "You sense it's not the right time for violence.";
               : done;
            }
         }
         
# TODO Maybe DYN if not met vagrant before?
          : match "exam vagrant" {
            : if (is_present "vagrant" && is_at "pub_steps") {
               : print "The poor guy has long silvery hair, a large unkempt beard, vacant eyes, a slight dribble from his cracked lips and years of experience etched onto his face.\nDerelict in every sense of the word, his current temporary home the steps of this building.";
               : done;
            }
            : else_if (is_present "vagrant" && is_at "toilets") {
               : print "The vagrant now looks more animated, still with his cracked lips and unkempt beard, his eyes show life and he is more spirited than before. You sense an urgency in his upright posture.";
               : done;
            }
         }
          : match "exam steps;exam step;exam stairs;exam stair" {
            : if (is_at "pub_steps") {
               : print "They allow for easier traversing an incline, for example, to allow the movement from the lower plane to the higher plane in easier smaller steps.\nThere is nothing special about these steps.";
               : done;
            }
         }
          : match "search vagrant" {
            : if (is_present "vagrant" && is_at "pub_steps") {
               : print "He makes a random shouting noise and manically slaps your hands away.";
               : done;
            }
         }
          : match "move vagrant" {
            : if (is_present "vagrant" && is_at "pub_steps") {
               : print "You try to man handle the vagrant away from where he is sitting, but he is rock solid and not going anywhere.\nHe grits his teeth and waves you away.";
               : done;
            }
         }
          : match "exam building" {
            : if (is_at "pub_steps") {
               : print "The pub which you came out of earlier.";
               : done;
            }
            : else_if (is_at "zone_outside_pub") {
               : print "Over the pub building is a oblong, brick building, brightened up by white paint on pebble dash walls. The roof is dark, slick tiles, proabably made out of slate.\nThey are shiny with a recent rain.";
               : done;
            }
         }
          : match "talk vagrant" {
            : if (is_present "vagrant" && is_at "pub_steps") {
               : print "His face move towards you on hearing your voice, but then immediately wanders away and moves from side to side. There is no real response at all.\nIt's possible he doesn't hear you or is just too far gone somehow to comprehend much.";
               : done;
            }
            : else_if (is_present "vagrant" && is_at "toilets") {
               : print "The vagrant doesn't notice you try to speak to him, or at least, he ignores you while concentrating on the discussion at hand.";
               : done;
            }
         }
          : match "exam note;read note" {
            : if (is_present "note") {
               : print "It's a newly printed library index card. The ink is actually still slightly sticky.\nIt reads 'Find me in the toilets. Need to be discrete. I know what you did. And I know why. Until later.'";
               : done;
            }
         }  
          : match "exam tree" {
            : if (is_present "tree" && (tree_blocked)) {
               : print "The ancient tree has a wide girth and stands proud in the corner of the seating area, sitting happily in some luscious soil, freshly watered from an autumn shower.\nIts widespread branches shadow the tables, creating a dappled light effect.\nIts lower branches are out of reach.";
               : done;
            }
            : else_if (is_present "tree" && !(tree_blocked)) {
               : print "An ancient tree, which has been growing here for many years, has a fence post pulling down one of its branches to shoulder height.";
               : done;
            }
            : else_if (is_at "up_a_large_tree") {
               : print "An ancient tree, a grand statement to wordly longevity.";
               : done;
            }
         }
          : match "exam trunk" {
            : if (is_present "tree") {
               : print "The ancient tree trunk has a wide girth. Even though it's ancient, the trunk is smooth and unclimable.";
               : done;
            }
            : else_if (is_at "up_a_large_tree") {
               : print "The trunk has petered out into a mass of branches, some of which you are balanced on now.";
               : done;
            }
         }

          : match "exam branches" {
            : if (is_present "tree" && (tree_blocked)) {
               : print "The branches spread wide, the smaller swaying slightly in the breeze.\nThe lower branches are out of reach but could probably be grabbed by something, if so wished.";
               : done;
            }
            : else_if (is_present "tree" && !(tree_blocked)) {
               : print "The ancient tree branches are spread wide.\nOne branch is weighed down with the fence post and can be reached easily.\nAs long as you're not scared of heights, you could probably climb the tree.";
               : done;
            }
            : else_if (is_at "up_a_large_tree") {
               : print "The branches up here are strong enough to hold your weight.";
               : done;
            }
         }
          : match "exam fence" {
            : if (is_present "metalfence" && !is_exists "railing") {
               : print "It's a mid-height palisade fence made of metal. It frames the view across the somewhat indistinct city nicely.\nOne railing has seperated from the main structure and is sitting on the ground.";
               : create "railing";
               : done;
            }
            : else_if (is_present "metalfence" && is_exists "railing") {
               : print "It's a mid-height palisade fence made of metal.";
               : done;
            }
         }

          : match "exam post" {
            : if (is_present "railing" && is_at "upper_seating_area" && is_present "tree" && (tree_blocked)) {
               : print "A sturdy piece of thin, yet quite heavy metal which has a slightly hooked end.\nYou eye the lower branches knowlingly.";
               : done;
            }
            : else_if (is_present "attachedrailing" && is_at "upper_seating_area" && is_present "tree" && !(tree_blocked)) {
               : print "The sturdy piece of thin metal is attached to a low branch of the tree, dragging it downwards towards you.";
               : done;
            }
            : else_if (is_present "railing") {
               : print "A sturdy piece of thin, yet quite heavy metal which has a slightly hooked end.";
               : done;
            }
         }
          : match "pull branch with post;lower branch with post;get branch with post;get branch with hook;attach post to branch;hook branch with post;attach hook to branch;lower branch with hook;reach branch with hook;reach branch with post;hook branch with hook;grab branch with hook;grab branch with post;pull branch with post;pull branch with hook;grab branch by hook;grab branch by post;grab tree with railing;grab tree with hook;grab tree with post" {
            : if (is_carried "railing"  && is_present "tree" && (tree_blocked)) {
               : print "You hook the fence post over the branch and the weight lowers it down so you will be able to get a grip on it.";
               : set_false "tree_blocked";
#               : unblock location ="up_a_large_tree";
               : destroy "railing";
               : create "attachedrailing";
               : done;
            }
            : else_if (is_present "attachedrailing" && is_present "tree" && !(tree_blocked)) {
               : print "The branch is already lowered by the weight of the metal railing you've hooked over it.";
               : done;
            }
         }
          : match "jump branches;grab branches;get branches" {
            : if (is_present "tree" && (tree_blocked)) {
               : print "They are just out of reach, no matter how high you try to jump.";
               : done;
            }
            : else_if (is_present "tree" && !(tree_blocked)) {
               : print "The ancient tree branches are spread wide.\nOne branch is weighed down with the fence post and can be reached easily.\nAs long as you're not scared of heights, you could probably climb the tree.";
               : done;
            }
         }
          : match "release post;get post;take post" {
            : if (is_present "tree" && !(tree_blocked)) {
               : print "You can't get the post to release from the branch, it seems to be stuck there, swinging in the slight breeze.";
               : done;
            }
         }
          : match "climb tree;up_;climb trunk;climb post;climb branch;climb branches;jump up;jump tree" {
            : if (is_present "tree" && !(tree_blocked)) {
               : print "You grip the low hanging fence post and manage to grab the thicker part of the branch with your other hand, get some purchase, and lift yourself up into the tree.";
               : press_any_key;
               : goto "up_a_large_tree";
               : redescribe;
               : done;
            }
            : else_if (is_present "tree" && (tree_blocked)) {
               : print "You make a valiant attempt to climb the tree but the lower branches are too high and the trunk, even though very old, is too smooth.";
               : done;
            }
         }
          : match "exam fairylights" {
            : if (is_present "fairylights" && is_at "up_a_large_tree" && !(lights_unwrapped_high)) {
               : print "The fairylights are wrapped around the trunk and branches.";
               : done;
            }
            : else_if (is_present "fairylights" && is_at "upper_seating_area" && (lights_unwrapped_low)) {
               : print "The fairylights are bunched up nicely, so they can be uncoiled easily. There's a plug on one end.";
               : done;
            }
            : else_if (is_present "fairylights" && is_at "up_a_large_tree" && (lights_unwrapped_high && (lights_unwrapped_low))) {
               : print "The fairylights are bunched up nicely, so they can be uncoiled easily. There's a plug on one end.";
               : done;
            }
            : else_if (is_present "fairylights" && is_at "upper_seating_area" && (lights_unwrapped_low)) {
               : print "The fairylights are bunched up nicely, so they can be uncoiled easily. There's a plug on one end.";
               : done;
            }
            
            : else_if (is_at "upper_seating_area" && !(lights_unwrapped_low) && !(lights_unwrapped_high)) {
               : print "The white fairylights are wrapped around the tree and extend high up out of sight along the branches and trunk.";
               : done;
            }
            : else_if (is_at "upper_seating_area" && !(lights_unwrapped_low) && (lights_unwrapped_high)) {
               : print "The white fairylights are wrapped around the tree and lower branches.";
               : done;
            }
            : else_if (is_present "fairylights" || is_present "litfairylights") {
               : print "A set of white fairylights which are bunched up nicely, so they can be uncoiled easily. There's a plug on one end.";
               : done;
            }
         }
          : match "get fairylights;take fairylights" {
            : if (is_present "fairylights" && is_at "up_a_large_tree"  && !(lights_unwrapped_high)) {
               : print "The fairylights are wrapped around the trunk and branches and need to be unwrapped delicately first..";
               : done;
            }
            : else_if (is_present "fairylights" && is_at "upper_seating_area"  && !(lights_unwrapped_low)) {
               : print "The fairylights are still wrapped around the lower part of the tree.";
               : done;
            }
         }
          : match "unwrap fairylights;untie fairylights;unwind fairylights" {
            : if (is_present "fairylights" && is_at "up_a_large_tree" && !(lights_unwrapped_high)) {
               : set_true "lights_unwrapped_high";
               : print "You carefully unwrap the fairylights from around the branches and the trunk, making sure not to tangle them.";
               : press_any_key;
               : print "They drop through the tree and land on the ground below.";
               : destroy "fairylights";
               : create "fairylights" target = "upper_seating_area";
               : done;
            }
            : else_if (is_present "fairylights" && is_at "upper_seating_area" && !(lights_unwrapped_low)) {
               : print "Holding the large bunch of fairylights in one hand, you gradually unwrap the rest of the long cable from the lower branches and base of the trunk until you reach the plug.";
               : create "fairylights" target = "inventory";
               : set_true "lights_unwrapped_low";
               : done;
            }
            : else_if (is_present "fairylights" && is_at "upper_seating_area" && (lights_unwrapped_low)) {
               : print "You have already removed the long chain of fairylights from the tree and branches.";
               : done;
            }
            : else_if (is_present "fairylights" && is_at "up_a_large_tree" && (lights_unwrapped_high)) {
               : print "You have already removed the long chain of fairylights from the tree and branches.";
               : done;
            }
            : else_if (is_at "upper_seating_area" && !(lights_unwrapped_high)) {
               : print "They won't unwrap from around the tree without the fiddly bits above unwound first.";
               : done;
            }
         }
          : match "plug fairylights in socket;light fairylights;plug fairylights into socket" {
            : if (is_present "fairylights" && is_present "socket") {
               : print "You plug the fairylights into the mains socket. They immediately come alive. Being nicely bunched up, the pin pricks of light become a mass of silvery brilliance.";
               : destroy "socket";
               : destroy "fairylights";
               : create "litfairylights" target = "inventory";
               : create "pluggedinfairylights";
               : done;
            }
            : else_if (is_present "pluggedinfairylights") {
               : print "They already are.";
               : done;
            }
         }
          : match "remove fairylights from socket;unplug fairylights;unplug fairylights from socket" {
            : if (is_present "pluggedinfairylights" && is_present "socket") {
               : print "You unplug the fairylights from the stocket.";
               : create "socket";
               : create "fairylights" target ="inventory";
               : destroy "litfairylights";
               : destroy "pluggedinfairylights";
               : done;
            }
            : else_if (is_present "fairylights") {
               : print "They aren't plugged in.";
               : done;
            }
         }
          : match "exam puzzle" {
            : if (is_present "puzzle") {
               : print "Crafted mainly from Maple wood, this beautiful box fits easily in your hand, allowing easy manipulation and is twice as long as its width.\nThe top and bottom are decorated in an intricate mosaic effect, due to multi layering different types of wood, while the left, right, front and back are a geometrical design pattern.\nAll surfaces are smooth with the edges slightly rounded and laquered to give it a smooth surface.";
               : done;
            }
         }
#TODO - is create puzzle already taken care of? WHICH STORY STREAM ? Difference between Mirror Room (console/button and Puzzle). Toilet (Instructions)
          : match "exam puzzles" {
            : if (is_at "games_area" && !(is_exists "puzzle") && (voice_talked_full)) {
               : print "The only complete one is an oriental looking puzzle box.";
               : create "puzzle";
               : done;
            }
            : else_if (is_at "games_area" && ((is_exists "puzzle") || !(voice_talked_full))) {
               : print "They are all in pieces, bits missing. Not one complete puzzle here.";
               : done;
            }
         }
          : match "exam instructions;read instructions" {
            : if (is_present "instructions") {
               : print "Printed on parchment paper, the font as if written with a reed, long and sweeping lettering, gives it the feeling of age:\nTenth Games (FR) Puzzle Box Instructions: This puzzle box can be opened by moving the sliding pieces of its surface. You must move the pieces in the proper sequence and the right direction to open the box.\nIn order to complete the puzzle you must first work out how to open the box and retrieve the prize. You must then close the box into its original shape.\nAs an example: slide top side left.\nHolding it in the same position and using your fingers to move it will allow you to visualise its position more easily. Left will always be left, the bottom will always be the bottom.\nYou can also try actions other than slide, but you are not allowed to break or force the box.\nWe wish you Happy Puzzling!";
               : done;
            }
         }
          : match "tear instructions" {
            : if (is_carried "instructions") {
               : print "On second thoughts, you realise they might be useful.";
               : done;
            }
         }
          : match "tear note" {
            : if (is_carried "note") {
               : print "On second thoughts, you realise it might be useful.";
               : done;
            }
         }
          : match "fold note" {
            : if (is_carried "note") {
               : print "The card is quite thick and goes back to its original shape.";
               : done;
            }
         }
          : match "break puzzle" {
            : if (is_present "puzzle") {
               : print "It would be a shame to try and break it. Besides, the puzzle can be completed, it just takes time and patience - hopefully it will be worth it.";
               : done;
            }
         }
          : match "open puzzle" {
            : if (is_present "puzzle" && (puzzle_progress < 4)) {
               : print "You try to open the wooden puzzle box, but you can't locate any lip or seam for a lid. It's a puzzle box and you need to get it open by investigation and manipulation.";
               : done;
            }
            : else_if (is_present "puzzle" && (puzzle_progress > 3)) {
               : print "The box is already open.";
               : done;
            }
         }
          : match "fold instructions" {
            : if (is_carried "instructions") {
               : print "They are so fragile that they would probably come apart if you folded them.";
               : done;
            }
         }
          : match "shake puzzle" {
            : if (is_carried "puzzle" && (puzzle_spinned)) {
               : print "It makes no noise. The spinning has locked something into position inside.";
               : set_true "puzzle_shaken";
               : done;
            }
            : else_if (is_carried "puzzle" && !(puzzle_spinned)) {
               : print "There is a dull rattling noise inside.";
               : set_true "puzzle_shaken";
               : done;
            }
         }
# TODO Random spin number between 1 and 6 (makes no difference)
          : match "spin puzzle" {
            : if (is_carried "puzzle") {
               : print "You spin the puzzle. The shiny wooden surface makes for ideal movement.";
#            : print ("Random: " + ( random {maximum = "6"} {minimum = "1"}));
               : set_true "puzzle_spinned";
               : done;
            }
         }
          : match "tap puzzle" {
            : if (is_carried "puzzle") {
               : print "You tap the puzzle. Nothing noticable happens.";
#            : print ("Random: " + ( random {maximum = "6"} {minimum = "1"}));
               : set_true "puzzle_tapped";
               : done;
            }
         }
          : match "slide left side down" {
            : if (is_carried "puzzle" && (puzzle_progress == 0) && (puzzle_spinned) && (puzzle_shaken)) {
               : print "With a bit of force, the left panel slides down slightly.";
               : set_true "puzzle_left_slid_down";
               : increment "puzzle_progress";
               : done;
            }
            : else_if (is_carried "puzzle" && (puzzle_progress > 0)) {
               : print "The left side won't move any further down.";
               : done;
            }
         }
          : match "slide top side left" {
            : if (is_carried "puzzle" && (puzzle_progress == 1)) {
               : print "The top side slides left easily.";
               : set_true "puzzle_top_slid_left";
               : increment "puzzle_progress";
               : done;
            }
            : else_if (is_carried "puzzle" && (puzzle_progress < 1)) {
               : print "The top side won't slide at all.";
               : done;
            }
            : else_if (is_carried "puzzle" && (puzzle_progress > 1)) {
               : print "The top side won't slide any further.";
               : done;
            }
         }
          : match "slide right side down" {
            : if (is_carried "puzzle" && (puzzle_progress == 2)) {
               : print "The right side slides down with some encouragement.";
               : set_true "puzzle_right_slid_down";
               : increment "puzzle_progress";
               : done;
            }
            : if (is_carried "puzzle" && (puzzle_progress < 2)) {
               : print "The right side won't slide at all.";
               : done;
            }
            : if (is_carried "puzzle" && (puzzle_progress > 2)) {
               : print "The right side won't slide any further.";
               : done;
            }
         }
          : match "slide top side right" {
            : if (is_carried "puzzle" && (puzzle_progress == 3)) {
               : print "The top side slides right.\nThe box opens!\nThere is a monocle sitting snugly in a small compartment dead centre of the box. There is nothing else to be seen.";
               : set_true "puzzle_top_slid_right";
               : increment "puzzle_progress";
               : create "monocle";
               : done;
            }
            : else_if (is_carried "puzzle" && (puzzle_progress < 3)) {
               : print "The top side won't slide at all.";
               : done;
            }
            : else_if (is_carried "puzzle" && (puzzle_progress > 3)) {
               : print "The box is already completed and open.";
               : done;
            }

         }
          : match "slide_" {
            : if (is_carried "puzzle" && (puzzle_progress < 4)) {
               : print "You attempt to slide the side, but nothing happens.";
               : done;
            }
            : else_if (is_carried "puzzle" && (puzzle_progress > 3)) {
               : print "The box is already completed and open.";
               : done;
            }
         }
# Exits into Maelstrom - from Pub Steps S,SW,W,NW
          : match "south_;s_;southwest_;sw_;west_;w_;northwest_" {
            : if (is_at "pub_steps") {
               : print "Suddenly, as you pass into the shimmering, it's as if night falls. Strange lights appear and disappear in all directions, you soon become unsure of which direction you are headed.";
               : press_any_key;
               : goto "chaotic_maelstrom";
               : redescribe;
               : done;
            }
         }
         
# Exits into Maelstrom - from Front Of Pub N, NW, W, SW
          : match "north_;n_;northwest_;nw_;west_;w_;southwest_;sw_" {
            : if (is_at "front_of_pub") {
               : print "As you enter the shimmering surroundings, it suddenly becomes darker, like a late summer evening. You smell ozone and a mist wraps itself around imaginary tubes. Lights flash in all directions, soon leading you to a state of confusion.";
               : press_any_key;
               : goto "chaotic_maelstrom";
               : redescribe;
               : done;
            }
         }

# Exits from Maelstrom - to Pub Steps NE,E
          : match "northeast_;ne_;east_;e_" {
            : if (is_at "chaotic_maelstrom" && chance (10)) {
               : print "You stumble through the ozone laden mist. No idea which direction you are heading. Finally the mist parts and you see the light of the pub in the distance.";
               : press_any_key;
               : goto "pub_steps";
               : redescribe;
               : done;
            }
            : else_if (is_at "chaotic_maelstrom") {
               : print "You aim in the general direction of sanity, through the choas of dark, light and mist. The hairs on your body feel alive.";
#               : press_any_key;
#               : goto "chaotic_maelstrom";
#               : redescribe;
               : done;
            }
         }
# Exits from Maelstrom - to Front Of Pub SE,S
          : match "southeast_;se_" {
            : if (is_at "chaotic_maelstrom" && chance (10)) {
               : print "You stumble through the mist. It finally opens and you see the front of the pub.";
               : press_any_key;
               : goto "front_of_pub";
               : redescribe;
               : done;
            }
            : else_if (is_at "chaotic_maelstrom") {
               : print "You feel like you are going round in circles, through the flashing chaos and the damp, dark mist, apprehension second place to fear.";
#               : press_any_key;
#               : goto "chaotic_maelstrom";
#               : redescribe;
               : done;
            }
         }
# Exits from Maelstrom - to Maelstrom
          : match "southwest_;sw_;west_;w_" {
            : if (is_at "chaotic_maelstrom") {
              : print "Disoriented, you stumble through this cold, silent limbo, trying hard not to lose your way. Trying hard to not go round in circles.";
#               : press_any_key;
#               : goto "chaotic_maelstrom";
#               : redescribe;
               : done;
            }
         }
# Exits from Maelstrom - to Maelstrom
          : match "nw_;n_;s_" {
               : if (is_at "chaotic_maelstrom") {
               : print "Fear grips you as you make way through the misty, occassionally blinding, darkness.";
#               : press_any_key;
#               : goto "chaotic_maelstrom";
#               : redescribe;
               : done;
            }
         }
          : match "exam shape" {
            : if (is_present "shape" && is_at "chaotic_maelstrom") {
               : print "It's hard to discern in the mist as it swirls around your feet. Maybe square or rectangle shaped? Some kind of folder?\nAnything else is impossible to see.";
               : done;
            }
            : else_if (!is_present "shape" && is_at "chaotic_maelstrom" && !is_exists "folder") {
               : print "You peer closely at the ground, but the shape seems to have vanished into the mist.\nAt least, you think it's partly to do with the mist...";
               : done;
            }
            : else_if (!is_present "shape" && is_at "chaotic_maelstrom" && is_exists "folder") {
               : print "You have picked the folder up already, there is nothing more see, and you really wish you weren't here.";
               : done;
            }
         }
          : match "exam mist" {
            : if (is_at "chaotic_maelstrom") {
               : print "Swirls of grey moisture, glowing white with random flashes of light from all around.";
               : done;
            }
         }
          : match "get shape" {
            : if (is_present "shape" && is_at "chaotic_maelstrom") {
               : print "You hesitantly put your hand near the ground, sweeping around and finally locate and pick up a folder through the low lying mist.";
               : create "folder" target = "inventory";
               : done;
            }
            : else_if (!is_present "shape" && is_at "chaotic_maelstrom" && !is_exists "folder") {
               : print "You scrabble around, sweeping your hand through the ground mist, but find nothing. Eventually, you give up and wipe your hands together, not sure of what's down there.";
               : done;
            }
            : else_if (!is_present "shape" && is_at "chaotic_maelstrom" && is_exists "folder") {
               : print "You scrabble around, sweeping your hand through the ground mist, but find nothing. Your hands are slightly damp from the ground mist.";
               : done;
            }
         }
          : match "exam graffiti;read graffiti" {
            : if (is_at "toilet_cubicle") {
               : print "Drawn on the cubicle wall with a large marker pen in surprisingly ledgible handwriting: 'This thing all things devours; Birds, beasts, trees, flowers; Gnaws iron, bites steel; Grinds hard stones to meal; Slays king, ruins town, And beats mountain down.'";
               : done;
            }
         }
          : match "exam space;exam spaces" {
            : if (is_at "toilet_cubicle") {
               : print "You can't see anything either above the door, as it's too high, and below, as there's nothing there but empty floor.";
               : done;
            }
         }
          : match "exam toilet;exam bowl;exam ceramic" {
            : if (is_at "toilet_cubicle") {
               : print "It's a porcelain toilet bowl which has no lid. The water isn't unpleasant, but the marks on the ceramic surface you don't want to think about, so you focus your attention on the task at hand.";
               : done;
            }
         }

      ###########################################
      ## General Banter Handling
      ###########################################

         : match "win_" {
            : print "YOU WIN!";
            : press_any_key;
            : print "Not really. You're still trapped in this hellish nightmare of unreality.";
            : done;
         }
         
           : match "puzzles_" {
               : print "\nGRAFFITI: 'WHAT FOUR-LETTER WORD CAN BE WRITTEN FORWARD, BACKWARD OR UPSIDE DOWN, AND CAN STILL BE READ FROM LEFT TO RIGHT?'\n NOON.\nAn old wall clock falls on the ground and breaks into 3 pieces. Describe the pieces, if you know that the sum of the numbers on each of them is the same.\nSOLUTION The total of all numbers on the clock is 1 + 2 + … + 12 = 78. Therefore each piece must contain numbers with total sum 26. The only way for this to happen is if the pieces are broken via 3 parallel lines – (1, 2, 11, 12), (3, 4, 9, 10), (5, 6, 7, 8)\nKings and queens may cling to power, and the jester’s got his call, but, as you may all discover, the common one outranks them all.\nThe ACE in a deck of cards.\nWhat occurs once in every minute, twice in every moment, but never in a thousand years?\nThe letter M.\nWhen you have me, you want to share me. When you share me, you no longer have me.\nSECRET.";
               : done;
    
            }

         : match "use_" {
            : print "You remember the dictionary definition of 'use' as something like:\n'take, hold, or deploy (something) as a means of accomplishing or achieving something; employ. For example, 'she used her key to open the front door''\nIn future, you decide you will be more specific when planning to do something.";
            : done;
         }         

         : match "richard_;pete_" {
            : clear_screen;
            : show_graphic "intro_graphic";
            : press_any_key;
            : clear_screen;
#            : show_graphic "RHgnrpixelphoto";
#            : press_any_key;
#            : clear_screen;
            : show_graphic "invitation";
            : press_any_key;
            : clear_screen;
            : show_graphic "BodyBeerGlassLOTScropped";
            : print "There's human remains buried here. Revulsion and shock penetrate your body. You scrabble back against the far wall in disgust.";
            : press_any_key;
            : clear_screen;
            : show_graphic "DesertCarCrop";
            : print "You can barely see the surrounding area due to the grit encrusted wind and the diminishing light. Your car is parked on the side of the road, in amongst the small grasses and rocks. The desert stretches to the north, south and east, it's probably a good idea to stay within view of you car.\nThe tarmac road which you broke down on runs north/south across the desolate landscape.";
            : press_any_key;
            : clear_screen;
            : redescribe;
            : done;
         }
         : match "adventuron _;chris _;chris ainsley" {
            : clear_screen;
            : print "{(6),'Adventuron'} is a model-based adventure creation language and game engine. It uses the same approach used by Scott Adams, Quill, PAW, GAC, and other early adventure systems.\nAdventuron’s actual game engine is designed to feel as if it is executing on an 8-bit computer such as a ZX Spectrum, C64 or Apple II.\nIf you have a PC with a browser, then you can start authoring games with Adventuron immediately.\nAdventuron is unashamedly anachronistic. Old-school text adventures used to feature a number of locations, paths between locations, objects in the gameworld, puzzles to be solved using textual inputs, and usually using items in your possession.\nAdventuron introduces light programming concepts such as variables, conditional statements and instructions. Adventuron should be quite useful as a first programming language once a few tutorials are created.\n{(7),'Thanks for this Chris!'}\n{(6),'Press any key to continue your adventure...'}";
            : press_any_key;
            : redescribe;
            : done;
         }  
 
            : match "pwd_;ls_;vi_;cd_;dir_;cls_" {
            : print "Ah yes, muscle memory at its finest.";
            : done;
         }
         
            : match "rm_" {
            : print "Ah yes, muscle memory at its finest.\nUnfortunately, you feel part of the universe dissolve.";
            : done;
         }
            : match "xyzzy_" {
            : drop_all;
            : gosub "quick_no_intro";
            : done;
         }         
         : match "frag1_" {
            : gosub "quick_start";
            : redescribe;
            : done;
         } 
         : match "frag2_" {
            : gosub "quick_start_2";
            : drop_all;
            : redescribe;
            : done;
         } 
         : match "frag3_" {
            : gosub "quick_start_3";
            : drop_all;
            : redescribe;
            : done;
         }  
         : match "frag4_" {
            : gosub "quick_start_4";
            : drop_all;
            : redescribe;
            : done;
         }  
         : match "registers_;debug_;variables_" {
            : gosub "registers";
            : done;
         }
         
         : match "pray _" {
            : print "That's all well and good, but something a bit more concrete might be more help in the immediate situation.\n(Or type HELP)";
            : done;
         }  

         : match "damn_" {
            : print "You let some err.. steam off in your own peculiar way. Things are getting weird around here aren't they.";
            : done;
         }

         : match "score _" {
            : gosub "scoring";
            : done;
         }

         : match "hint _;hints _" {
            : if (!is_exists "cap" && !is_exists "glasses" ) {
               : print "'Draw a map was Mordon's wizdom', said the ad-visor.";
               : done;
            }
            : else_if (is_exists "cap" && !is_exists "glasses" ) {
               : print "One item is wear it is. You will closely see the other soon. They will protect.";
               : done;
            }
            : else_if (!is_exists "cap" && is_exists "glasses" ) {
               : print "You have closely seen the mirrored one. Which will be followed by wear it is. They will protect.";
               : done;
            }
            : else_if ((!is_worn "cap" || !is_worn "glasses") && is_at "in_car") {
               : print "It's a case of wear do you want to go now.";
               : done;
            }
            : else_if (is_present "priest" && is_at("zone_desert") && !(player_dirty)) {
               : print "Communication.";
               : done;
            }
            : else_if (is_present "priest" && is_at("zone_desert") && (player_dirty)) {
               : print "Trust your instincts and don't hesitate.";
               : done;
            }
            : else_if (is_at "desert_s" && !is_exists "rock" ) {
               : print "You're on the verge of something, you can feel it.";
               : done;
            }
            : else_if (is_at "zone_inside_pub" && !is_exists "wallclock" ) {
               : print "You ponder the mirror you've noticed.";
               : done;
            }
            : else_if (is_at "small_pathway" && !is_present "stool" ) {
               : print "You're at your wits end with all that's going on; it's the height of insanity.";
               : done;
            }
            : else {
               : print "Examine things. Don't try and understand too much of why things are happening. And be vigilant.";
               : done;
            }
         }

         : match "blurb _" {
            : print "{(6),'Back Cover Blurb.'}\nThe '90s was a decade of bright colours and bold style. Trends spanning tight ripped jeans and colourful ripped tights to curtained hair for men and still big '80s hair for women.\nIt was a time of Grunge, Brit-Pop, Rave and Hip-Hop to name but a few.\nThe wall of Communism fell.  Hopes were high. It was an exciting time with the growth of the Internet, and general advancements in technology.\nIt was also the time you came face to face with a predicament you never want to repeat.\nOne invitation and your whole reality slipped out of kilter. One invitation and life suddenly shot off at a tangent. One invitation was all it took.\nWill YOU make it out alive? Will YOU put together the pieces of your life?\nOr will you just go round in circles, forever trying to find love, happiness and above all, justice.\nOnly YOU know.";
            : done;
         }
         
         : match "info_;help_;commands_" {
            : print "{(6),'Some Commands.'}\nFeel free to experiment.\nGET, EXAMINE, N, S, E, W, NW, NE, SE, SW, ENTER, EXIT, EXAMINE, EXITS, SCORE, TURNS. Short cuts are available, X for EXAMINE.\nSAVE, LOAD to save and load your game position to your computer.\nRAMSAVE and RAMLOAD to store and retrieve your current game from browser memory.\nGRAPHICS ON, GRAPHICS OFF (turning the graphics off does not affect gameplay. They are for illustration purposes only), SOUND ON, SOUND OFF (it's the same with sound. It can be turned off without affecting the gameplay)\nCONTROL + and CONTROL - to resize the play window.\nCREDITS, VERSION, BLURB for packaging information.\nRemember, if you are struggling to find a coherent aspect to your existence, you will always be able to type HINT during the game to get contextual assistance.\nAbove all, have fun!\n(The yellow icon below shows that the game is paused and waiting for a key to be pressed)";
            : done;
         }
         : match "author_;authors_;credits_;credit_" {
            : print "{(6),'The Fragments. © 2018'}\nA text and graphic interactive-fiction adventure.\nWritten by: Richard H.\nTested by: Pete S & James A.";
            : done;
         }
         : match "version_;vers_;ver_" {
            : print "{(6),'Version 0.06 / 31/07/2018 - 06/11/2018'}";
            : done;
         }
         : match "michele_" {
            : print "{(6),'Dedicated to Michele who became my wife while this game was being developed (and also put up with me forever going on about it!)'}";
            : done;
         }

         : match "exam me" {
            : print "You are still alive.";
            : done;
         }
         
         : match "exam floor;search floor" {
            : print "The floor is nondescript. TODO EXCEPT FOR MIRROR ROOM. ZONE INSIDE / ZONE OUTSIDE (GROUND/FLOOR differential)";
            : done;
         }
         
         : match "exam ceiling;search ceiling" {
            : print "The ceiling is nondescript. TODO EXCEPT FOR MIRROR ROOM. ZONE INSIDE / ZONE OUTSIDE (GROUND/FLOOR/CEILING differential)";
            : done;
         }
         
         : match "exam wall;search walls;exam walls" {
            : print "The walls are nondescript. TODO EXCEPT FOR MIRROR ROOM. ZONE INSIDE / ZONE OUTSIDE (GROUND/FLOOR differential) DO STONEWALL IF USED";
            : done;
         }
# REMEMBER TODO
         : match "remember landscape" {
            : if (landscape_descriptions_full) {
            : print "REMEMBER permutations of landscape iterations from patio/USA/tree.";
            : done;
            }
         } 
         : match "remember voice" {
            : if (voice_talked_full) {
            : print "REMEMBER permutations of voice iterations from mirror room.";
            : done;
            }
         }
         : match "remember toilets" {
            : if (toilets_talked_full) {
            : print "REMEMBER permutations of dialogue iterations from toilets.";
            : done;
            }
         }
         : match "remember biker" {
            : if (toilets_talked_full) {
            : print "REMEMBER biker girl.";
            : done;
            }
         }
         : match "remember priest" {
            : if (toilets_talked_full) {
            : print "REMEMBER priest.";
            : done;
            }
         }
         : match "remember woman" {
            : if (toilets_talked_full) {
            : print "REMEMBER woman (prologue player/plush alcove).";
            : done;
            }
         }
         : match "remember grave" {
            : if (toilets_talked_full) {
            : print "REMEMBER grave/body.";
            : done;
            }
         }
         : match "remember desert" {
            : if (toilets_talked_full) {
            : print "REMEMBER desert.";
            : done;
            }
         }
         : match "remember_" {
            : print "You don't particularly remember that too well.";
            : done;
         }
 
 # Fallthrough verbs        
         : match "talk _" {
            : print "Your talking like that would look really unusual, so you talk to yourself in your head instead.";
            : done;
         }
         : match "smell _" {
            : print "You have a sniff.";
            : done;
         }
         : match "give _" {
            : print "Give what to whom? Please be more specific.";
         : done;
         }
         : match "unscrew _" {
            : print "What would you like to unscrew, please be more specific.";
         : done;
      }
         : match "climb _" {
            : print "What would you like to climb, please be more specific.";
         : done;
      }
         : match "move _" {
            : print "What would you like to move, please be more specific.";
         : done;
      }
         : match "kick _" {
            : print "What would you like to do that to, please be more specific.";
         : done;
      }
         : match "smash _" {
            : print "What would you like to smash, please be more specific.";
         : done;
      }
         : match "drink _" {
            : print "What would you like to drink, please be more specific.";
         : done;
      }
         : match "open _" {
            : print "What would you like to open, please be more specific.";
         : done;
      }
         : match "fold _" {
            : print "What would you like to fold, please be more specific.";
         : done;
      }
         : match "unfold _" {
            : print "What would you like to unfold, please be more specific.";
         : done;
      }
         : match "close _" {
            : print "What would you like to close, please be more specific.";
         : done;
      }
         : match "dig _" {
            : print "What would you like to dig, please be more specific.";
         : done;
      }
      : match "throw _" {
         : print "What would you like to throw, please be more specific.";
         : done;
      }

      : match "lick _" {
         : print "You stick out your tongue and lick profusely.";
         : done;
      }
      : match "eat _" {
         : print "It's inedible.";
         : done;
      }
      : match "jump _" {
         : print "What would you like to jump, please be more specific.";
         : done;
      }
   
      : match "answer _" {
         : print "What would you like to answer, please be more specific.";
         : done;
      }
      : match "grab _" {
         : print "What would you like to grab, please be more specific.";
         : done;
      }
         : match "n _;s _;e _;w _;u _;d _;ne _;se _;nw _;sw _;north _;south _;east _;west _;northeast _;southeast _;northwest _;southwest _;up _;down _" {
# General Distance to socket checks
#  TODO IF it is just stopping movement, need to track the directions of the fairylights/path back, so it's allowed out of 'this' room
         : if (is_carried "litfairylights" && distance_to "the_bar" == 2) {
            : print "Before you can move, you lose your grip on the taut fairylights and they fly out of your hand towards where they were plugged in.";
            : create "litfairylights" target = "the_bar";
#            : print {("Distance to socket: " + ( distance_to "the_bar"))}
#            : print (${verb});
            : done;
            }         
      }
   }
   
   on_redescribe {

         : if (is_carried "litfairylights" && distance_to "the_bar" == 0) {
#            : print {("Distance to socket: " + ( distance_to "the_bar"))}
            : print "The fairylights plugged into the socket, trail behind you nicely so they don't become tangled up and unusable.";
#            : done;
            }

         : else_if (is_carried "litfairylights" && distance_to "the_bar" == 1) {
#            : print {("Distance to socket: " + ( distance_to "the_bar"))}
            : print "The fairylights trail behind you.";
            }
         : else_if (is_carried "litfairylights" && distance_to "the_bar" == 2) {
#            : print {("Distance to socket: " + ( distance_to "the_bar"))}
            : print "The fairylights trail behind you, there's not much slack left, the cable is taut.";
            }
         : if (is_at "behind_bar" && !is_exists "dogtag" && is_carried "litfairylights") {
            : print "With the aid of the fairylights, a gleam of metal alerts you to a dogtag hanging up at the back in one of the nooks.";
            : create "dogtag";
            
         }

   }
    
   ####################################################################
   ## Per Tick Events
   ####################################################################

   on_tick {

      : if (is_at "intro") {
#: gosub "init"; #init routine in place of initialization_subroutine = init in setup
#         :gosub "quick_no_intro";  # In Car/desert
#         :gosub "";                # Prior to Priest appearing
#         :gosub "quick_start_2";    # Plush Alcove
#        :gosub "quick_start_3";   # Toilet Cubicle
        :gosub "quick_start_4";    # 9 set on clock. next to display

         : clear_screen;
         : print "{(6), 'Welcome to The Fragments.'}\nThe '90s was a decade of bright colours and bold style. Trends spanning tight ripped jeans and colourful ripped tights to curtained hair for men and still big '80s hair for women.\nIt was a time of Grunge, Brit-Pop, Rave and Hip-Hop to name but a few.\nThe wall of Communism fell. Hopes were high. It was an exciting time with the growth of the Internet, and general advancements in technology.\nIt was also the time you came face to face with a predicament you never want to repeat.\nOne invitation and your whole reality slipped out of kilter. One invitation and life suddenly shot off at a tangent. One invitation was all it took.\nWill YOU make it out alive? Will YOU put together the pieces of your life?\nOr will you just go round in circles, forever trying to find love, happiness and above all, justice.\nOnly YOU know.";
         : press_any_key;
         : clear_screen;
         : print "{(6), 'The Story Prologue.'}\nThe invitation arrived a few weeks ago.\n 'A road trip in luxury!', they said.\n 'You'll love it!', they gushed.\n'It's in a Winnebago! Part of American culture!', they spouted.\n'Don't let us down!!', they demanded.";
         : press_any_key;
         : print"'They' are your friends from university, a good few years ago now. You hadn't seen them for way too long, so you figured this would be a good opportunity to compare and contrast how you had all ended up. Luckily the education system did its job and taught you well, and you landed on your feet as well as could be expected.";
         : press_any_key;
         : print "So the invitation arrived. The plan was to drive to the meet-up point to see the others and pick up the motorhome. It was a few hundred miles away so you had time to drive there in your trusty car, stop over in a motel and arrive feeling refreshed. Besides, you wanted the freedom before the social crush.";
         : press_any_key;
         : print "Evening approached and contrary to the forecast, the weather changed for the worse. A sandstorm blew in making visibility on the desert road nigh on zero. You managed a good few miles without mishap, but as your headlights cut through the orange gaseous chaos, the car swerved, pulling the wheel out of your hand.";
         : press_any_key;
         : print "You hold your breath, close your eyes and miraculously manage an erratic, bumpy stop to the side of the road...";
         : print "...deep breaths. ...heart pounding ...feet firmly on the floor.";
         : print "{(6), 'Press any key to start your adventure...'}";
         : press_any_key;
         : goto "in_car";
         : redescribe;
         : done;
      }

## Phone Noise Stages

         : if (!(player_dirty) && chance (30) && (is_present "phone" || is_present "litphone") && phone_answered == false) {
            : print "Your mobile phone vibrates.";
            }
         : else_if (!(player_dirty) && chance (30) && is_present "glovebox" && (!is_exists "phone" || !is_exists "litphone")) {
         : print "You hear an indistinct buzzing sound.";
            }
         : else_if (!(player_dirty) && chance (30) && (is_exists "phone" || is_exists "litphone") && phone_answered == true && !is_at "outside_stone_building" && !is_at "inside_stone_building" && !is_at "below_stone_building" ) {
         : print "You have the unnerving feeling that something unnatural is in your midst.";
            }
         : else_if (!(player_dirty) && chance (30) && (is_exists "phone" || is_exists "litphone") && phone_answered == true && is_at "outside_stone_building" ) {
         : print "The unnerving feeling is getting worse.";
            }
         : else_if (!(player_dirty) && chance (30) && (is_exists "phone" || is_exists "litphone") && phone_answered == true && is_at "inside_stone_building" ) {
         : print "You are aware of a tangible increase in the sense of dread rising in your stomach.";
            }
         : else_if (!(player_dirty) && chance (30) && (is_exists "phone" || is_exists "litphone") && phone_answered == true && is_at "below_stone_building" ) {
         : print "The sense of dread and foreboding, in this small space, is now almost debilitating.";
         }
#      }
## Priest NPC
#      : always {
# Nonchelant
         : if (chance (5) && (!(player_dirty) && is_at "zone_desert" && is_present "priest")) {
            : print "The priest raises his hands to the sky, legs outstretched and shouts, 'And God said his wrath will be upon us!'";
            }
         : else_if (!(player_dirty) && is_at "zone_desert" && chance (10) && (is_present "priest")) {
         : print "The priest protects his eyes from the dust.";
            }
         : else_if (!(player_dirty) && is_at "zone_desert" && chance (5) && (is_present "priest")) {
         : print "The priest flicks through his bible, struggling in the wind to hold the page, urgently looking for a certain passage. He mutters, 'No, no, no' over and over.";
            }
         : else_if (!(player_dirty) && is_at "zone_desert" && chance (10) && (is_present "priest")) {
         : print "The priest looks around nervously, giving the structure to the east a lingering glance.";
            }
         : else_if (!(player_dirty) && is_at "zone_desert" && chance (10) && (is_present "priest")) {
         : print "The priest wanders around.";
            }
         : else_if (!(player_dirty) && is_at "zone_desert" && chance (5) && (is_present "priest")) {
         : print "The priest looks into the distance, seemingly oblivious to the storm.";
            }
# Aggressive
         : if ((player_dirty) && is_at "zone_desert" && chance (10) && (is_present "priest")) {
            : print "The priest's demenour is now aggresive.";
            }
         : else_if ((player_dirty) && is_at "zone_desert" && chance (10) && (is_present "priest")) {
         : print "The priest looks at you with a curled lip.";
            }
         : else_if ((player_dirty) && is_at "zone_desert" && chance (10) && (is_present "priest")) {
         : print "The priest stares dark eyes at your dirty hands and face from when you found the body earlier.";
            }
         : else_if ((player_dirty) && is_at "zone_desert" && chance (10) && (is_present "priest")) {
         : print "The priest looks at the entrance way behind you then at you, a knowing smirk on his face.";
            }
         : else_if ((player_dirty) && is_at "zone_desert" && chance (10) && (is_present "priest")) {
         : print "The priest stands there, staring at you.";
            }
         : else_if ((player_dirty) && is_at "zone_desert" && chance (10) && (is_present "priest")) {
         : print "The priest's fixed gaze is cold.";
            }
#         }
# Biker Girl in Desert NPC
#      : always {
         : if (chance (5) && (is_present "biker") && is_at "outside_car") {
            : print "The biker girl scuffs her feet in the desert soil. She looks a bit impatient. Or bored.";
            }
         : else_if (chance (5) && (is_present "biker") && is_at "outside_car") {
         : print "The biker girl turns her head to the sun and closes her eyes.";
            }
         : else_if (chance (2) && (is_present "biker") && is_at "outside_car") {
         : print "The girl watches you silently.";
            }
         : else_if (chance (2) && (is_present "biker") && is_at "outside_car") {
         : print "The girl sighs to herself.";
            }
         : else_if (chance (5) && (is_present "biker") && is_at "outside_car") {
         : print "The biker girl looks around with interest at the surrounds.";
            }
         : else_if (chance (2) && (is_present "biker") && is_at "outside_car") {
         : print "The girl looks down the road, squinting at the horizon.";
            }
#         }
# Blond Woman present. ticks until she leaves
# Plush_Alcove
#      : always { 
          : if (is_present "woman" && woman_counter == 0 && is_at "plush_alcove") {
            : print "Abruptly the woman sitting opposite you drinks the last of her drink, reaches across the table and cups your hand with hers, 'Thanks for listening, I've told that story a million times to anyone who'll listen.'\nShe hurriedly stands up and then hesitates.\n'I hope to see you again, thank you for listening, really, I mean that', an attempt at a smile on her face.\nShe then abruptly turns and disappears to the north.\nUnbeknownst to her, a newspaper falls from her lap onto the floor.";
            : destroy "woman";
            : create "stool";
            : create "newspaper";
#            : done;
               }
            : else_if (is_present "woman" && woman_counter != 0 && is_at "plush_alcove") {
            : decrement "woman_counter";
#            : done;
            }
#         }  
# Cars On Highway NPC
#      : always {
         : if (chance (2) && (is_at "zone_road") && (is_exists "biker")) {
            : print "An indistinct vehicle drives down the highway, heading into the great unknown.";
            }
         : else_if (chance (5) && (is_at "zone_road") && (is_exists "biker")) {
         : print "A large, anonymous, eighteen wheeler hammers past, destination unknown.";
            }
         : else_if (chance (2) && (is_at "zone_road") && (is_exists "biker")) {
         : print "An ancient car of unknown make trundles past you, breathing large clouds of black smoke, banging and creaking as it goes.";
            }
         : else_if (chance (2) && (is_at "zone_road") &&  (is_exists "biker")) {
         : print "You are whipped by wind as a couple of vehicles drone past. One with a small caravan behind it.\nIt seems the world has woken up again.";
            }
         : else_if (chance (10) && (is_at "zone_road") && (is_exists "biker")) {
         : print "There's a subtle smell of fumes and road rubber.";
            }
         : else_if (chance (2) && (is_at "zone_road") && (is_exists "biker")) {
         : print "A white silver bus careens past following the black strip of road. A blurred glimpse of passenger's eyes and features.";
            }
         : else_if (chance (10) && (is_at "zone_road") && (is_exists "biker")) {
         : print "The road is quiet. Much like it was earlier.";
            }
 #        }
 #     : always { # Block location - Priest
          : if ((player_dirty ) && !(priest_dead)) {
               : block "desert_e" remove_obvious_exit = "true" description="The priest bears his teeth and shakes his head. He isn't going to let you head back in the direction of your car.\n";
#            : done;
            }
#         }
#      : always { # Block location - Your Car
         : if ((priest_dead )) {
            : block "in_car" remove_obvious_exit = "true" description="You can't get back into your car as the dark-haired, leather clad girl is leaning against the door.";
#            : done;
            }
#         }
#      : always { # Block location - Behind Bar
         : if ((is_exists "glass" )) {
            : block "behind_bar" remove_obvious_exit = "true" description="You try to go through the bartop entry way to get behind the bar, but the bartender politely puts his hand on it. 'Sorry sir, employees only.'";
#            : done;
            }
#      : always { # Block location - Toilets
         : if ((toilet_blocked )) {
            : block "toilets" remove_obvious_exit = "true" description="You can hear scuffling noises and muffled voices from inside the toilets. It sounds like someone having an argument.\nYou try the door and even though it's unlocked only opens a crack before slamming shut again.\n 'Don't come in. We're busy', a male voice warns gruffly.";
#            : done;
            }
#      : always { # Block location - small_pathway
         : if (!(bbq_open)) {
            : block "small_pathway" remove_obvious_exit = "true" description="A rusted barbeque has been left across the small pathway and there is no space on either side to get through.";
#            : done; 
            }

# Block toilet exit when discussion going on
         : if (toilets_counter != 0) {
            : block_path {

            description = "'Listen to what we have to say, it's important. It won't take long', the priest asserts."
            from        = "toilets"
            to          = "short_corridor"
   }
}
# Block Car Park with two paths (different descriptions) #TODO Unblock!!
: block_path {

    description = "From out of nowhere a howling gust of wind, carrying grit and sand, blows across the carpark. You catch sight of some desert dunes and a lonesome road within the storm.\nShocked and incredulous, you take a step back, but not before seeing what appears to be some sort of Roman looking swimming pool. The sandstorm then dies down and disappears as quickly as it arrived."
    from        = "front_of_pub"
    to          = "car_park"
}

: block_path {

    description = "As you start to make your way to the car park, the area in front of you shimmers and there's a loud metallic cracking sound which gives you pause.\nYou can see the car park, with the sun shining down as you would expect, but overlayed is another area which looks like a Roman swimming pool. With its colourful mosaic patterns and large, decorative pillars surrouning an inviting swimming pool of crystal clear water.\nYou take a step back, dumbfounded, and the shimmering vision disappears. "
    from        = "small_pathway"
    to          = "car_park"
}

         : if ((is_at "pub_steps") && is_present "vagrant" && is_present "documents" ) {
            : print "The vagrant, from his home on the stairs, suddenly looks up at you with an excited expression. Examining your face, he shades his eyes from the glossy documents sparkling in the sunshine. \n'You have the documents. Where..? Oh nevermind, here, read this.'\n Shoving something into your hand, he backs off and ambles up the steps into the pub.";
            : destroy "vagrant";
            : set_true "vagrant_talked";
            : create "note" target="inventory";
            }
# Vagrant NPC - Pub Steps
#      : always {
         : if (chance (5) && (is_present "vagrant") && is_at "pub_steps") {
            : print "The vagrant rearranges himself to make himself comfy.";
            }
         : else_if (chance (5) && (is_present "vagrant") && is_at "pub_steps") {
         : print "The vagrant's eye twitches slightly.";
            }
         : else_if (chance (2) && (is_present "vagrant") && is_at "pub_steps") {
         : print "The vagrant looks down at the floor.";
            }
         : else_if (chance (2) && (is_present "vagrant") && is_at "pub_steps") {
         : print "The vagrant mutters something under his breath.";
            }
         : else_if (chance (5) && (is_present "vagrant") && is_at "pub_steps") {
         : print "The vagrant hums to himself and absently scratches his beard.";
            }
         : else_if (chance (2) && (is_present "vagrant") && is_at "pub_steps") {
         : print "The vagrant coughs spittle.";
            }
# Vagrant NPC - Toilets # TODO Needed? Rather be counter for communication
#         : if (chance (5) && (is_present "vagrant") && is_at "toilets") {
#            : print "toilets vagrant.";
#            }
#         : else_if (chance (5) && (is_present "vagrant") && is_at "toilets") {
#         : print "toilets vagrant.";
#            }
#         : else_if (chance (2) && (is_present "vagrant") && is_at "toilets") {
#         : print "toilets vagrant.";
#            }
#         : else_if (chance (2) && (is_present "vagrant") && is_at "toilets") {
#         : print "toilets vagrant.";
#            }
#         : else_if (chance (5) && (is_present "vagrant") && is_at "toilets") {
#         : print "toilets vagrant.";
#            }
#         : else_if (chance (2) && (is_present "vagrant") && is_at "toilets") {
#         : print "toilets vagrant.";
#            }
#
# Ambient Pub Noise/Actions
#      : always {
         : if (chance (1) && (is_at "zone_inside_pub")) {
            : print "A song plays that you're not familiar with. Too many drums and too much bass. And not much else.";
            }
         : else_if (chance (5) && (is_at "zone_inside_pub")) {
         : print "There is a general hubbub of relaxed conversation.";
            }
         : else_if (chance (1) && (is_at "zone_inside_pub")) {
         : print "Someone laughs in the general background murmur.";
            }
         : else_if (chance (1) && (is_at "zone_inside_pub")) {
         : print "There is a vague odour of cleaning fluid and beer.";
            }
         : else_if (chance (1) && (is_at "zone_inside_pub")) {
         : print "A door slams somewhere.";
            }
         : else_if (chance (1) && (is_at "zone_inside_pub")) {
         : print "People mill about.";
            }
         : else_if (chance (1) && (is_at "zone_inside_pub")) {
         : print "The jukebox starts to play a song by a female artist in which she sings about wishing she could turn back time.";
            }
         : else_if (chance (2) && (is_at "zone_inside_pub")) {
         : print "While looking around, you remember breaking down in your car. It seems such a long time ago now.";
            }
# Ambient Outside Pub Noise/Actions
#      : always {
         : if (chance (1) && (is_at "zone_outside_pub")) {
            : print "A small breeze picks up.";
            }
         : else_if (chance (5) && (is_at "zone_outside_pub")) {
         : print "You feel a sudden increase in air pressure, which subsides almost immediately.";
            }
         : else_if (chance (2) && (is_at "zone_outside_pub")) {
         : print "The air seems to hold static electricity as your skin feels on edge. It tastes vaguely metallic. Or electric. You can't decide.";
            }
         : else_if (chance (2) && (is_at "zone_outside_pub")) {
         : print "In the back of your mind, you ponder what would have happened if you'd not accepted the invition. How long ago was that now?";
            }
         : else_if (chance (2) && (is_at "zone_outside_pub")) {
         : print "A wind picks up and rustles some out of sight trees. Like a small child breathing.";
            }
         : else_if (chance (2) && (is_at "zone_outside_pub")) {
         : print "A far off howl reaches your ears, or is it someone crying out. It stops after a few seconds.";
            }
         : else_if (chance (3) && (is_at "zone_outside_pub")) {
         : print "The pleasant autumn sunshine is a nice change, warming your heart and soul and making you think that maybe there is a way out of this weirdness.";
            }
         : else_if (chance (3) && (is_at "zone_outside_pub")) {
         : print "You feel a gentle shift in reality: textures change, air shimmers, corners are softer, angles subtely decrease, straight lines move. But they all look the same.";
            }
         : else_if (chance (3) && (is_at "zone_outside_pub")) {
         : print "For a second, you think you hear a baby crying. But before you can focus on it, all goes silent.";
            }
# Barman NPC
#      : always {
         : if (chance (10) && (is_present "barman")) {
            : print "The barman mutters to himself, 'People stealing our glasses all the time', while wiping down the bartop.";
            }
         : else_if (chance (15) && (is_present "barman")) {
         : print "The bartender puts some clean glasses on the shelf.";
            }
         : else_if (chance (8) && (is_present "barman")) {
         : print "The barman removes a load of used glasses from the bar.";
            }
         : else_if (chance (4) && (is_present "barman")) {
         : print "The barman looks around.";
            }
         : else_if (chance (5) && (is_present "barman")) {
         : print "The barman glances at the tv with disinterest.";
            }
         : else_if (chance (5) && (is_present "barman")) {
         : print "The bartender carefully wipes down the bartop.";
            }
         : else_if (chance (10) && (is_present "barman")) {
         : print "The barman wipes his hands on his apron.";
            }
# Mirror Room Voice NPC (Biker) - sadness then elation
#      : always {
# TODO - variable conversation

         : if ((mirror_voice == 14) && (is_at "mirror_room")) {
#            : print "Hear ambient static and clicks. A tone.";
            : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 13) && (is_at "mirror_room")) {
            : print "Click.";
            : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 12) && (is_at "mirror_room")) {
#            : print "Hear ambient static and clicks. A tone.";
            : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 11) && (is_at "mirror_room")) {
            : print "Click. Static sound. A short tone.";
            : press_any_key;
            :print "'Hello sweetie, can you hear me?' A tinny, deadpan voice echoes around the room.";
            : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 10) && (is_at "mirror_room")) {
         : print "'Doesn't seem five minutes since I drove you out of the desert, does it? The desertscape is one of my favourites. So far. It took quite a bit of planning.'\n'Now watch this.'";
         : press_any_key;
         : print "From below the screen, a console slides out. Not a coincidence you think.";
         : create "console";
         : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 9) && (is_at "mirror_room")) {
         : print "'I know you're lost for words. I was too.', she continues.";
         : decrement "mirror_voice";
            }
#TODO Variances in speech (cubicle_counter) (toilet_open)
         : else_if ((mirror_voice == 8) && (is_at "mirror_room")) {
         : print "'When they were taken from me. When my life collapsed. It was fragments of emotions fighting for position.', she sounds sorrowful.";
         : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 7) && (is_at "mirror_room")) {
         : print "'The grave... the grave of my daughter.'";
         : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 6) && (is_at "mirror_room")) {
         : print "She continues, 'They never did find the killer. Found her body though, not my... Ohh...', a small exhale of breath.";
         : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 5) && (is_at "mirror_room")) {
         : print "The voice sniffles. More stoic, 'Don't believe what they say. They don't know anything.'";
         : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 4) && (is_at "mirror_room")) {
         : print "'Come and join me in the tower. I love this place. Lots of lovely memories. A nicer location than the desert.', she seems to perk up, her voice suddenly sounding more rounded.";
         : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 3) && (is_at "mirror_room")) {
         : print "'Look for the monocle, it's a puzzle for sure.', she whispers with a hint of a smile sounding on her lips.";
         : decrement "mirror_voice";
            }
#TODO - Variable Conversation
         : else_if ((mirror_voice == 2) && (is_at "mirror_room")) {
         : print "'Ignore what the others say, they don't understand.'";
         : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 1) && (is_at "mirror_room")) {
         : print "You hear a whirring sound and from the console, under the screen, a large button appears dead centre. 'To press or not to press, oh this is fun!', she giggles.";
         : create "button";
         : press_any_key;
         : print "Silence.";
         : press_any_key;
         : print "You commit what the disembodied voice said to memory.";
         : decrement "mirror_voice";
            }
         : else_if ((mirror_voice == 0) && (is_at "mirror_room")) {
#         : print "";
         # TODO REMEMBER
         : decrement "mirror_voice";
         : set_true "voice_talked_full";
            }
            
# Toilet Cubicle - Listen voices NPC before being caught (or using whiskey to exit)
         : if ((cubicle_counter == 12) && (is_at "toilet_cubicle")) {
            : print "As noted, not exactly private in here, you can hear a raging argument going on between two or three people, through the cubicle door.";
            : decrement "cubicle_counter";
            }
         : else_if ((cubicle_counter == 11) && (is_at "toilet_cubicle")) {
            : print "'What do you mean you're here to help me?' An hysterical woman.";
            : decrement "cubicle_counter";
            }
         : else_if ((cubicle_counter == 10) && (is_at "toilet_cubicle")) {
            : print "'Let me out you dumb asses. What are you talking about. Get your dirty hands off me.' She sounds scared.";
            : decrement "cubicle_counter";
            }
         : else_if ((cubicle_counter == 9) && (is_at "toilet_cubicle")) {
            : print "Something bangs up against the flimsy cubicle door.";
            : decrement "cubicle_counter";
            }
         : else_if ((cubicle_counter == 8) && (is_at "toilet_cubicle")) {
            : print "Heavy breathing. A cough. 'Calm down. Do you remember anything before the car breaking down?' A deep, male voice.";
            : decrement "cubicle_counter";
            }
         : else_if ((cubicle_counter == 7) && (is_at "toilet_cubicle")) {
            : print "'The car breaking down? The desert? Are you insane? What is this? How do you know about it?', her voice raising again.";
            : decrement "cubicle_counter";
            }
         : else_if ((cubicle_counter == 6) && (is_at "toilet_cubicle")) {
            : print "The man talks quieter, 'We know all about it. We caused it. Well, she caused it. We were crazy to go along with her plan. And then she put you in, right into the middle of it. Along with herself. The biker girl? The van?'";
            : decrement "cubicle_counter";
            }
         : else_if ((cubicle_counter == 5) && (is_at "toilet_cubicle")) {
            : print "Silence.";
            : decrement "cubicle_counter";
            }
         : else_if ((cubicle_counter == 4) && (is_at "toilet_cubicle")) {
            : print "'But I don't remember, I'm confused with everything I think I remember. One minute all seems normal, then the next it's as if it happened yesterday. And sometimes it's vague, as if.. as if..', she struggles for words through the tears.\n'And the urge, the urge to end up here was inescapable, everywhere I went, everything I did', her voice rising.";
            : decrement "cubicle_counter";
            }
         : else_if ((cubicle_counter == 3) && (is_at "toilet_cubicle")) {
            : print "The man again, 'We just need help, outside of us, to sort this mess out. And we need you to help us too', a pause, 'One sec.'\nSteps sounding off the tiles towards the cubicle, towards you.";
            : decrement "cubicle_counter";
            }
         : else_if ((cubicle_counter == 2) && (is_at "toilet_cubicle")) {
            : print "Silence.";
            : decrement "cubicle_counter";
            }
         : else_if ((cubicle_counter == 1) && (is_at "toilet_cubicle")) {
            : print "The cubicle door slams open, knocking you back. A blurry figure drags you out of the cubicle.\n'Speak of the devil', smiles the priest.";
            : decrement "cubicle_counter";
            : set_true "cubicle_open";
            : goto "toilets";
            : create "priest";  # Priest, Unstable Manic, Evaluator, guarding south door
            : create "vagrant"; # Vagrant, Helper, Scripter
            : create "woman";   # Blond Woman, Part 1 player, confused, Artist
            : press_any_key;
            : redescribe;
#            : create "biker";   # Biker Woman (Van) Baddie, Psychologist
            }

# Toilets - Conversation after toilet cubicle
         : if ((toilets_counter == 12) && (is_at "toilets")) {
            : print "There is an awkward silence. The priest waves at you. The vagrant and woman turn to you and their faces visibly relax.";
            : decrement "toilets_counter";
            }
         : else_if ((toilets_counter == 11) && (is_at "toilets")) {
            : print "The woman is the first to speak, eyeing you warily, 'It's you. What do you know about this? I mean, what the hell is going on? We were talking about the car and the desert and the... the... priest for godsake'";
            : decrement "toilets_counter";
            }
         : else_if ((toilets_counter == 10) && (is_at "toilets")) {
            : print "The vagrant interjects, 'OK, in an attempt to answer your question in the limited time we have available, I'll explain it as best I can.'\n'Our team, through the misdeeds of the biker girl, whom you've both seen before, have caused havoc in this scenario.'\nIndicating you, he says, 'And you were unfortunate enough to have been included in her plans.'";
            : decrement "toilets_counter";
            }
         : else_if ((toilets_counter == 9) && (is_at "toilets")) {
            : print "The priest laughs a shallow laugh, 'Allow me to introduce myself.'\nHe points to his chest, 'Our real names don't mean anything here, but our roles do. I am the priest and I am the Evaluator.'";
            : decrement "toilets_counter";
            }
         : else_if ((toilets_counter == 8) && (is_at "toilets")) {
            : print "He points to the vagrant, 'This is the vagrant, he is the Scripter.'";
            : decrement "toilets_counter";
            }
         : else_if ((toilets_counter == 7) && (is_at "toilets")) {
            : print "'Now comes the complicated bit', he says, biting his lip, 'This is the woman, I know, a lame description, but bear with me. She is the Artist in the team.'";
            : decrement "toilets_counter";
            }
         : else_if ((toilets_counter == 6) && (is_at "toilets")) {
            : print "'And finally, you.', the priest says, 'are caught up in this fiasco, and are not part of the team. We each had a role, run by the biker girl. She was head of the project team.'\nHe sighs and rearranges his shoulders on the wall.\n'She decided to have a little fun.'";
            : decrement "toilets_counter";
            }
         : else_if ((toilets_counter == 5) && (is_at "toilets")) {
            : print "The vagrant picks up the conversation, 'The biker messed with outcomes and played with scenarios. She's using it as a drug. She's flipped and is causing chaos for her own amusement.";
            : press_any_key;
            : print "And because the biker added the woman, added an actual entity to the scenario, the woman now has two histories in her consciousness.'";
            : decrement "toilets_counter";
            }
         : else_if ((toilets_counter == 4) && (is_at "toilets")) {
            : print "'So we needed another consciousness which fitted the woman's psyche', he turns to you, 'and this is where you came in.' ";
            : decrement "toilets_counter";
            }
         : else_if ((toilets_counter == 3) && (is_at "toilets")) {
            : print "Before the vagrant can continue, the woman blurts out, 'I don't know what you are talking about, I think you're insane, you're all insane, why don't get you let me out of here you mothe...', at which point the vagrant punches her in the face.\nHer nose explodes in crimson petals, her eyes go up into their sockets, and she collapses in a heap on the floor.";
            : decrement "toilets_counter";
            }
         : else_if ((toilets_counter == 2) && (is_at "toilets")) {
            : print "The vagrant rubs his knuckles and continues, 'So, dear friend, we need your help in tracking, locating and eliminating the biker girl.'\nHe pauses to inspect his hand and possibly his finely manicured nails, and then continues, 'The balance of the energy will be as it was before, as the woman', pointing to the woman on the floor, 'is no longer present.'";
            : decrement "toilets_counter";
            }
         : else_if ((toilets_counter == 1) && (is_at "toilets")) {
            : print "The vagrant reaches down and touches the woman, and her body dissolves in a blue, ethereal light.\nThe priest opens his arms, 'OK, you may as well leave now. Be on your way. We have things to take care of, of which you will be part of, so be vigilant.'\nAs both the priest and vagrant shimmer out of view, you hear the vagrant utter one final sentence while making a spin motion with his hands, and what you could have sworn was a wink, 'Spin and shake it, baby.'";
            : press_any_key;
            : print "You commit, as best you can, what you've just heard to memory.";
#            : create "puzzle" target ="games_area";
            : decrement "toilets_counter";
            : destroy "woman";
            : destroy "vagrant";
            : destroy "priest";
            : set_true "toilets_talked_full";
            : unblock_path {
               from        = "toilets"
               to          = "short_corridor"
            }
         }


# Maelstrom - Folder NPC
#      : always {
         : if (chance (25) && (!is_carried "folder") && is_at "chaotic_maelstrom" && !is_exists "folder") {
            : print "Through the ever changing ground level mist, you see a vague shape, momentarily lit up by the periodic lightening, glowing tendrils of mist whisping around it.";
            : create "folder";
            : create "shape";
         }
         : else_if (chance (100) && (is_present "folder") && (!is_carried "folder") && is_at "chaotic_maelstrom") {
            : print "The mist closes in on the shape on the ground and it strangely disappears from sight.";
            : destroy "folder";
            : destroy "shape";
         }
         : if (is_carried "folder")  {
            : destroy "shape";
         }
         
      }

####################################################################
## Subroutines (can be referenced from event handlers)
####################################################################

subroutines[] {
 #TODO
      init : subroutine {
         : block "below_stone_building" remove_obvious_exit = "true" description="this is only a test.";
      }
      quick_no_intro : subroutine {
         : goto "in_car";
         : redescribe;
         : done;
      }
      quick_start : subroutine {
         : goto "inside_stone_building";
         : create "priest" target = "outside_stone_building";
         : create "glasses" target = "inventory" worn = "true";
         : create "cap" target = "inventory" worn = "true";
         : create "phone" target ="inventory";
         : create "glass" target ="inventory";
         : set_true "player_dirty";
#         : set_true "phone_answered";
         : redescribe;
         : done;
      }
 
      quick_start_2 : subroutine {
         : drop_all;
         : goto "plush_alcove";
         : create "glass" target ="inventory";
         : set_true "player_dirty";
         : set_integer  var="woman_counter" value="2";
         : destroy "stool";
         : create "woman";
         : redescribe;
         : done;
      }
      
      quick_start_3 : subroutine {
         : drop_all;
         : set_false "toilet_blocked";
         : goto "toilet_cubicle";
         : create "whiskey" target = "inventory";
         : redescribe;
         : done;
      }
      
      quick_start_4 : subroutine {
         : drop_all;
#         : set_false "display_open";
         : set_integer  var="clock_time_set" value="3";
         : set_true "pendulum_on";
         : set_true "voice_talked_full";
         : set_true "display_open";
         : goto "mirror_room";
         : create "monocle" target = "inventory" worn = "true";
         : create "glass" target = "inventory";
         : create "cubbyhole" target ="short_corridor";
         : create "console" target = "mirror_room";
         : create "button" target = "mirror_room";
         : redescribe;
         : done;
      }
      
      registers : subroutine {
         : print {("phone_answered: " + phone_answered)}
         : print {("tap_hit: " + tap_hit)}
         : print {("tap_hit: " + tap_on)}
         : print {("player_dirty: " + player_dirty)}
         : print {("wet_floor: " + wet_floor)}
         : print {("priest_dead: " + priest_dead)}
         : print {("priest_confronts_msg: " + priest_confronts_msg)}
         : print {("west_msg_displayed: " + west_msg_displayed)}

         : print {("wood_exists: " + wood_exists)}
         : print {("glovebox_examined: " + glovebox_examined)}
         : print {("talk_priest: " + talk_priest)}
         : print {("talk_biker: " + talk_biker)}
         
         : print {("woman_counter: " + woman_counter)}
      }

# TODO Testing Score - need more boolean for each 'good' stuff player does
# TODO Work out what is actually a side vs main puzzle
      scoring : subroutine {
#      : set_integer var="player_score" value="0";
      : set_integer var="solved_side" value="0";
      : set_integer var="solved_main" value="0";
      : set_integer var="completed_fragments" value="0";

      : if (phone_answered) {
            : add var = "solved_side" value = "1";}
      : if (is_exists "openglovebox") {
            : add var = "solved_side" value = "1";}
      : if (is_exists "piecesofpaper") {
            : add var = "solved_side" value = "1";}
      : if (is_exists "cap") {
            : add var = "solved_side" value = "1";}
#      : if (is_exists "bowl") {
#           : add var = "solved_side" value = "1";}
      : if (is_exists "glasses") {
            : add var = "solved_side" value = "1";}
      : if (is_exists "opentrunk") {
            : add var = "solved_side" value = "1";}
      : if (is_exists "rock") {
            : add var = "solved_side" value = "1";}
      : if (is_exists "sharpwood") {
            : add var = "solved_side" value = "1";}
      : if (tap_hit) {
            : add var = "solved_side" value = "1";}
      : if (tap_on) {
            : add var = "solved_side" value = "1";}
      : if (is_exists "filledbowl") {
            : add var = "solved_side" value = "1";}
      : if (player_dirty) {
            : add var = "solved_side" value = "1";}
      : if (priest_dead) {
            : add var = "solved_side" value = "1";}
 
 # TODO Need more flags for this (to show EXAM'd etc)
 #     : print {("{(7),'Overall score is: " + player_score + "/120'}. (This is the accumulated score based on EVERYTHING you do.")}
      : print "{(6),'Progress Made.'}";
      : print {("{(7),'Side puzzles solved: " + solved_side + "/35'} Puzzles solved which can be omitted without stopping progression.")}
      : print {("{(7),'Main puzzles solved: " + solved_main + "/10'} Puzzles solved which go towards progression.")}
      : print {("{(7),'Fragments completed: " + completed_fragments + "/4'} Fragments completed...")}
                 
      }
   }

####################################################################
## Assets - graphics and fonts
####################################################################

assets {
      graphics[] {

      invitation : base64_png "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";
      intro_graphic : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAADACAIAAABkjyoxAAAC2UlEQVR42u3d4Y6VMBAGUN7/qXgzNNGsrHTKTCnEK+eEfxdLA2E+2sK6LAAAAAAAb7POc9pg6eizeugSA3xsCEzsGAD/UQjkW3OVAebFwjOpYiQAIASEAIAQkAAAnx4CAzur7gBCwGAAQAgIAYC7bWeG/3lr5+b2beftMtcUAAAAeI9thllNfe9YexZoqKmU6vrDNs/EK3K9qT9nvHsxdlelN2sXda9/5P22/jzxrc3NCzOswRbf9ctx+31bN39ag3s4bL5ddKL9n1w5vpIAYct/VdxuuV3qmbxc3M56Ve3prAQQAXBnCPy6A8uDik4CHMYfUUVp/r40H0/Panxyh8K5ihOg/+QddaZUbvOjuK9fl5tDYCCrgp6XE0AIwG0hUBoDdEYC1TFAVHQGxgClEMi/QNoZA3SqcnSs+jN3cUYonyeV5NkFUOrdrcQkZPaYwP0hMJAAzRAYSIBmVRpOgIkhsN+zOssRHav+zP1vhcBpVqVDYGQMYCQA94TAWAIcQ2BsDHBciLySAHeEQHWWIzrW2Ox7MhlGSvu0EKh+KzKeAEIAZofA8W4cWxNIreLF88pfvyfL0pP/4UApBKLODC/Bli/t0yEw//u7TgIIAZgaAs0KMBAC2Vc54pXFflk6Vu4n3w7Kh0AYOBfew8nMDg3myYQQqH41fmkMIARgaghEFaDeVjwL1CoCvaITzwI9HwKZDyH2O/RGHTNCIPt+/3MhsE0JgVICCAGY5HSm/2IIRJX7pOjE6wDVELiYA8k/UpTcIVVup34nkKrQl0JgmxMCQQ8kAAAAAAAAAAAAAO+zwoupAAAAAAAAAADAq3h3AkAISACAV4eAUwHw1hBwHgDeGgJOAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Il+ALY6ilEXRiQqAAAAAElFTkSuQmCC";
      DesertCarCrop : base64_png "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";
      BodyBeerGlassLOTScropped : base64_png "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";

   }
}